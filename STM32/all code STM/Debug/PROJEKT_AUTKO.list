
PROJEKT_AUTKO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094c4  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08009608  08009608  0000a608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099e8  080099e8  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  080099e8  080099e8  0000a9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099f0  080099f0  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099f0  080099f0  0000a9f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080099f4  080099f4  0000a9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080099f8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  200001d8  08009bd0  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00001800  20000668  08009bd0  0000b668  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010564  00000000  00000000  0000b201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002890  00000000  00000000  0001b765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  0001dff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c1d  00000000  00000000  0001ef90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f43  00000000  00000000  0001fbad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b7f  00000000  00000000  00037af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000908d9  00000000  00000000  0004b66f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dbf48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053d4  00000000  00000000  000dbf8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e1360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d8 	.word	0x200001d8
 800015c:	00000000 	.word	0x00000000
 8000160:	080095ec 	.word	0x080095ec

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001dc 	.word	0x200001dc
 800017c:	080095ec 	.word	0x080095ec

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dc6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	@ 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	@ 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	@ 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__gesf2>:
 8001014:	f04f 3cff 	mov.w	ip, #4294967295
 8001018:	e006      	b.n	8001028 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__lesf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	e002      	b.n	8001028 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__cmpsf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	f84d cd04 	str.w	ip, [sp, #-4]!
 800102c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001030:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	bf18      	it	ne
 800103a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800103e:	d011      	beq.n	8001064 <__cmpsf2+0x40>
 8001040:	b001      	add	sp, #4
 8001042:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001046:	bf18      	it	ne
 8001048:	ea90 0f01 	teqne	r0, r1
 800104c:	bf58      	it	pl
 800104e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001052:	bf88      	it	hi
 8001054:	17c8      	asrhi	r0, r1, #31
 8001056:	bf38      	it	cc
 8001058:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800105c:	bf18      	it	ne
 800105e:	f040 0001 	orrne.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	d102      	bne.n	8001070 <__cmpsf2+0x4c>
 800106a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800106e:	d105      	bne.n	800107c <__cmpsf2+0x58>
 8001070:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001074:	d1e4      	bne.n	8001040 <__cmpsf2+0x1c>
 8001076:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107a:	d0e1      	beq.n	8001040 <__cmpsf2+0x1c>
 800107c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_cfrcmple>:
 8001084:	4684      	mov	ip, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4661      	mov	r1, ip
 800108a:	e7ff      	b.n	800108c <__aeabi_cfcmpeq>

0800108c <__aeabi_cfcmpeq>:
 800108c:	b50f      	push	{r0, r1, r2, r3, lr}
 800108e:	f7ff ffc9 	bl	8001024 <__cmpsf2>
 8001092:	2800      	cmp	r0, #0
 8001094:	bf48      	it	mi
 8001096:	f110 0f00 	cmnmi.w	r0, #0
 800109a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800109c <__aeabi_fcmpeq>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff fff4 	bl	800108c <__aeabi_cfcmpeq>
 80010a4:	bf0c      	ite	eq
 80010a6:	2001      	moveq	r0, #1
 80010a8:	2000      	movne	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmplt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffea 	bl	800108c <__aeabi_cfcmpeq>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmple>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffe0 	bl	800108c <__aeabi_cfcmpeq>
 80010cc:	bf94      	ite	ls
 80010ce:	2001      	movls	r0, #1
 80010d0:	2000      	movhi	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmpge>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffd2 	bl	8001084 <__aeabi_cfrcmple>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpgt>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffc8 	bl	8001084 <__aeabi_cfrcmple>
 80010f4:	bf34      	ite	cc
 80010f6:	2001      	movcc	r0, #1
 80010f8:	2000      	movcs	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_f2iz>:
 8001100:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001104:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001108:	d30f      	bcc.n	800112a <__aeabi_f2iz+0x2a>
 800110a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800110e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001112:	d90d      	bls.n	8001130 <__aeabi_f2iz+0x30>
 8001114:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001118:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800111c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001120:	fa23 f002 	lsr.w	r0, r3, r2
 8001124:	bf18      	it	ne
 8001126:	4240      	negne	r0, r0
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr
 8001130:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001134:	d101      	bne.n	800113a <__aeabi_f2iz+0x3a>
 8001136:	0242      	lsls	r2, r0, #9
 8001138:	d105      	bne.n	8001146 <__aeabi_f2iz+0x46>
 800113a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800113e:	bf08      	it	eq
 8001140:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001144:	4770      	bx	lr
 8001146:	f04f 0000 	mov.w	r0, #0
 800114a:	4770      	bx	lr

0800114c <__aeabi_uldivmod>:
 800114c:	b953      	cbnz	r3, 8001164 <__aeabi_uldivmod+0x18>
 800114e:	b94a      	cbnz	r2, 8001164 <__aeabi_uldivmod+0x18>
 8001150:	2900      	cmp	r1, #0
 8001152:	bf08      	it	eq
 8001154:	2800      	cmpeq	r0, #0
 8001156:	bf1c      	itt	ne
 8001158:	f04f 31ff 	movne.w	r1, #4294967295
 800115c:	f04f 30ff 	movne.w	r0, #4294967295
 8001160:	f000 b968 	b.w	8001434 <__aeabi_idiv0>
 8001164:	f1ad 0c08 	sub.w	ip, sp, #8
 8001168:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800116c:	f000 f806 	bl	800117c <__udivmoddi4>
 8001170:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001174:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001178:	b004      	add	sp, #16
 800117a:	4770      	bx	lr

0800117c <__udivmoddi4>:
 800117c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001180:	9d08      	ldr	r5, [sp, #32]
 8001182:	460c      	mov	r4, r1
 8001184:	2b00      	cmp	r3, #0
 8001186:	d14e      	bne.n	8001226 <__udivmoddi4+0xaa>
 8001188:	4694      	mov	ip, r2
 800118a:	458c      	cmp	ip, r1
 800118c:	4686      	mov	lr, r0
 800118e:	fab2 f282 	clz	r2, r2
 8001192:	d962      	bls.n	800125a <__udivmoddi4+0xde>
 8001194:	b14a      	cbz	r2, 80011aa <__udivmoddi4+0x2e>
 8001196:	f1c2 0320 	rsb	r3, r2, #32
 800119a:	4091      	lsls	r1, r2
 800119c:	fa20 f303 	lsr.w	r3, r0, r3
 80011a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80011a4:	4319      	orrs	r1, r3
 80011a6:	fa00 fe02 	lsl.w	lr, r0, r2
 80011aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80011b2:	fb07 1114 	mls	r1, r7, r4, r1
 80011b6:	fa1f f68c 	uxth.w	r6, ip
 80011ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011c2:	fb04 f106 	mul.w	r1, r4, r6
 80011c6:	4299      	cmp	r1, r3
 80011c8:	d90a      	bls.n	80011e0 <__udivmoddi4+0x64>
 80011ca:	eb1c 0303 	adds.w	r3, ip, r3
 80011ce:	f104 30ff 	add.w	r0, r4, #4294967295
 80011d2:	f080 8110 	bcs.w	80013f6 <__udivmoddi4+0x27a>
 80011d6:	4299      	cmp	r1, r3
 80011d8:	f240 810d 	bls.w	80013f6 <__udivmoddi4+0x27a>
 80011dc:	3c02      	subs	r4, #2
 80011de:	4463      	add	r3, ip
 80011e0:	1a59      	subs	r1, r3, r1
 80011e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80011e6:	fb07 1110 	mls	r1, r7, r0, r1
 80011ea:	fb00 f606 	mul.w	r6, r0, r6
 80011ee:	fa1f f38e 	uxth.w	r3, lr
 80011f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011f6:	429e      	cmp	r6, r3
 80011f8:	d90a      	bls.n	8001210 <__udivmoddi4+0x94>
 80011fa:	eb1c 0303 	adds.w	r3, ip, r3
 80011fe:	f100 31ff 	add.w	r1, r0, #4294967295
 8001202:	f080 80fa 	bcs.w	80013fa <__udivmoddi4+0x27e>
 8001206:	429e      	cmp	r6, r3
 8001208:	f240 80f7 	bls.w	80013fa <__udivmoddi4+0x27e>
 800120c:	4463      	add	r3, ip
 800120e:	3802      	subs	r0, #2
 8001210:	2100      	movs	r1, #0
 8001212:	1b9b      	subs	r3, r3, r6
 8001214:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001218:	b11d      	cbz	r5, 8001222 <__udivmoddi4+0xa6>
 800121a:	40d3      	lsrs	r3, r2
 800121c:	2200      	movs	r2, #0
 800121e:	e9c5 3200 	strd	r3, r2, [r5]
 8001222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001226:	428b      	cmp	r3, r1
 8001228:	d905      	bls.n	8001236 <__udivmoddi4+0xba>
 800122a:	b10d      	cbz	r5, 8001230 <__udivmoddi4+0xb4>
 800122c:	e9c5 0100 	strd	r0, r1, [r5]
 8001230:	2100      	movs	r1, #0
 8001232:	4608      	mov	r0, r1
 8001234:	e7f5      	b.n	8001222 <__udivmoddi4+0xa6>
 8001236:	fab3 f183 	clz	r1, r3
 800123a:	2900      	cmp	r1, #0
 800123c:	d146      	bne.n	80012cc <__udivmoddi4+0x150>
 800123e:	42a3      	cmp	r3, r4
 8001240:	d302      	bcc.n	8001248 <__udivmoddi4+0xcc>
 8001242:	4290      	cmp	r0, r2
 8001244:	f0c0 80ee 	bcc.w	8001424 <__udivmoddi4+0x2a8>
 8001248:	1a86      	subs	r6, r0, r2
 800124a:	eb64 0303 	sbc.w	r3, r4, r3
 800124e:	2001      	movs	r0, #1
 8001250:	2d00      	cmp	r5, #0
 8001252:	d0e6      	beq.n	8001222 <__udivmoddi4+0xa6>
 8001254:	e9c5 6300 	strd	r6, r3, [r5]
 8001258:	e7e3      	b.n	8001222 <__udivmoddi4+0xa6>
 800125a:	2a00      	cmp	r2, #0
 800125c:	f040 808f 	bne.w	800137e <__udivmoddi4+0x202>
 8001260:	eba1 040c 	sub.w	r4, r1, ip
 8001264:	2101      	movs	r1, #1
 8001266:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800126a:	fa1f f78c 	uxth.w	r7, ip
 800126e:	fbb4 f6f8 	udiv	r6, r4, r8
 8001272:	fb08 4416 	mls	r4, r8, r6, r4
 8001276:	fb07 f006 	mul.w	r0, r7, r6
 800127a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800127e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001282:	4298      	cmp	r0, r3
 8001284:	d908      	bls.n	8001298 <__udivmoddi4+0x11c>
 8001286:	eb1c 0303 	adds.w	r3, ip, r3
 800128a:	f106 34ff 	add.w	r4, r6, #4294967295
 800128e:	d202      	bcs.n	8001296 <__udivmoddi4+0x11a>
 8001290:	4298      	cmp	r0, r3
 8001292:	f200 80cb 	bhi.w	800142c <__udivmoddi4+0x2b0>
 8001296:	4626      	mov	r6, r4
 8001298:	1a1c      	subs	r4, r3, r0
 800129a:	fbb4 f0f8 	udiv	r0, r4, r8
 800129e:	fb08 4410 	mls	r4, r8, r0, r4
 80012a2:	fb00 f707 	mul.w	r7, r0, r7
 80012a6:	fa1f f38e 	uxth.w	r3, lr
 80012aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012ae:	429f      	cmp	r7, r3
 80012b0:	d908      	bls.n	80012c4 <__udivmoddi4+0x148>
 80012b2:	eb1c 0303 	adds.w	r3, ip, r3
 80012b6:	f100 34ff 	add.w	r4, r0, #4294967295
 80012ba:	d202      	bcs.n	80012c2 <__udivmoddi4+0x146>
 80012bc:	429f      	cmp	r7, r3
 80012be:	f200 80ae 	bhi.w	800141e <__udivmoddi4+0x2a2>
 80012c2:	4620      	mov	r0, r4
 80012c4:	1bdb      	subs	r3, r3, r7
 80012c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80012ca:	e7a5      	b.n	8001218 <__udivmoddi4+0x9c>
 80012cc:	f1c1 0720 	rsb	r7, r1, #32
 80012d0:	408b      	lsls	r3, r1
 80012d2:	fa22 fc07 	lsr.w	ip, r2, r7
 80012d6:	ea4c 0c03 	orr.w	ip, ip, r3
 80012da:	fa24 f607 	lsr.w	r6, r4, r7
 80012de:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80012e2:	fbb6 f8f9 	udiv	r8, r6, r9
 80012e6:	fa1f fe8c 	uxth.w	lr, ip
 80012ea:	fb09 6618 	mls	r6, r9, r8, r6
 80012ee:	fa20 f307 	lsr.w	r3, r0, r7
 80012f2:	408c      	lsls	r4, r1
 80012f4:	fa00 fa01 	lsl.w	sl, r0, r1
 80012f8:	fb08 f00e 	mul.w	r0, r8, lr
 80012fc:	431c      	orrs	r4, r3
 80012fe:	0c23      	lsrs	r3, r4, #16
 8001300:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001304:	4298      	cmp	r0, r3
 8001306:	fa02 f201 	lsl.w	r2, r2, r1
 800130a:	d90a      	bls.n	8001322 <__udivmoddi4+0x1a6>
 800130c:	eb1c 0303 	adds.w	r3, ip, r3
 8001310:	f108 36ff 	add.w	r6, r8, #4294967295
 8001314:	f080 8081 	bcs.w	800141a <__udivmoddi4+0x29e>
 8001318:	4298      	cmp	r0, r3
 800131a:	d97e      	bls.n	800141a <__udivmoddi4+0x29e>
 800131c:	f1a8 0802 	sub.w	r8, r8, #2
 8001320:	4463      	add	r3, ip
 8001322:	1a1e      	subs	r6, r3, r0
 8001324:	fbb6 f3f9 	udiv	r3, r6, r9
 8001328:	fb09 6613 	mls	r6, r9, r3, r6
 800132c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001330:	b2a4      	uxth	r4, r4
 8001332:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001336:	45a6      	cmp	lr, r4
 8001338:	d908      	bls.n	800134c <__udivmoddi4+0x1d0>
 800133a:	eb1c 0404 	adds.w	r4, ip, r4
 800133e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001342:	d266      	bcs.n	8001412 <__udivmoddi4+0x296>
 8001344:	45a6      	cmp	lr, r4
 8001346:	d964      	bls.n	8001412 <__udivmoddi4+0x296>
 8001348:	3b02      	subs	r3, #2
 800134a:	4464      	add	r4, ip
 800134c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001350:	fba0 8302 	umull	r8, r3, r0, r2
 8001354:	eba4 040e 	sub.w	r4, r4, lr
 8001358:	429c      	cmp	r4, r3
 800135a:	46c6      	mov	lr, r8
 800135c:	461e      	mov	r6, r3
 800135e:	d350      	bcc.n	8001402 <__udivmoddi4+0x286>
 8001360:	d04d      	beq.n	80013fe <__udivmoddi4+0x282>
 8001362:	b155      	cbz	r5, 800137a <__udivmoddi4+0x1fe>
 8001364:	ebba 030e 	subs.w	r3, sl, lr
 8001368:	eb64 0406 	sbc.w	r4, r4, r6
 800136c:	fa04 f707 	lsl.w	r7, r4, r7
 8001370:	40cb      	lsrs	r3, r1
 8001372:	431f      	orrs	r7, r3
 8001374:	40cc      	lsrs	r4, r1
 8001376:	e9c5 7400 	strd	r7, r4, [r5]
 800137a:	2100      	movs	r1, #0
 800137c:	e751      	b.n	8001222 <__udivmoddi4+0xa6>
 800137e:	fa0c fc02 	lsl.w	ip, ip, r2
 8001382:	f1c2 0320 	rsb	r3, r2, #32
 8001386:	40d9      	lsrs	r1, r3
 8001388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800138c:	fa20 f303 	lsr.w	r3, r0, r3
 8001390:	fa00 fe02 	lsl.w	lr, r0, r2
 8001394:	fbb1 f0f8 	udiv	r0, r1, r8
 8001398:	fb08 1110 	mls	r1, r8, r0, r1
 800139c:	4094      	lsls	r4, r2
 800139e:	431c      	orrs	r4, r3
 80013a0:	fa1f f78c 	uxth.w	r7, ip
 80013a4:	0c23      	lsrs	r3, r4, #16
 80013a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013aa:	fb00 f107 	mul.w	r1, r0, r7
 80013ae:	4299      	cmp	r1, r3
 80013b0:	d908      	bls.n	80013c4 <__udivmoddi4+0x248>
 80013b2:	eb1c 0303 	adds.w	r3, ip, r3
 80013b6:	f100 36ff 	add.w	r6, r0, #4294967295
 80013ba:	d22c      	bcs.n	8001416 <__udivmoddi4+0x29a>
 80013bc:	4299      	cmp	r1, r3
 80013be:	d92a      	bls.n	8001416 <__udivmoddi4+0x29a>
 80013c0:	3802      	subs	r0, #2
 80013c2:	4463      	add	r3, ip
 80013c4:	1a5b      	subs	r3, r3, r1
 80013c6:	fbb3 f1f8 	udiv	r1, r3, r8
 80013ca:	fb08 3311 	mls	r3, r8, r1, r3
 80013ce:	b2a4      	uxth	r4, r4
 80013d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80013d4:	fb01 f307 	mul.w	r3, r1, r7
 80013d8:	42a3      	cmp	r3, r4
 80013da:	d908      	bls.n	80013ee <__udivmoddi4+0x272>
 80013dc:	eb1c 0404 	adds.w	r4, ip, r4
 80013e0:	f101 36ff 	add.w	r6, r1, #4294967295
 80013e4:	d213      	bcs.n	800140e <__udivmoddi4+0x292>
 80013e6:	42a3      	cmp	r3, r4
 80013e8:	d911      	bls.n	800140e <__udivmoddi4+0x292>
 80013ea:	3902      	subs	r1, #2
 80013ec:	4464      	add	r4, ip
 80013ee:	1ae4      	subs	r4, r4, r3
 80013f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013f4:	e73b      	b.n	800126e <__udivmoddi4+0xf2>
 80013f6:	4604      	mov	r4, r0
 80013f8:	e6f2      	b.n	80011e0 <__udivmoddi4+0x64>
 80013fa:	4608      	mov	r0, r1
 80013fc:	e708      	b.n	8001210 <__udivmoddi4+0x94>
 80013fe:	45c2      	cmp	sl, r8
 8001400:	d2af      	bcs.n	8001362 <__udivmoddi4+0x1e6>
 8001402:	ebb8 0e02 	subs.w	lr, r8, r2
 8001406:	eb63 060c 	sbc.w	r6, r3, ip
 800140a:	3801      	subs	r0, #1
 800140c:	e7a9      	b.n	8001362 <__udivmoddi4+0x1e6>
 800140e:	4631      	mov	r1, r6
 8001410:	e7ed      	b.n	80013ee <__udivmoddi4+0x272>
 8001412:	4603      	mov	r3, r0
 8001414:	e79a      	b.n	800134c <__udivmoddi4+0x1d0>
 8001416:	4630      	mov	r0, r6
 8001418:	e7d4      	b.n	80013c4 <__udivmoddi4+0x248>
 800141a:	46b0      	mov	r8, r6
 800141c:	e781      	b.n	8001322 <__udivmoddi4+0x1a6>
 800141e:	4463      	add	r3, ip
 8001420:	3802      	subs	r0, #2
 8001422:	e74f      	b.n	80012c4 <__udivmoddi4+0x148>
 8001424:	4606      	mov	r6, r0
 8001426:	4623      	mov	r3, r4
 8001428:	4608      	mov	r0, r1
 800142a:	e711      	b.n	8001250 <__udivmoddi4+0xd4>
 800142c:	3e02      	subs	r6, #2
 800142e:	4463      	add	r3, ip
 8001430:	e732      	b.n	8001298 <__udivmoddi4+0x11c>
 8001432:	bf00      	nop

08001434 <__aeabi_idiv0>:
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop

08001438 <INA3221_Init>:

extern UART_HandleTypeDef huart2;  // UART do debugowania
extern INA3221_HandleTypeDef ina3221;


void INA3221_Init(INA3221_HandleTypeDef *ina, I2C_HandleTypeDef *hi2c, uint8_t address) {
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	4613      	mov	r3, r2
 8001444:	71fb      	strb	r3, [r7, #7]
    ina->hi2c = hi2c;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	601a      	str	r2, [r3, #0]
    ina->address = address;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	79fa      	ldrb	r2, [r7, #7]
 8001450:	711a      	strb	r2, [r3, #4]
    ina->resistances[0] = 0.01f;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	4a0c      	ldr	r2, [pc, #48]	@ (8001488 <INA3221_Init+0x50>)
 8001456:	609a      	str	r2, [r3, #8]
    ina->resistances[1] = 0.01f;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4a0b      	ldr	r2, [pc, #44]	@ (8001488 <INA3221_Init+0x50>)
 800145c:	60da      	str	r2, [r3, #12]
    ina->resistances[2] = 0.01f;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	4a09      	ldr	r2, [pc, #36]	@ (8001488 <INA3221_Init+0x50>)
 8001462:	611a      	str	r2, [r3, #16]
    ina->filters[0] = 0;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	615a      	str	r2, [r3, #20]
    ina->filters[1] = 0;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
    ina->filters[2] = 0;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	61da      	str	r2, [r3, #28]
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	3c23d70a 	.word	0x3c23d70a
 800148c:	00000000 	.word	0x00000000

08001490 <INA3221_SetShuntResistor>:

void INA3221_SetShuntResistor(INA3221_HandleTypeDef *ina, uint8_t channel, float resistance) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	460b      	mov	r3, r1
 800149a:	607a      	str	r2, [r7, #4]
 800149c:	72fb      	strb	r3, [r7, #11]
    if (channel < 3 && resistance > 1e-9) {
 800149e:	7afb      	ldrb	r3, [r7, #11]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d811      	bhi.n	80014c8 <INA3221_SetShuntResistor+0x38>
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7fe ffd7 	bl	8000458 <__aeabi_f2d>
 80014aa:	a309      	add	r3, pc, #36	@ (adr r3, 80014d0 <INA3221_SetShuntResistor+0x40>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff faba 	bl	8000a28 <__aeabi_dcmpgt>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d100      	bne.n	80014bc <INA3221_SetShuntResistor+0x2c>
        ina->resistances[channel] = resistance;
    }
}
 80014ba:	e005      	b.n	80014c8 <INA3221_SetShuntResistor+0x38>
        ina->resistances[channel] = resistance;
 80014bc:	7afa      	ldrb	r2, [r7, #11]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	3202      	adds	r2, #2
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80014c8:	bf00      	nop
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	e826d695 	.word	0xe826d695
 80014d4:	3e112e0b 	.word	0x3e112e0b

080014d8 <INA3221_GetBusVoltage>:
        ina->filters[channel] = resistance;
    }
}

float INA3221_GetBusVoltage(INA3221_HandleTypeDef *ina, uint8_t channel)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	70fb      	strb	r3, [r7, #3]
    uint16_t reg;
    switch (channel)
 80014e4:	78fb      	ldrb	r3, [r7, #3]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d00c      	beq.n	8001504 <INA3221_GetBusVoltage+0x2c>
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	dc0d      	bgt.n	800150a <INA3221_GetBusVoltage+0x32>
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d002      	beq.n	80014f8 <INA3221_GetBusVoltage+0x20>
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d003      	beq.n	80014fe <INA3221_GetBusVoltage+0x26>
 80014f6:	e008      	b.n	800150a <INA3221_GetBusVoltage+0x32>
    {
        case INA3221_CHANNEL_1: reg = INA3221_REGISTER_C1_BUS_VOLTAGE; break;
 80014f8:	2302      	movs	r3, #2
 80014fa:	81fb      	strh	r3, [r7, #14]
 80014fc:	e008      	b.n	8001510 <INA3221_GetBusVoltage+0x38>
        case INA3221_CHANNEL_2: reg = INA3221_REGISTER_C2_BUS_VOLTAGE; break;
 80014fe:	2304      	movs	r3, #4
 8001500:	81fb      	strh	r3, [r7, #14]
 8001502:	e005      	b.n	8001510 <INA3221_GetBusVoltage+0x38>
        case INA3221_CHANNEL_3: reg = INA3221_REGISTER_C3_BUS_VOLTAGE; break;
 8001504:	2306      	movs	r3, #6
 8001506:	81fb      	strh	r3, [r7, #14]
 8001508:	e002      	b.n	8001510 <INA3221_GetBusVoltage+0x38>
        default: return 0;
 800150a:	f04f 0300 	mov.w	r3, #0
 800150e:	e00e      	b.n	800152e <INA3221_GetBusVoltage+0x56>
    }
    return INA3221_ReadReg(ina, reg) * 0.001f;
 8001510:	89fb      	ldrh	r3, [r7, #14]
 8001512:	4619      	mov	r1, r3
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 f86f 	bl	80015f8 <INA3221_ReadReg>
 800151a:	4603      	mov	r3, r0
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fbd5 	bl	8000ccc <__aeabi_i2f>
 8001522:	4603      	mov	r3, r0
 8001524:	4904      	ldr	r1, [pc, #16]	@ (8001538 <INA3221_GetBusVoltage+0x60>)
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fc24 	bl	8000d74 <__aeabi_fmul>
 800152c:	4603      	mov	r3, r0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	3a83126f 	.word	0x3a83126f

0800153c <INA3221_GetShuntVoltageRaw>:

float INA3221_GetShuntVoltageRaw(INA3221_HandleTypeDef *ina, uint8_t channel)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	70fb      	strb	r3, [r7, #3]
    uint16_t reg;
    switch (channel)
 8001548:	78fb      	ldrb	r3, [r7, #3]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d00c      	beq.n	8001568 <INA3221_GetShuntVoltageRaw+0x2c>
 800154e:	2b02      	cmp	r3, #2
 8001550:	dc0d      	bgt.n	800156e <INA3221_GetShuntVoltageRaw+0x32>
 8001552:	2b00      	cmp	r3, #0
 8001554:	d002      	beq.n	800155c <INA3221_GetShuntVoltageRaw+0x20>
 8001556:	2b01      	cmp	r3, #1
 8001558:	d003      	beq.n	8001562 <INA3221_GetShuntVoltageRaw+0x26>
 800155a:	e008      	b.n	800156e <INA3221_GetShuntVoltageRaw+0x32>
    {
        case INA3221_CHANNEL_1: reg = INA3221_REGISTER_C1_SHUNT_VOLTAGE; break;
 800155c:	2301      	movs	r3, #1
 800155e:	81fb      	strh	r3, [r7, #14]
 8001560:	e008      	b.n	8001574 <INA3221_GetShuntVoltageRaw+0x38>
        case INA3221_CHANNEL_2: reg = INA3221_REGISTER_C2_SHUNT_VOLTAGE; break;
 8001562:	2303      	movs	r3, #3
 8001564:	81fb      	strh	r3, [r7, #14]
 8001566:	e005      	b.n	8001574 <INA3221_GetShuntVoltageRaw+0x38>
        case INA3221_CHANNEL_3: reg = INA3221_REGISTER_C3_SHUNT_VOLTAGE; break;
 8001568:	2305      	movs	r3, #5
 800156a:	81fb      	strh	r3, [r7, #14]
 800156c:	e002      	b.n	8001574 <INA3221_GetShuntVoltageRaw+0x38>
        default: return 0;
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	e022      	b.n	80015ba <INA3221_GetShuntVoltageRaw+0x7e>
    }
    uint16_t raw = INA3221_ReadReg(ina, reg);
 8001574:	89fb      	ldrh	r3, [r7, #14]
 8001576:	4619      	mov	r1, r3
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f000 f83d 	bl	80015f8 <INA3221_ReadReg>
 800157e:	4603      	mov	r3, r0
 8001580:	81bb      	strh	r3, [r7, #12]
    return (raw & 0x8000) ? -((~raw + 1) * 5e-6f) : (raw * 5e-6f);
 8001582:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	da0d      	bge.n	80015a6 <INA3221_GetShuntVoltageRaw+0x6a>
 800158a:	89bb      	ldrh	r3, [r7, #12]
 800158c:	425b      	negs	r3, r3
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fb9c 	bl	8000ccc <__aeabi_i2f>
 8001594:	4603      	mov	r3, r0
 8001596:	490b      	ldr	r1, [pc, #44]	@ (80015c4 <INA3221_GetShuntVoltageRaw+0x88>)
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fbeb 	bl	8000d74 <__aeabi_fmul>
 800159e:	4603      	mov	r3, r0
 80015a0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80015a4:	e009      	b.n	80015ba <INA3221_GetShuntVoltageRaw+0x7e>
 80015a6:	89bb      	ldrh	r3, [r7, #12]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fb8f 	bl	8000ccc <__aeabi_i2f>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4904      	ldr	r1, [pc, #16]	@ (80015c4 <INA3221_GetShuntVoltageRaw+0x88>)
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fbde 	bl	8000d74 <__aeabi_fmul>
 80015b8:	4603      	mov	r3, r0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	36a7c5ac 	.word	0x36a7c5ac

080015c8 <INA3221_GetCurrentRaw>:

float INA3221_GetCurrentRaw(INA3221_HandleTypeDef *ina, uint8_t channel)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	70fb      	strb	r3, [r7, #3]
    return INA3221_GetShuntVoltageRaw(ina, channel) / ina->resistances[channel];
 80015d4:	78fb      	ldrb	r3, [r7, #3]
 80015d6:	4619      	mov	r1, r3
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff ffaf 	bl	800153c <INA3221_GetShuntVoltageRaw>
 80015de:	78fa      	ldrb	r2, [r7, #3]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3202      	adds	r2, #2
 80015e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e8:	4619      	mov	r1, r3
 80015ea:	f7ff fc77 	bl	8000edc <__aeabi_fdiv>
 80015ee:	4603      	mov	r3, r0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <INA3221_ReadReg>:

uint16_t INA3221_ReadReg(INA3221_HandleTypeDef *ina, uint16_t reg)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af04      	add	r7, sp, #16
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	807b      	strh	r3, [r7, #2]
    uint16_t data;
    HAL_I2C_Mem_Read(ina->hi2c, ina->address << 1, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&data, 2, HAL_MAX_DELAY);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6818      	ldr	r0, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	791b      	ldrb	r3, [r3, #4]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	b299      	uxth	r1, r3
 8001610:	887a      	ldrh	r2, [r7, #2]
 8001612:	f04f 33ff 	mov.w	r3, #4294967295
 8001616:	9302      	str	r3, [sp, #8]
 8001618:	2302      	movs	r3, #2
 800161a:	9301      	str	r3, [sp, #4]
 800161c:	f107 030e 	add.w	r3, r7, #14
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2301      	movs	r3, #1
 8001624:	f002 fa14 	bl	8003a50 <HAL_I2C_Mem_Read>
    return (data >> 8) | (data << 8);
 8001628:	89fb      	ldrh	r3, [r7, #14]
 800162a:	0a1b      	lsrs	r3, r3, #8
 800162c:	b29b      	uxth	r3, r3
 800162e:	b21a      	sxth	r2, r3
 8001630:	89fb      	ldrh	r3, [r7, #14]
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	b21b      	sxth	r3, r3
 8001636:	4313      	orrs	r3, r2
 8001638:	b21b      	sxth	r3, r3
 800163a:	b29b      	uxth	r3, r3
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	@ 0x28
 8001648:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
 8001658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800165a:	4b3b      	ldr	r3, [pc, #236]	@ (8001748 <MX_GPIO_Init+0x104>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	4a3a      	ldr	r2, [pc, #232]	@ (8001748 <MX_GPIO_Init+0x104>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	61d3      	str	r3, [r2, #28]
 8001666:	4b38      	ldr	r3, [pc, #224]	@ (8001748 <MX_GPIO_Init+0x104>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001672:	4b35      	ldr	r3, [pc, #212]	@ (8001748 <MX_GPIO_Init+0x104>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	4a34      	ldr	r2, [pc, #208]	@ (8001748 <MX_GPIO_Init+0x104>)
 8001678:	f043 0320 	orr.w	r3, r3, #32
 800167c:	61d3      	str	r3, [r2, #28]
 800167e:	4b32      	ldr	r3, [pc, #200]	@ (8001748 <MX_GPIO_Init+0x104>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	f003 0320 	and.w	r3, r3, #32
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	4b2f      	ldr	r3, [pc, #188]	@ (8001748 <MX_GPIO_Init+0x104>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	4a2e      	ldr	r2, [pc, #184]	@ (8001748 <MX_GPIO_Init+0x104>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	61d3      	str	r3, [r2, #28]
 8001696:	4b2c      	ldr	r3, [pc, #176]	@ (8001748 <MX_GPIO_Init+0x104>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	4b29      	ldr	r3, [pc, #164]	@ (8001748 <MX_GPIO_Init+0x104>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4a28      	ldr	r2, [pc, #160]	@ (8001748 <MX_GPIO_Init+0x104>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	61d3      	str	r3, [r2, #28]
 80016ae:	4b26      	ldr	r3, [pc, #152]	@ (8001748 <MX_GPIO_Init+0x104>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2120      	movs	r1, #32
 80016be:	4823      	ldr	r0, [pc, #140]	@ (800174c <MX_GPIO_Init+0x108>)
 80016c0:	f002 f852 	bl	8003768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, KIER_1_Pin|KIER_2_Pin|KIER_3_Pin|KIER_4_Pin, GPIO_PIN_RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	f44f 7158 	mov.w	r1, #864	@ 0x360
 80016ca:	4821      	ldr	r0, [pc, #132]	@ (8001750 <MX_GPIO_Init+0x10c>)
 80016cc:	f002 f84c 	bl	8003768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016d6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	481a      	ldr	r0, [pc, #104]	@ (8001750 <MX_GPIO_Init+0x10c>)
 80016e8:	f001 feae 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = EN_1_Pin|EN_2_Pin|EN_3_Pin|EN_4_Pin;
 80016ec:	230f      	movs	r3, #15
 80016ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016f0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016f6:	2302      	movs	r3, #2
 80016f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	4619      	mov	r1, r3
 8001700:	4813      	ldr	r0, [pc, #76]	@ (8001750 <MX_GPIO_Init+0x10c>)
 8001702:	f001 fea1 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001706:	2320      	movs	r3, #32
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170a:	2301      	movs	r3, #1
 800170c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800170e:	2302      	movs	r3, #2
 8001710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	480b      	ldr	r0, [pc, #44]	@ (800174c <MX_GPIO_Init+0x108>)
 800171e:	f001 fe93 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = KIER_1_Pin|KIER_2_Pin|KIER_3_Pin|KIER_4_Pin;
 8001722:	f44f 7358 	mov.w	r3, #864	@ 0x360
 8001726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001728:	2311      	movs	r3, #17
 800172a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800172c:	2301      	movs	r3, #1
 800172e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	2300      	movs	r3, #0
 8001732:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	4619      	mov	r1, r3
 800173a:	4805      	ldr	r0, [pc, #20]	@ (8001750 <MX_GPIO_Init+0x10c>)
 800173c:	f001 fe84 	bl	8003448 <HAL_GPIO_Init>

}
 8001740:	bf00      	nop
 8001742:	3728      	adds	r7, #40	@ 0x28
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40023800 	.word	0x40023800
 800174c:	40020000 	.word	0x40020000
 8001750:	40020800 	.word	0x40020800

08001754 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001758:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <MX_I2C1_Init+0x50>)
 800175a:	4a13      	ldr	r2, [pc, #76]	@ (80017a8 <MX_I2C1_Init+0x54>)
 800175c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800175e:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <MX_I2C1_Init+0x50>)
 8001760:	4a12      	ldr	r2, [pc, #72]	@ (80017ac <MX_I2C1_Init+0x58>)
 8001762:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001764:	4b0f      	ldr	r3, [pc, #60]	@ (80017a4 <MX_I2C1_Init+0x50>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800176a:	4b0e      	ldr	r3, [pc, #56]	@ (80017a4 <MX_I2C1_Init+0x50>)
 800176c:	2200      	movs	r2, #0
 800176e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001770:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <MX_I2C1_Init+0x50>)
 8001772:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001776:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001778:	4b0a      	ldr	r3, [pc, #40]	@ (80017a4 <MX_I2C1_Init+0x50>)
 800177a:	2200      	movs	r2, #0
 800177c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800177e:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <MX_I2C1_Init+0x50>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001784:	4b07      	ldr	r3, [pc, #28]	@ (80017a4 <MX_I2C1_Init+0x50>)
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800178a:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <MX_I2C1_Init+0x50>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001790:	4804      	ldr	r0, [pc, #16]	@ (80017a4 <MX_I2C1_Init+0x50>)
 8001792:	f002 f819 	bl	80037c8 <HAL_I2C_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800179c:	f001 f8b6 	bl	800290c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	200001f4 	.word	0x200001f4
 80017a8:	40005400 	.word	0x40005400
 80017ac:	000186a0 	.word	0x000186a0

080017b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	@ 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a17      	ldr	r2, [pc, #92]	@ (800182c <HAL_I2C_MspInit+0x7c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d128      	bne.n	8001824 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	4b17      	ldr	r3, [pc, #92]	@ (8001830 <HAL_I2C_MspInit+0x80>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	4a16      	ldr	r2, [pc, #88]	@ (8001830 <HAL_I2C_MspInit+0x80>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	61d3      	str	r3, [r2, #28]
 80017de:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <HAL_I2C_MspInit+0x80>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f0:	2312      	movs	r3, #18
 80017f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f8:	2303      	movs	r3, #3
 80017fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017fc:	2304      	movs	r3, #4
 80017fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	480b      	ldr	r0, [pc, #44]	@ (8001834 <HAL_I2C_MspInit+0x84>)
 8001808:	f001 fe1e 	bl	8003448 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800180c:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <HAL_I2C_MspInit+0x80>)
 800180e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001810:	4a07      	ldr	r2, [pc, #28]	@ (8001830 <HAL_I2C_MspInit+0x80>)
 8001812:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001816:	6253      	str	r3, [r2, #36]	@ 0x24
 8001818:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <HAL_I2C_MspInit+0x80>)
 800181a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001824:	bf00      	nop
 8001826:	3728      	adds	r7, #40	@ 0x28
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40005400 	.word	0x40005400
 8001830:	40023800 	.word	0x40023800
 8001834:	40020400 	.word	0x40020400

08001838 <InitFunction>:
	float           Power;     //to moc jaką pobieramy z baterii - jednostki to WATY
	float 			TotalEnergy; //to całkowita zużyta energia - jednostki to Wh
}INA3221_Type;

void InitFunction(WHEEL_Type* FL,WHEEL_Type* FR,WHEEL_Type* BL,WHEEL_Type* BR)//funkcja incalizujaca 4 obiekty
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	603b      	str	r3, [r7, #0]
	FL->timer_data._htim_PWM=&htim3;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4a4a      	ldr	r2, [pc, #296]	@ (8001974 <InitFunction+0x13c>)
 800184a:	615a      	str	r2, [r3, #20]
	FL->timer_data._channel_PWM=TIM_CHANNEL_2;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2204      	movs	r2, #4
 8001850:	619a      	str	r2, [r3, #24]

	FR->timer_data._htim_PWM=&htim3;
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	4a47      	ldr	r2, [pc, #284]	@ (8001974 <InitFunction+0x13c>)
 8001856:	615a      	str	r2, [r3, #20]
	FR->timer_data._channel_PWM=TIM_CHANNEL_1;
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	2200      	movs	r2, #0
 800185c:	619a      	str	r2, [r3, #24]

	BL->timer_data._htim_PWM=&htim3;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a44      	ldr	r2, [pc, #272]	@ (8001974 <InitFunction+0x13c>)
 8001862:	615a      	str	r2, [r3, #20]
	BL->timer_data._channel_PWM=TIM_CHANNEL_3;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2208      	movs	r2, #8
 8001868:	619a      	str	r2, [r3, #24]

	BR->timer_data._htim_PWM=&htim3;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	4a41      	ldr	r2, [pc, #260]	@ (8001974 <InitFunction+0x13c>)
 800186e:	615a      	str	r2, [r3, #20]
	BR->timer_data._channel_PWM=TIM_CHANNEL_4;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	220c      	movs	r2, #12
 8001874:	619a      	str	r2, [r3, #24]

	//to piny od enkdera
	FL->pinout_data.EncoderPin=EN_1_Pin;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2201      	movs	r2, #1
 800187a:	851a      	strh	r2, [r3, #40]	@ 0x28
	FL->pinout_data.EncoderPort=EN_1_GPIO_Port;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4a3e      	ldr	r2, [pc, #248]	@ (8001978 <InitFunction+0x140>)
 8001880:	625a      	str	r2, [r3, #36]	@ 0x24

	FR->pinout_data.EncoderPin=EN_2_Pin;
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	2202      	movs	r2, #2
 8001886:	851a      	strh	r2, [r3, #40]	@ 0x28
	FR->pinout_data.EncoderPort=EN_2_GPIO_Port;
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	4a3b      	ldr	r2, [pc, #236]	@ (8001978 <InitFunction+0x140>)
 800188c:	625a      	str	r2, [r3, #36]	@ 0x24

	BL->pinout_data.EncoderPin=EN_3_Pin;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2204      	movs	r2, #4
 8001892:	851a      	strh	r2, [r3, #40]	@ 0x28
	BL->pinout_data.EncoderPort=EN_3_GPIO_Port;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a38      	ldr	r2, [pc, #224]	@ (8001978 <InitFunction+0x140>)
 8001898:	625a      	str	r2, [r3, #36]	@ 0x24

	BR->pinout_data.EncoderPin=EN_4_Pin;
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	2208      	movs	r2, #8
 800189e:	851a      	strh	r2, [r3, #40]	@ 0x28
	BR->pinout_data.EncoderPort=EN_4_GPIO_Port;
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	4a35      	ldr	r2, [pc, #212]	@ (8001978 <InitFunction+0x140>)
 80018a4:	625a      	str	r2, [r3, #36]	@ 0x24

	//to piny i porty od kierunku
	FL->pinout_data.DirectionPin=KIER_1_Pin;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2220      	movs	r2, #32
 80018aa:	841a      	strh	r2, [r3, #32]
	FL->pinout_data.DirectionPort=KIER_1_GPIO_Port;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4a32      	ldr	r2, [pc, #200]	@ (8001978 <InitFunction+0x140>)
 80018b0:	61da      	str	r2, [r3, #28]

	FR->pinout_data.DirectionPin=KIER_2_Pin;
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	2240      	movs	r2, #64	@ 0x40
 80018b6:	841a      	strh	r2, [r3, #32]
	FR->pinout_data.DirectionPort=KIER_2_GPIO_Port;
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	4a2f      	ldr	r2, [pc, #188]	@ (8001978 <InitFunction+0x140>)
 80018bc:	61da      	str	r2, [r3, #28]

	BL->pinout_data.DirectionPin=KIER_3_Pin;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018c4:	841a      	strh	r2, [r3, #32]
	BL->pinout_data.DirectionPort=KIER_3_GPIO_Port;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a2b      	ldr	r2, [pc, #172]	@ (8001978 <InitFunction+0x140>)
 80018ca:	61da      	str	r2, [r3, #28]

	BR->pinout_data.DirectionPin=KIER_4_Pin;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018d2:	841a      	strh	r2, [r3, #32]
	BR->pinout_data.DirectionPort=KIER_4_GPIO_Port;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	4a28      	ldr	r2, [pc, #160]	@ (8001978 <InitFunction+0x140>)
 80018d8:	61da      	str	r2, [r3, #28]

	//teraz ustawiam domyślne tryby silnika i sposoby poruszania
	FL->MOTOR_STATE=DRIVE;                             //domyślny tryb silnika to jazda-->raczej tutaj nic nie zmienimy
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2201      	movs	r2, #1
 80018de:	701a      	strb	r2, [r3, #0]
	FL->MOVE_STATE=FORWARD;                            //domyślny tryb to jazda do przodu
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2201      	movs	r2, #1
 80018e4:	705a      	strb	r2, [r3, #1]

	FR->MOTOR_STATE=DRIVE;
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2201      	movs	r2, #1
 80018ea:	701a      	strb	r2, [r3, #0]
	FR->MOVE_STATE=FORWARD;
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	2201      	movs	r2, #1
 80018f0:	705a      	strb	r2, [r3, #1]

	BL->MOTOR_STATE=DRIVE;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2201      	movs	r2, #1
 80018f6:	701a      	strb	r2, [r3, #0]
	BL->MOVE_STATE=FORWARD;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	705a      	strb	r2, [r3, #1]

	BR->MOTOR_STATE=DRIVE;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	2201      	movs	r2, #1
 8001902:	701a      	strb	r2, [r3, #0]
	BR->MOVE_STATE=FORWARD;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	2201      	movs	r2, #1
 8001908:	705a      	strb	r2, [r3, #1]

	FL->ramp_data.RisingTime=0.0;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	64da      	str	r2, [r3, #76]	@ 0x4c
	FR->ramp_data.RisingTime=0.0;
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	64da      	str	r2, [r3, #76]	@ 0x4c
	BL->ramp_data.RisingTime=0.0;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	64da      	str	r2, [r3, #76]	@ 0x4c
	BR->ramp_data.RisingTime=0.0;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	64da      	str	r2, [r3, #76]	@ 0x4c

	//teraz startuje timery
	HAL_TIM_PWM_Start(FL->timer_data._htim_PWM, FL->timer_data._channel_PWM);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	695a      	ldr	r2, [r3, #20]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	4619      	mov	r1, r3
 8001934:	4610      	mov	r0, r2
 8001936:	f003 fc57 	bl	80051e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(FR->timer_data._htim_PWM, FR->timer_data._channel_PWM);
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	695a      	ldr	r2, [r3, #20]
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	4619      	mov	r1, r3
 8001944:	4610      	mov	r0, r2
 8001946:	f003 fc4f 	bl	80051e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(BL->timer_data._htim_PWM, BL->timer_data._channel_PWM);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695a      	ldr	r2, [r3, #20]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	4619      	mov	r1, r3
 8001954:	4610      	mov	r0, r2
 8001956:	f003 fc47 	bl	80051e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(BR->timer_data._htim_PWM, BR->timer_data._channel_PWM);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	695a      	ldr	r2, [r3, #20]
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	4619      	mov	r1, r3
 8001964:	4610      	mov	r0, r2
 8001966:	f003 fc3f 	bl	80051e8 <HAL_TIM_PWM_Start>
}
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000410 	.word	0x20000410
 8001978:	40020800 	.word	0x40020800

0800197c <PositionIncrement>:


void PositionIncrement(WHEEL_Type* key)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	key->encoder_data.Value++; //inkrementuję wartość impulsów
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	605a      	str	r2, [r3, #4]
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <VelocityCalculation>:
void VelocityCalculation(WHEEL_Type* FL,WHEEL_Type* FR,WHEEL_Type* BL,WHEEL_Type* BR,int speed)
{                                          //ta funkcja oblicza jaką predkosc ma mieć kazde kolo
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
 80019a4:	603b      	str	r3, [r7, #0]
	if((FR->MOTOR_STATE==DRIVE)&&(FL->MOTOR_STATE==DRIVE)&&(BR->MOTOR_STATE==DRIVE)&&(BL->MOTOR_STATE==DRIVE))
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	f040 809a 	bne.w	8001ae4 <VelocityCalculation+0x14c>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	f040 8095 	bne.w	8001ae4 <VelocityCalculation+0x14c>
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	f040 8090 	bne.w	8001ae4 <VelocityCalculation+0x14c>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	f040 808b 	bne.w	8001ae4 <VelocityCalculation+0x14c>
	{                                                           //sprawdzam czy kazde kolo jest w stanie drive
		if((FR->MOVE_STATE==FL->MOVE_STATE)&&(BR->MOVE_STATE==BL->MOVE_STATE)&&(FL->MOVE_STATE==BR->MOVE_STATE))
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	785a      	ldrb	r2, [r3, #1]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	785b      	ldrb	r3, [r3, #1]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	f040 8084 	bne.w	8001ae4 <VelocityCalculation+0x14c>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	785a      	ldrb	r2, [r3, #1]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	785b      	ldrb	r3, [r3, #1]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d17d      	bne.n	8001ae4 <VelocityCalculation+0x14c>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	785a      	ldrb	r2, [r3, #1]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	785b      	ldrb	r3, [r3, #1]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d177      	bne.n	8001ae4 <VelocityCalculation+0x14c>
		{                                               //sprawdzam czy kazde kolo jest w tym samym trybie ruchu
			switch(FR->MOVE_STATE)                    //a teraz sprawdzam w którym dokładnie trybie ruchu jestem
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	785b      	ldrb	r3, [r3, #1]
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d873      	bhi.n	8001ae4 <VelocityCalculation+0x14c>
 80019fc:	a201      	add	r2, pc, #4	@ (adr r2, 8001a04 <VelocityCalculation+0x6c>)
 80019fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a02:	bf00      	nop
 8001a04:	08001a15 	.word	0x08001a15
 8001a08:	08001a87 	.word	0x08001a87
 8001a0c:	08001aa5 	.word	0x08001aa5
 8001a10:	08001ac3 	.word	0x08001ac3
			{
			case IDLE_2:
				FL->ramp_data.FinalSpeed=0;      //w trybie nieustalonym predkosc wynosi 0
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	641a      	str	r2, [r3, #64]	@ 0x40
				FR->ramp_data.FinalSpeed=0;
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	641a      	str	r2, [r3, #64]	@ 0x40
				BL->ramp_data.FinalSpeed=0;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	641a      	str	r2, [r3, #64]	@ 0x40
				BR->ramp_data.FinalSpeed=0;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	641a      	str	r2, [r3, #64]	@ 0x40

				FL->pid_data.Integral=0;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	635a      	str	r2, [r3, #52]	@ 0x34
				FR->pid_data.Integral=0;
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	635a      	str	r2, [r3, #52]	@ 0x34
				BL->pid_data.Integral=0;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	635a      	str	r2, [r3, #52]	@ 0x34
				BR->pid_data.Integral=0;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	635a      	str	r2, [r3, #52]	@ 0x34

				FL->pid_data.PidSignal=0;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	62da      	str	r2, [r3, #44]	@ 0x2c
				FR->pid_data.PidSignal=0;
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	62da      	str	r2, [r3, #44]	@ 0x2c
				BL->pid_data.PidSignal=0;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	62da      	str	r2, [r3, #44]	@ 0x2c
				BR->pid_data.PidSignal=0;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	62da      	str	r2, [r3, #44]	@ 0x2c

				FL->motor_siganl=0;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	655a      	str	r2, [r3, #84]	@ 0x54
				FR->motor_siganl=0;
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	2200      	movs	r2, #0
 8001a76:	655a      	str	r2, [r3, #84]	@ 0x54
				BL->motor_siganl=0;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	655a      	str	r2, [r3, #84]	@ 0x54
				BR->motor_siganl=0;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	2200      	movs	r2, #0
 8001a82:	655a      	str	r2, [r3, #84]	@ 0x54
				break;
 8001a84:	e02e      	b.n	8001ae4 <VelocityCalculation+0x14c>
			case FORWARD:
				FL->ramp_data.FinalSpeed=-speed;//w trybie do przodu - wszystkie koła krecą się w tą samą stronę
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	425a      	negs	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	641a      	str	r2, [r3, #64]	@ 0x40
				FR->ramp_data.FinalSpeed=speed;
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	641a      	str	r2, [r3, #64]	@ 0x40
				BL->ramp_data.FinalSpeed=-speed;
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	425a      	negs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	641a      	str	r2, [r3, #64]	@ 0x40
				BR->ramp_data.FinalSpeed=speed;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	641a      	str	r2, [r3, #64]	@ 0x40
				break;
 8001aa2:	e01f      	b.n	8001ae4 <VelocityCalculation+0x14c>
			case RIGHT_SIDE:
				FL->ramp_data.FinalSpeed=-speed;
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	425a      	negs	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	641a      	str	r2, [r3, #64]	@ 0x40
				FR->ramp_data.FinalSpeed=-speed;
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	425a      	negs	r2, r3
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	641a      	str	r2, [r3, #64]	@ 0x40
				BL->ramp_data.FinalSpeed=speed;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	641a      	str	r2, [r3, #64]	@ 0x40
				BR->ramp_data.FinalSpeed=speed;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	641a      	str	r2, [r3, #64]	@ 0x40
				break;
 8001ac0:	e010      	b.n	8001ae4 <VelocityCalculation+0x14c>
			case AROUND:
				FL->ramp_data.FinalSpeed=-speed;
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	425a      	negs	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	641a      	str	r2, [r3, #64]	@ 0x40
				FR->ramp_data.FinalSpeed=-speed;
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	425a      	negs	r2, r3
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	641a      	str	r2, [r3, #64]	@ 0x40
				BL->ramp_data.FinalSpeed=-speed;
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	425a      	negs	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	641a      	str	r2, [r3, #64]	@ 0x40
				BR->ramp_data.FinalSpeed=-speed;
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	425a      	negs	r2, r3
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	641a      	str	r2, [r3, #64]	@ 0x40
				break;
 8001ae2:	bf00      	nop
			}

		}
	}
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop

08001af0 <EncoderVelocity>:

void EncoderVelocity(WHEEL_Type* key)               //tworzę funkcje która oblicza aktualną prędkość
{
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	if(key->motor_siganl<0)    //sprawdzam czy silnik obraca się w lewą stronę czy prawą, od tego zależy znak predkosci
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	da04      	bge.n	8001b0a <EncoderVelocity+0x1a>
	{
		key->encoder_data.Value=key->encoder_data.Value*-1;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	425a      	negs	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	605a      	str	r2, [r3, #4]
	}
	key->encoder_data.TotalTurns+=key->encoder_data.Value;        //uaktualniam liczbę wszytkich obrotów które zrobił silnik
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6852      	ldr	r2, [r2, #4]
 8001b12:	441a      	add	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	609a      	str	r2, [r3, #8]
	float alpha;
	if(key->encoder_data.Value!=0)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d03b      	beq.n	8001b98 <EncoderVelocity+0xa8>
	{
		alpha = 0.01*(abs(key->encoder_data.Value));      //to zrobienie dynamicznego filtra - poprzez dynamiczną zmianę współczynnika wygładzającego
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	bfb8      	it	lt
 8001b28:	425b      	neglt	r3, r3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fc82 	bl	8000434 <__aeabi_i2d>
 8001b30:	a321      	add	r3, pc, #132	@ (adr r3, 8001bb8 <EncoderVelocity+0xc8>)
 8001b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b36:	f7fe fce7 	bl	8000508 <__aeabi_dmul>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	f7fe ffb9 	bl	8000ab8 <__aeabi_d2f>
 8001b46:	4603      	mov	r3, r0
 8001b48:	60fb      	str	r3, [r7, #12]
		key->encoder_data.CurrentVelocity=key->encoder_data.Value*alpha+(1-alpha)*key->encoder_data.V1;//Obliczam prędkosć z filtra ekspotencjalnego
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff f8bc 	bl	8000ccc <__aeabi_i2f>
 8001b54:	4603      	mov	r3, r0
 8001b56:	68f9      	ldr	r1, [r7, #12]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff f90b 	bl	8000d74 <__aeabi_fmul>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	461c      	mov	r4, r3
 8001b62:	68f9      	ldr	r1, [r7, #12]
 8001b64:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001b68:	f7fe fffa 	bl	8000b60 <__aeabi_fsub>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	461a      	mov	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	4619      	mov	r1, r3
 8001b76:	4610      	mov	r0, r2
 8001b78:	f7ff f8fc 	bl	8000d74 <__aeabi_fmul>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4620      	mov	r0, r4
 8001b82:	f7fe ffef 	bl	8000b64 <__addsf3>
 8001b86:	4603      	mov	r3, r0
 8001b88:	461a      	mov	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	60da      	str	r2, [r3, #12]
		key->encoder_data.V1=key->encoder_data.CurrentVelocity;                    //cofam próbki o jeden
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	611a      	str	r2, [r3, #16]
 8001b96:	e007      	b.n	8001ba8 <EncoderVelocity+0xb8>
	}
	else
	{
		key->encoder_data.V1=0;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	611a      	str	r2, [r3, #16]
		key->encoder_data.CurrentVelocity=0;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	60da      	str	r2, [r3, #12]
	}
	key->encoder_data.Value=0;                                    //zeruję wartość imulsów
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	605a      	str	r2, [r3, #4]
}
 8001bae:	bf00      	nop
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd90      	pop	{r4, r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	47ae147b 	.word	0x47ae147b
 8001bbc:	3f847ae1 	.word	0x3f847ae1

08001bc0 <MotorState>:

void MotorState(WHEEL_Type *key)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	switch(key->MOTOR_STATE)                    //a teraz sprawdzam w którym dokładnie trybie ruchu jestem
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	f000 80ab 	beq.w	8001d28 <MotorState+0x168>
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	f300 80cd 	bgt.w	8001d72 <MotorState+0x1b2>
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <MotorState+0x22>
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d024      	beq.n	8001c2a <MotorState+0x6a>
		 	break;
		 case BRAKE: //w tym stanie predkosc wynosi 0
			__HAL_TIM_SET_COMPARE(key->timer_data._htim_PWM,key->timer_data._channel_PWM,0);        //ustawiam sygnał PWM 0%
		 	break;
	}
}
 8001be0:	e0c7      	b.n	8001d72 <MotorState+0x1b2>
		 	__HAL_TIM_SET_COMPARE(key->timer_data._htim_PWM,key->timer_data._channel_PWM,0);    //ustawiam sygnał PWM 0%
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d105      	bne.n	8001bf6 <MotorState+0x36>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	635a      	str	r2, [r3, #52]	@ 0x34
		 	break; //zapobiega wykonywaniu kolejnych przypadków.
 8001bf4:	e0bd      	b.n	8001d72 <MotorState+0x1b2>
		 	__HAL_TIM_SET_COMPARE(key->timer_data._htim_PWM,key->timer_data._channel_PWM,0);    //ustawiam sygnał PWM 0%
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d105      	bne.n	8001c0a <MotorState+0x4a>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	2300      	movs	r3, #0
 8001c06:	6393      	str	r3, [r2, #56]	@ 0x38
		 	break; //zapobiega wykonywaniu kolejnych przypadków.
 8001c08:	e0b3      	b.n	8001d72 <MotorState+0x1b2>
		 	__HAL_TIM_SET_COMPARE(key->timer_data._htim_PWM,key->timer_data._channel_PWM,0);    //ustawiam sygnał PWM 0%
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d105      	bne.n	8001c1e <MotorState+0x5e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	2300      	movs	r3, #0
 8001c1a:	63d3      	str	r3, [r2, #60]	@ 0x3c
		 	break; //zapobiega wykonywaniu kolejnych przypadków.
 8001c1c:	e0a9      	b.n	8001d72 <MotorState+0x1b2>
		 	__HAL_TIM_SET_COMPARE(key->timer_data._htim_PWM,key->timer_data._channel_PWM,0);    //ustawiam sygnał PWM 0%
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	2300      	movs	r3, #0
 8001c26:	6413      	str	r3, [r2, #64]	@ 0x40
		 	break; //zapobiega wykonywaniu kolejnych przypadków.
 8001c28:	e0a3      	b.n	8001d72 <MotorState+0x1b2>
		 	if(key->motor_siganl<0)              //gdy predkosc jest mniejsza od zera to obracam silnk w lewo a gdy wieksza to w prawo
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	da42      	bge.n	8001cb8 <MotorState+0xf8>
			  	HAL_GPIO_WritePin(key->pinout_data.DirectionPort,key->pinout_data.DirectionPin, RESET);      //gdy set to obroty w lewo
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69d8      	ldr	r0, [r3, #28]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	8c1b      	ldrh	r3, [r3, #32]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f001 fd93 	bl	8003768 <HAL_GPIO_WritePin>
		 		__HAL_TIM_SET_COMPARE(key->timer_data._htim_PWM,key->timer_data._channel_PWM,abs(key->motor_siganl));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10a      	bne.n	8001c60 <MotorState+0xa0>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c4e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001c52:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	635a      	str	r2, [r3, #52]	@ 0x34
		 	break;
 8001c5e:	e087      	b.n	8001d70 <MotorState+0x1b0>
		 		__HAL_TIM_SET_COMPARE(key->timer_data._htim_PWM,key->timer_data._channel_PWM,abs(key->motor_siganl));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d10b      	bne.n	8001c80 <MotorState+0xc0>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c6c:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001c70:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	6393      	str	r3, [r2, #56]	@ 0x38
 8001c7e:	e052      	b.n	8001d26 <MotorState+0x166>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d10b      	bne.n	8001ca0 <MotorState+0xe0>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c8c:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001c90:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001c9e:	e042      	b.n	8001d26 <MotorState+0x166>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca4:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001ca8:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	6413      	str	r3, [r2, #64]	@ 0x40
		 	break;
 8001cb6:	e05b      	b.n	8001d70 <MotorState+0x1b0>
		 	else if(key->motor_siganl>=0)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	db57      	blt.n	8001d70 <MotorState+0x1b0>
		 		HAL_GPIO_WritePin(key->pinout_data.DirectionPort,key->pinout_data.DirectionPin, SET);      //gdy reset to obroty w prawo
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69d8      	ldr	r0, [r3, #28]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	8c1b      	ldrh	r3, [r3, #32]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f001 fd4c 	bl	8003768 <HAL_GPIO_WritePin>
		 		__HAL_TIM_SET_COMPARE(key->timer_data._htim_PWM,key->timer_data._channel_PWM,key->motor_siganl);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d106      	bne.n	8001ce6 <MotorState+0x126>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	635a      	str	r2, [r3, #52]	@ 0x34
		 	break;
 8001ce4:	e044      	b.n	8001d70 <MotorState+0x1b0>
		 		__HAL_TIM_SET_COMPARE(key->timer_data._htim_PWM,key->timer_data._channel_PWM,key->motor_siganl);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d107      	bne.n	8001cfe <MotorState+0x13e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	6393      	str	r3, [r2, #56]	@ 0x38
		 	break;
 8001cfc:	e038      	b.n	8001d70 <MotorState+0x1b0>
		 		__HAL_TIM_SET_COMPARE(key->timer_data._htim_PWM,key->timer_data._channel_PWM,key->motor_siganl);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d107      	bne.n	8001d16 <MotorState+0x156>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	460b      	mov	r3, r1
 8001d12:	63d3      	str	r3, [r2, #60]	@ 0x3c
		 	break;
 8001d14:	e02c      	b.n	8001d70 <MotorState+0x1b0>
		 		__HAL_TIM_SET_COMPARE(key->timer_data._htim_PWM,key->timer_data._channel_PWM,key->motor_siganl);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	460b      	mov	r3, r1
 8001d22:	6413      	str	r3, [r2, #64]	@ 0x40
		 	break;
 8001d24:	e024      	b.n	8001d70 <MotorState+0x1b0>
 8001d26:	e023      	b.n	8001d70 <MotorState+0x1b0>
			__HAL_TIM_SET_COMPARE(key->timer_data._htim_PWM,key->timer_data._channel_PWM,0);        //ustawiam sygnał PWM 0%
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d105      	bne.n	8001d3c <MotorState+0x17c>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2200      	movs	r2, #0
 8001d38:	635a      	str	r2, [r3, #52]	@ 0x34
		 	break;
 8001d3a:	e01a      	b.n	8001d72 <MotorState+0x1b2>
			__HAL_TIM_SET_COMPARE(key->timer_data._htim_PWM,key->timer_data._channel_PWM,0);        //ustawiam sygnał PWM 0%
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d105      	bne.n	8001d50 <MotorState+0x190>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	6393      	str	r3, [r2, #56]	@ 0x38
		 	break;
 8001d4e:	e010      	b.n	8001d72 <MotorState+0x1b2>
			__HAL_TIM_SET_COMPARE(key->timer_data._htim_PWM,key->timer_data._channel_PWM,0);        //ustawiam sygnał PWM 0%
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d105      	bne.n	8001d64 <MotorState+0x1a4>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	63d3      	str	r3, [r2, #60]	@ 0x3c
		 	break;
 8001d62:	e006      	b.n	8001d72 <MotorState+0x1b2>
			__HAL_TIM_SET_COMPARE(key->timer_data._htim_PWM,key->timer_data._channel_PWM,0);        //ustawiam sygnał PWM 0%
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	6413      	str	r3, [r2, #64]	@ 0x40
		 	break;
 8001d6e:	e000      	b.n	8001d72 <MotorState+0x1b2>
		 	break;
 8001d70:	bf00      	nop
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	0000      	movs	r0, r0
 8001d7c:	0000      	movs	r0, r0
	...

08001d80 <PID>:

void PID(WHEEL_Type* key)
{
 8001d80:	b5b0      	push	{r4, r5, r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	float P=0.267;     //definiuje współczynnik P,I,D
 8001d88:	4b4d      	ldr	r3, [pc, #308]	@ (8001ec0 <PID+0x140>)
 8001d8a:	617b      	str	r3, [r7, #20]
	float I=14.1;
 8001d8c:	4b4d      	ldr	r3, [pc, #308]	@ (8001ec4 <PID+0x144>)
 8001d8e:	613b      	str	r3, [r7, #16]
	float D=0.0;
 8001d90:	f04f 0300 	mov.w	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
	key->pid_data.Deviation=key->set_velocity-key->encoder_data.CurrentVelocity;    //obliczam uchyb regulacji
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe ff96 	bl	8000ccc <__aeabi_i2f>
 8001da0:	4602      	mov	r2, r0
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	4619      	mov	r1, r3
 8001da8:	4610      	mov	r0, r2
 8001daa:	f7fe fed9 	bl	8000b60 <__aeabi_fsub>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461a      	mov	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	631a      	str	r2, [r3, #48]	@ 0x30
	if(key->pid_data.PidSignal>-1000&&key->pid_data.PidSignal<1000)     //to zabezpieczenie przed windup
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dba:	4943      	ldr	r1, [pc, #268]	@ (8001ec8 <PID+0x148>)
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff f995 	bl	80010ec <__aeabi_fcmpgt>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d029      	beq.n	8001e1c <PID+0x9c>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dcc:	493f      	ldr	r1, [pc, #252]	@ (8001ecc <PID+0x14c>)
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff f96e 	bl	80010b0 <__aeabi_fcmplt>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d020      	beq.n	8001e1c <PID+0x9c>
	{
		key->pid_data.Integral+=key->pid_data.Deviation*0.2;//obliczam całkę z uchybu 0.2 ponieważ bede tą funkcję wykonywał co 0.2s
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe fb3a 	bl	8000458 <__aeabi_f2d>
 8001de4:	4604      	mov	r4, r0
 8001de6:	460d      	mov	r5, r1
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe fb33 	bl	8000458 <__aeabi_f2d>
 8001df2:	a331      	add	r3, pc, #196	@ (adr r3, 8001eb8 <PID+0x138>)
 8001df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df8:	f7fe fb86 	bl	8000508 <__aeabi_dmul>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4620      	mov	r0, r4
 8001e02:	4629      	mov	r1, r5
 8001e04:	f7fe f9ca 	bl	800019c <__adddf3>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f7fe fe52 	bl	8000ab8 <__aeabi_d2f>
 8001e14:	4602      	mov	r2, r0
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e1a:	e01b      	b.n	8001e54 <PID+0xd4>
	}
	else
	{
		if(key->encoder_data.CurrentVelocity==0)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f04f 0100 	mov.w	r1, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff f939 	bl	800109c <__aeabi_fcmpeq>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <PID+0xb8>
		{
			key->pid_data.Integral=0;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	635a      	str	r2, [r3, #52]	@ 0x34
		}
		if(key->encoder_data.CurrentVelocity!=0)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f04f 0100 	mov.w	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff f92b 	bl	800109c <__aeabi_fcmpeq>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d103      	bne.n	8001e54 <PID+0xd4>
		{
			key->pid_data.Integral=key->pid_data.Integral;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}

	key->pid_data.PidSignal = key->pid_data.Deviation*P + key->pid_data.Integral*I + key->pid_data.Derivative*D;//to standardowy regulator PID
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e58:	6979      	ldr	r1, [r7, #20]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe ff8a 	bl	8000d74 <__aeabi_fmul>
 8001e60:	4603      	mov	r3, r0
 8001e62:	461c      	mov	r4, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e68:	6939      	ldr	r1, [r7, #16]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe ff82 	bl	8000d74 <__aeabi_fmul>
 8001e70:	4603      	mov	r3, r0
 8001e72:	4619      	mov	r1, r3
 8001e74:	4620      	mov	r0, r4
 8001e76:	f7fe fe75 	bl	8000b64 <__addsf3>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	461c      	mov	r4, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e82:	68f9      	ldr	r1, [r7, #12]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe ff75 	bl	8000d74 <__aeabi_fmul>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4620      	mov	r0, r4
 8001e90:	f7fe fe68 	bl	8000b64 <__addsf3>
 8001e94:	4603      	mov	r3, r0
 8001e96:	461a      	mov	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
	key->motor_siganl=key->pid_data.PidSignal;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff f92d 	bl	8001100 <__aeabi_f2iz>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8001eac:	bf00      	nop
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb4:	f3af 8000 	nop.w
 8001eb8:	9999999a 	.word	0x9999999a
 8001ebc:	3fc99999 	.word	0x3fc99999
 8001ec0:	3e88b439 	.word	0x3e88b439
 8001ec4:	4161999a 	.word	0x4161999a
 8001ec8:	c47a0000 	.word	0xc47a0000
 8001ecc:	447a0000 	.word	0x447a0000

08001ed0 <SpeedRamp>:

void SpeedRamp(WHEEL_Type *key)
{
 8001ed0:	b590      	push	{r4, r7, lr}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	if(key->ramp_data.LastFinalSpeed!=key->ramp_data.FinalSpeed)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d00b      	beq.n	8001efc <SpeedRamp+0x2c>
	{
		key->ramp_data.LastFinalSpeed=key->ramp_data.FinalSpeed;     //przypisuje starej predkosci nową prędkość
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	645a      	str	r2, [r3, #68]	@ 0x44
		key->ramp_data.StartSpeed=key->encoder_data.CurrentVelocity; //predkosc startująca to aktualna predkość
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff f905 	bl	8001100 <__aeabi_f2iz>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	if(key->ramp_data.LastFinalSpeed==key->ramp_data.FinalSpeed)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f04:	429a      	cmp	r2, r3
 8001f06:	f040 80c7 	bne.w	8002098 <SpeedRamp+0x1c8>
	{
		key->ramp_data.Delta=(key->ramp_data.FinalSpeed-key->ramp_data.StartSpeed)/(key->ramp_data.RisingTime*5);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe fed9 	bl	8000ccc <__aeabi_i2f>
 8001f1a:	4604      	mov	r4, r0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f20:	495f      	ldr	r1, [pc, #380]	@ (80020a0 <SpeedRamp+0x1d0>)
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe ff26 	bl	8000d74 <__aeabi_fmul>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	f7fe ffd5 	bl	8000edc <__aeabi_fdiv>
 8001f32:	4603      	mov	r3, r0
 8001f34:	461a      	mov	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	649a      	str	r2, [r3, #72]	@ 0x48
		//Obliczam o ile mam zwiększać predkosc z kolejnym krokiem + plus kontrola przed złym znakiem
		if(key->ramp_data.Delta<0)//dla rampy mniejszej od zera czyli zmniejszanie predkosci są inne warunki w if poniżej
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f3e:	f04f 0100 	mov.w	r1, #0
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff f8b4 	bl	80010b0 <__aeabi_fcmplt>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d04c      	beq.n	8001fe8 <SpeedRamp+0x118>
		{
			if((key->set_velocity<(key->ramp_data.FinalSpeed-key->ramp_data.Delta))&&(key->set_velocity>(key->ramp_data.FinalSpeed+key->ramp_data.Delta)))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe feba 	bl	8000ccc <__aeabi_i2f>
 8001f58:	4604      	mov	r4, r0
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe feb4 	bl	8000ccc <__aeabi_i2f>
 8001f64:	4602      	mov	r2, r0
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4610      	mov	r0, r2
 8001f6e:	f7fe fdf7 	bl	8000b60 <__aeabi_fsub>
 8001f72:	4603      	mov	r3, r0
 8001f74:	4619      	mov	r1, r3
 8001f76:	4620      	mov	r0, r4
 8001f78:	f7ff f89a 	bl	80010b0 <__aeabi_fcmplt>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d01e      	beq.n	8001fc0 <SpeedRamp+0xf0>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe fea0 	bl	8000ccc <__aeabi_i2f>
 8001f8c:	4604      	mov	r4, r0
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fe9a 	bl	8000ccc <__aeabi_i2f>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	f7fe fddf 	bl	8000b64 <__addsf3>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4620      	mov	r0, r4
 8001fac:	f7ff f89e 	bl	80010ec <__aeabi_fcmpgt>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d004      	beq.n	8001fc0 <SpeedRamp+0xf0>
			{
				key->set_velocity=key->ramp_data.FinalSpeed;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fbe:	e06b      	b.n	8002098 <SpeedRamp+0x1c8>
			}
			else
			{
				key->set_velocity+=key->ramp_data.Delta;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe fe81 	bl	8000ccc <__aeabi_i2f>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	f7fe fdc6 	bl	8000b64 <__addsf3>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff f890 	bl	8001100 <__aeabi_f2iz>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	651a      	str	r2, [r3, #80]	@ 0x50
			{
				key->set_velocity+=key->ramp_data.Delta;
			}
		}
	}
}
 8001fe6:	e057      	b.n	8002098 <SpeedRamp+0x1c8>
		else if(key->ramp_data.Delta>0)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fec:	f04f 0100 	mov.w	r1, #0
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff f87b 	bl	80010ec <__aeabi_fcmpgt>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d100      	bne.n	8001ffe <SpeedRamp+0x12e>
}
 8001ffc:	e04c      	b.n	8002098 <SpeedRamp+0x1c8>
			if((key->set_velocity>(key->ramp_data.FinalSpeed-key->ramp_data.Delta))&&(key->set_velocity<(key->ramp_data.FinalSpeed+key->ramp_data.Delta)))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fe62 	bl	8000ccc <__aeabi_i2f>
 8002008:	4604      	mov	r4, r0
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fe5c 	bl	8000ccc <__aeabi_i2f>
 8002014:	4602      	mov	r2, r0
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800201a:	4619      	mov	r1, r3
 800201c:	4610      	mov	r0, r2
 800201e:	f7fe fd9f 	bl	8000b60 <__aeabi_fsub>
 8002022:	4603      	mov	r3, r0
 8002024:	4619      	mov	r1, r3
 8002026:	4620      	mov	r0, r4
 8002028:	f7ff f860 	bl	80010ec <__aeabi_fcmpgt>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d01e      	beq.n	8002070 <SpeedRamp+0x1a0>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe fe48 	bl	8000ccc <__aeabi_i2f>
 800203c:	4604      	mov	r4, r0
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe fe42 	bl	8000ccc <__aeabi_i2f>
 8002048:	4602      	mov	r2, r0
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800204e:	4619      	mov	r1, r3
 8002050:	4610      	mov	r0, r2
 8002052:	f7fe fd87 	bl	8000b64 <__addsf3>
 8002056:	4603      	mov	r3, r0
 8002058:	4619      	mov	r1, r3
 800205a:	4620      	mov	r0, r4
 800205c:	f7ff f828 	bl	80010b0 <__aeabi_fcmplt>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d004      	beq.n	8002070 <SpeedRamp+0x1a0>
				key->set_velocity=key->ramp_data.FinalSpeed;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	651a      	str	r2, [r3, #80]	@ 0x50
 800206e:	e013      	b.n	8002098 <SpeedRamp+0x1c8>
				key->set_velocity+=key->ramp_data.Delta;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fe29 	bl	8000ccc <__aeabi_i2f>
 800207a:	4602      	mov	r2, r0
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002080:	4619      	mov	r1, r3
 8002082:	4610      	mov	r0, r2
 8002084:	f7fe fd6e 	bl	8000b64 <__addsf3>
 8002088:	4603      	mov	r3, r0
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff f838 	bl	8001100 <__aeabi_f2iz>
 8002090:	4602      	mov	r2, r0
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002096:	e7ff      	b.n	8002098 <SpeedRamp+0x1c8>
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	bd90      	pop	{r4, r7, pc}
 80020a0:	40a00000 	.word	0x40a00000

080020a4 <ReadInfoFromUart>:
int ReadInfoFromUart(char znak,WHEEL_Type* FL,WHEEL_Type* FR,WHEEL_Type* BL,WHEEL_Type* BR)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	4603      	mov	r3, r0
 80020b2:	73fb      	strb	r3, [r7, #15]
	int speed;
	switch(znak)                    //a teraz sprawdzam w którym dokładnie trybie ruchu jestem
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	3b30      	subs	r3, #48	@ 0x30
 80020b8:	2b36      	cmp	r3, #54	@ 0x36
 80020ba:	f200 813a 	bhi.w	8002332 <ReadInfoFromUart+0x28e>
 80020be:	a201      	add	r2, pc, #4	@ (adr r2, 80020c4 <ReadInfoFromUart+0x20>)
 80020c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c4:	080021a1 	.word	0x080021a1
 80020c8:	08002333 	.word	0x08002333
 80020cc:	08002333 	.word	0x08002333
 80020d0:	08002333 	.word	0x08002333
 80020d4:	08002333 	.word	0x08002333
 80020d8:	08002333 	.word	0x08002333
 80020dc:	08002333 	.word	0x08002333
 80020e0:	08002333 	.word	0x08002333
 80020e4:	08002333 	.word	0x08002333
 80020e8:	08002333 	.word	0x08002333
 80020ec:	08002333 	.word	0x08002333
 80020f0:	08002333 	.word	0x08002333
 80020f4:	08002333 	.word	0x08002333
 80020f8:	08002333 	.word	0x08002333
 80020fc:	08002333 	.word	0x08002333
 8002100:	08002333 	.word	0x08002333
 8002104:	08002333 	.word	0x08002333
 8002108:	08002279 	.word	0x08002279
 800210c:	08002297 	.word	0x08002297
 8002110:	080022b7 	.word	0x080022b7
 8002114:	080022d7 	.word	0x080022d7
 8002118:	080022f5 	.word	0x080022f5
 800211c:	08002313 	.word	0x08002313
 8002120:	08002333 	.word	0x08002333
 8002124:	08002333 	.word	0x08002333
 8002128:	08002333 	.word	0x08002333
 800212c:	08002333 	.word	0x08002333
 8002130:	08002333 	.word	0x08002333
 8002134:	08002333 	.word	0x08002333
 8002138:	08002333 	.word	0x08002333
 800213c:	08002333 	.word	0x08002333
 8002140:	08002333 	.word	0x08002333
 8002144:	08002333 	.word	0x08002333
 8002148:	08002333 	.word	0x08002333
 800214c:	08002333 	.word	0x08002333
 8002150:	08002333 	.word	0x08002333
 8002154:	08002333 	.word	0x08002333
 8002158:	08002333 	.word	0x08002333
 800215c:	08002333 	.word	0x08002333
 8002160:	08002333 	.word	0x08002333
 8002164:	08002333 	.word	0x08002333
 8002168:	08002333 	.word	0x08002333
 800216c:	08002333 	.word	0x08002333
 8002170:	08002333 	.word	0x08002333
 8002174:	08002333 	.word	0x08002333
 8002178:	08002333 	.word	0x08002333
 800217c:	08002333 	.word	0x08002333
 8002180:	08002333 	.word	0x08002333
 8002184:	08002333 	.word	0x08002333
 8002188:	080021bf 	.word	0x080021bf
 800218c:	080021dd 	.word	0x080021dd
 8002190:	080021fd 	.word	0x080021fd
 8002194:	0800221d 	.word	0x0800221d
 8002198:	0800223b 	.word	0x0800223b
 800219c:	08002259 	.word	0x08002259
	{
		case '0':
			FL->MOVE_STATE=IDLE_2;
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2200      	movs	r2, #0
 80021a4:	705a      	strb	r2, [r3, #1]
			FR->MOVE_STATE=IDLE_2;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	705a      	strb	r2, [r3, #1]
			BL->MOVE_STATE=IDLE_2;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	2200      	movs	r2, #0
 80021b0:	705a      	strb	r2, [r3, #1]
			BR->MOVE_STATE=IDLE_2;
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	2200      	movs	r2, #0
 80021b6:	705a      	strb	r2, [r3, #1]
			speed=0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
			break;
 80021bc:	e0c8      	b.n	8002350 <ReadInfoFromUart+0x2ac>
		case 'a':                     //gdy przyjdzie 0 to jazda do przodu
			FL->MOVE_STATE=FORWARD;
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2201      	movs	r2, #1
 80021c2:	705a      	strb	r2, [r3, #1]
			FR->MOVE_STATE=FORWARD;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	705a      	strb	r2, [r3, #1]
			BL->MOVE_STATE=FORWARD;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	2201      	movs	r2, #1
 80021ce:	705a      	strb	r2, [r3, #1]
			BR->MOVE_STATE=FORWARD;
 80021d0:	6a3b      	ldr	r3, [r7, #32]
 80021d2:	2201      	movs	r2, #1
 80021d4:	705a      	strb	r2, [r3, #1]
			speed=12;
 80021d6:	230c      	movs	r3, #12
 80021d8:	617b      	str	r3, [r7, #20]
			break;
 80021da:	e0b9      	b.n	8002350 <ReadInfoFromUart+0x2ac>
		case 'b':
			FL->MOVE_STATE=FORWARD;
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2201      	movs	r2, #1
 80021e0:	705a      	strb	r2, [r3, #1]
			FR->MOVE_STATE=FORWARD;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	705a      	strb	r2, [r3, #1]
			BL->MOVE_STATE=FORWARD;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	2201      	movs	r2, #1
 80021ec:	705a      	strb	r2, [r3, #1]
			BR->MOVE_STATE=FORWARD;
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	2201      	movs	r2, #1
 80021f2:	705a      	strb	r2, [r3, #1]
			speed=-12;
 80021f4:	f06f 030b 	mvn.w	r3, #11
 80021f8:	617b      	str	r3, [r7, #20]
			break;
 80021fa:	e0a9      	b.n	8002350 <ReadInfoFromUart+0x2ac>
		case 'c':
			FL->MOVE_STATE=AROUND;
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	2203      	movs	r2, #3
 8002200:	705a      	strb	r2, [r3, #1]
			FR->MOVE_STATE=AROUND;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2203      	movs	r2, #3
 8002206:	705a      	strb	r2, [r3, #1]
			BL->MOVE_STATE=AROUND;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	2203      	movs	r2, #3
 800220c:	705a      	strb	r2, [r3, #1]
			BR->MOVE_STATE=AROUND;
 800220e:	6a3b      	ldr	r3, [r7, #32]
 8002210:	2203      	movs	r2, #3
 8002212:	705a      	strb	r2, [r3, #1]
			speed=-12;
 8002214:	f06f 030b 	mvn.w	r3, #11
 8002218:	617b      	str	r3, [r7, #20]
			break;
 800221a:	e099      	b.n	8002350 <ReadInfoFromUart+0x2ac>
		case 'd':                    //gdy przyjdzie 3 to jazda w prawo
			FL->MOVE_STATE=AROUND;
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2203      	movs	r2, #3
 8002220:	705a      	strb	r2, [r3, #1]
			FR->MOVE_STATE=AROUND;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2203      	movs	r2, #3
 8002226:	705a      	strb	r2, [r3, #1]
			BL->MOVE_STATE=AROUND;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	2203      	movs	r2, #3
 800222c:	705a      	strb	r2, [r3, #1]
			BR->MOVE_STATE=AROUND;
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	2203      	movs	r2, #3
 8002232:	705a      	strb	r2, [r3, #1]
			speed=12;
 8002234:	230c      	movs	r3, #12
 8002236:	617b      	str	r3, [r7, #20]
			break;
 8002238:	e08a      	b.n	8002350 <ReadInfoFromUart+0x2ac>
		case 'e':
			FL->MOVE_STATE=RIGHT_SIDE;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	2202      	movs	r2, #2
 800223e:	705a      	strb	r2, [r3, #1]
			FR->MOVE_STATE=RIGHT_SIDE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	705a      	strb	r2, [r3, #1]
			BL->MOVE_STATE=RIGHT_SIDE;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2202      	movs	r2, #2
 800224a:	705a      	strb	r2, [r3, #1]
			BR->MOVE_STATE=RIGHT_SIDE;
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	2202      	movs	r2, #2
 8002250:	705a      	strb	r2, [r3, #1]
			speed=12;
 8002252:	230c      	movs	r3, #12
 8002254:	617b      	str	r3, [r7, #20]
			break;
 8002256:	e07b      	b.n	8002350 <ReadInfoFromUart+0x2ac>
		case 'f':
			FL->MOVE_STATE=RIGHT_SIDE;
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2202      	movs	r2, #2
 800225c:	705a      	strb	r2, [r3, #1]
			FR->MOVE_STATE=RIGHT_SIDE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2202      	movs	r2, #2
 8002262:	705a      	strb	r2, [r3, #1]
			BL->MOVE_STATE=RIGHT_SIDE;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	2202      	movs	r2, #2
 8002268:	705a      	strb	r2, [r3, #1]
			BR->MOVE_STATE=RIGHT_SIDE;
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	2202      	movs	r2, #2
 800226e:	705a      	strb	r2, [r3, #1]
			speed=-12;
 8002270:	f06f 030b 	mvn.w	r3, #11
 8002274:	617b      	str	r3, [r7, #20]
			break;
 8002276:	e06b      	b.n	8002350 <ReadInfoFromUart+0x2ac>
		case 'A':                     //gdy przyjdzie 0 to jazda do przodu
			FL->MOVE_STATE=FORWARD;
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2201      	movs	r2, #1
 800227c:	705a      	strb	r2, [r3, #1]
			FR->MOVE_STATE=FORWARD;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	705a      	strb	r2, [r3, #1]
			BL->MOVE_STATE=FORWARD;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	2201      	movs	r2, #1
 8002288:	705a      	strb	r2, [r3, #1]
			BR->MOVE_STATE=FORWARD;
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	2201      	movs	r2, #1
 800228e:	705a      	strb	r2, [r3, #1]
			speed=25;
 8002290:	2319      	movs	r3, #25
 8002292:	617b      	str	r3, [r7, #20]
			break;
 8002294:	e05c      	b.n	8002350 <ReadInfoFromUart+0x2ac>
		case 'B':
			FL->MOVE_STATE=FORWARD;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2201      	movs	r2, #1
 800229a:	705a      	strb	r2, [r3, #1]
			FR->MOVE_STATE=FORWARD;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	705a      	strb	r2, [r3, #1]
			BL->MOVE_STATE=FORWARD;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2201      	movs	r2, #1
 80022a6:	705a      	strb	r2, [r3, #1]
			BR->MOVE_STATE=FORWARD;
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	2201      	movs	r2, #1
 80022ac:	705a      	strb	r2, [r3, #1]
			speed=-25;
 80022ae:	f06f 0318 	mvn.w	r3, #24
 80022b2:	617b      	str	r3, [r7, #20]
			break;
 80022b4:	e04c      	b.n	8002350 <ReadInfoFromUart+0x2ac>
		case 'C':
			FL->MOVE_STATE=AROUND;
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2203      	movs	r2, #3
 80022ba:	705a      	strb	r2, [r3, #1]
			FR->MOVE_STATE=AROUND;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2203      	movs	r2, #3
 80022c0:	705a      	strb	r2, [r3, #1]
			BL->MOVE_STATE=AROUND;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2203      	movs	r2, #3
 80022c6:	705a      	strb	r2, [r3, #1]
			BR->MOVE_STATE=AROUND;
 80022c8:	6a3b      	ldr	r3, [r7, #32]
 80022ca:	2203      	movs	r2, #3
 80022cc:	705a      	strb	r2, [r3, #1]
			speed=-15;
 80022ce:	f06f 030e 	mvn.w	r3, #14
 80022d2:	617b      	str	r3, [r7, #20]
			break;
 80022d4:	e03c      	b.n	8002350 <ReadInfoFromUart+0x2ac>
		case 'D':                    //gdy przyjdzie 3 to jazda w prawo
			FL->MOVE_STATE=AROUND;
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2203      	movs	r2, #3
 80022da:	705a      	strb	r2, [r3, #1]
			FR->MOVE_STATE=AROUND;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2203      	movs	r2, #3
 80022e0:	705a      	strb	r2, [r3, #1]
			BL->MOVE_STATE=AROUND;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2203      	movs	r2, #3
 80022e6:	705a      	strb	r2, [r3, #1]
			BR->MOVE_STATE=AROUND;
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	2203      	movs	r2, #3
 80022ec:	705a      	strb	r2, [r3, #1]
			speed=15;
 80022ee:	230f      	movs	r3, #15
 80022f0:	617b      	str	r3, [r7, #20]
			break;
 80022f2:	e02d      	b.n	8002350 <ReadInfoFromUart+0x2ac>
		case 'E':
			FL->MOVE_STATE=RIGHT_SIDE;
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	2202      	movs	r2, #2
 80022f8:	705a      	strb	r2, [r3, #1]
			FR->MOVE_STATE=RIGHT_SIDE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2202      	movs	r2, #2
 80022fe:	705a      	strb	r2, [r3, #1]
			BL->MOVE_STATE=RIGHT_SIDE;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	2202      	movs	r2, #2
 8002304:	705a      	strb	r2, [r3, #1]
			BR->MOVE_STATE=RIGHT_SIDE;
 8002306:	6a3b      	ldr	r3, [r7, #32]
 8002308:	2202      	movs	r2, #2
 800230a:	705a      	strb	r2, [r3, #1]
			speed=25;
 800230c:	2319      	movs	r3, #25
 800230e:	617b      	str	r3, [r7, #20]
			break;
 8002310:	e01e      	b.n	8002350 <ReadInfoFromUart+0x2ac>
		case 'F':
			FL->MOVE_STATE=RIGHT_SIDE;
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2202      	movs	r2, #2
 8002316:	705a      	strb	r2, [r3, #1]
			FR->MOVE_STATE=RIGHT_SIDE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	705a      	strb	r2, [r3, #1]
			BL->MOVE_STATE=RIGHT_SIDE;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2202      	movs	r2, #2
 8002322:	705a      	strb	r2, [r3, #1]
			BR->MOVE_STATE=RIGHT_SIDE;
 8002324:	6a3b      	ldr	r3, [r7, #32]
 8002326:	2202      	movs	r2, #2
 8002328:	705a      	strb	r2, [r3, #1]
			speed=-25;
 800232a:	f06f 0318 	mvn.w	r3, #24
 800232e:	617b      	str	r3, [r7, #20]
			break;
 8002330:	e00e      	b.n	8002350 <ReadInfoFromUart+0x2ac>
		default:
			FL->MOVE_STATE=IDLE_2;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2200      	movs	r2, #0
 8002336:	705a      	strb	r2, [r3, #1]
			FR->MOVE_STATE=IDLE_2;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	705a      	strb	r2, [r3, #1]
			BL->MOVE_STATE=IDLE_2;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	2200      	movs	r2, #0
 8002342:	705a      	strb	r2, [r3, #1]
			BR->MOVE_STATE=IDLE_2;
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	2200      	movs	r2, #0
 8002348:	705a      	strb	r2, [r3, #1]
			speed=0;
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
		    break;
 800234e:	bf00      	nop
	}
	return speed;
 8002350:	697b      	ldr	r3, [r7, #20]
}
 8002352:	4618      	mov	r0, r3
 8002354:	371c      	adds	r7, #28
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002362:	f000 fe76 	bl	8003052 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002366:	f000 f8a9 	bl	80024bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800236a:	f7ff f96b 	bl	8001644 <MX_GPIO_Init>
  MX_TIM11_Init();
 800236e:	f000 fd07 	bl	8002d80 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 8002372:	f000 fddb 	bl	8002f2c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8002376:	f000 fc35 	bl	8002be4 <MX_TIM3_Init>
  MX_I2C1_Init();
 800237a:	f7ff f9eb 	bl	8001754 <MX_I2C1_Init>
  MX_TIM10_Init();
 800237e:	f000 fcc5 	bl	8002d0c <MX_TIM10_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002382:	f000 f8e7 	bl	8002554 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  InitFunction(&Front_Left, &Front_Right, &Back_Left, &Back_Right);   //to wywołanie funkcji inicjalizujacej 4 koła-są w niej też starty timerów
 8002386:	4b38      	ldr	r3, [pc, #224]	@ (8002468 <main+0x10c>)
 8002388:	4a38      	ldr	r2, [pc, #224]	@ (800246c <main+0x110>)
 800238a:	4939      	ldr	r1, [pc, #228]	@ (8002470 <main+0x114>)
 800238c:	4839      	ldr	r0, [pc, #228]	@ (8002474 <main+0x118>)
 800238e:	f7ff fa53 	bl	8001838 <InitFunction>
  HAL_TIM_Base_Start_IT(&htim10);//start podstawy czasu w trybie przerwaniowym - co 0.5s
 8002392:	4839      	ldr	r0, [pc, #228]	@ (8002478 <main+0x11c>)
 8002394:	f002 fe8e 	bl	80050b4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);//start podstawy czasu w trybie przerwaniowym - co 0.2s
 8002398:	4838      	ldr	r0, [pc, #224]	@ (800247c <main+0x120>)
 800239a:	f002 fe8b 	bl	80050b4 <HAL_TIM_Base_Start_IT>

  INA3221_Init(&ina3221, &hi2c1, 0x40);
 800239e:	2240      	movs	r2, #64	@ 0x40
 80023a0:	4937      	ldr	r1, [pc, #220]	@ (8002480 <main+0x124>)
 80023a2:	4838      	ldr	r0, [pc, #224]	@ (8002484 <main+0x128>)
 80023a4:	f7ff f848 	bl	8001438 <INA3221_Init>
  INA3221_SetShuntResistor(&ina3221, INA3221_CHANNEL_1, 0.01f); // 10 mΩ
 80023a8:	4a37      	ldr	r2, [pc, #220]	@ (8002488 <main+0x12c>)
 80023aa:	2100      	movs	r1, #0
 80023ac:	4835      	ldr	r0, [pc, #212]	@ (8002484 <main+0x128>)
 80023ae:	f7ff f86f 	bl	8001490 <INA3221_SetShuntResistor>
  INA3221_SetShuntResistor(&ina3221, INA3221_CHANNEL_2, 0.01f); // 10 mΩ
 80023b2:	4a35      	ldr	r2, [pc, #212]	@ (8002488 <main+0x12c>)
 80023b4:	2101      	movs	r1, #1
 80023b6:	4833      	ldr	r0, [pc, #204]	@ (8002484 <main+0x128>)
 80023b8:	f7ff f86a 	bl	8001490 <INA3221_SetShuntResistor>
  INA3221_SetShuntResistor(&ina3221, INA3221_CHANNEL_3, 0.01f); // 10 mΩ
 80023bc:	4a32      	ldr	r2, [pc, #200]	@ (8002488 <main+0x12c>)
 80023be:	2102      	movs	r1, #2
 80023c0:	4830      	ldr	r0, [pc, #192]	@ (8002484 <main+0x128>)
 80023c2:	f7ff f865 	bl	8001490 <INA3221_SetShuntResistor>

  Sensor_INA3221.TotalEnergy=0;
 80023c6:	4b31      	ldr	r3, [pc, #196]	@ (800248c <main+0x130>)
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	61da      	str	r2, [r3, #28]
  //HAL_UART_Receive_IT(&huart2, (uint8_t *)rx_buffer, sizeof(rx_buffer));
  HAL_UART_Receive_IT(&huart2, &znak,1);
 80023ce:	2201      	movs	r2, #1
 80023d0:	492f      	ldr	r1, [pc, #188]	@ (8002490 <main+0x134>)
 80023d2:	4830      	ldr	r0, [pc, #192]	@ (8002494 <main+0x138>)
 80023d4:	f003 fd2b 	bl	8005e2e <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sp1=Front_Left.encoder_data.CurrentVelocity;
 80023d8:	4b26      	ldr	r3, [pc, #152]	@ (8002474 <main+0x118>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	4a2e      	ldr	r2, [pc, #184]	@ (8002498 <main+0x13c>)
 80023de:	6013      	str	r3, [r2, #0]
	  sp2=Front_Right.encoder_data.CurrentVelocity;
 80023e0:	4b23      	ldr	r3, [pc, #140]	@ (8002470 <main+0x114>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	4a2d      	ldr	r2, [pc, #180]	@ (800249c <main+0x140>)
 80023e6:	6013      	str	r3, [r2, #0]
	  sp3=Back_Left.encoder_data.CurrentVelocity;
 80023e8:	4b20      	ldr	r3, [pc, #128]	@ (800246c <main+0x110>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	4a2c      	ldr	r2, [pc, #176]	@ (80024a0 <main+0x144>)
 80023ee:	6013      	str	r3, [r2, #0]
	  sp4=Back_Right.encoder_data.CurrentVelocity;
 80023f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002468 <main+0x10c>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4a2b      	ldr	r2, [pc, #172]	@ (80024a4 <main+0x148>)
 80023f6:	6013      	str	r3, [r2, #0]
	  x1=Front_Left.pid_data.PidSignal;
 80023f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002474 <main+0x118>)
 80023fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe fe7f 	bl	8001100 <__aeabi_f2iz>
 8002402:	4603      	mov	r3, r0
 8002404:	4a28      	ldr	r2, [pc, #160]	@ (80024a8 <main+0x14c>)
 8002406:	6013      	str	r3, [r2, #0]
	  x2=Front_Right.pid_data.PidSignal;
 8002408:	4b19      	ldr	r3, [pc, #100]	@ (8002470 <main+0x114>)
 800240a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe fe77 	bl	8001100 <__aeabi_f2iz>
 8002412:	4603      	mov	r3, r0
 8002414:	4a25      	ldr	r2, [pc, #148]	@ (80024ac <main+0x150>)
 8002416:	6013      	str	r3, [r2, #0]
	  x3=Back_Left.pid_data.PidSignal;
 8002418:	4b14      	ldr	r3, [pc, #80]	@ (800246c <main+0x110>)
 800241a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe fe6f 	bl	8001100 <__aeabi_f2iz>
 8002422:	4603      	mov	r3, r0
 8002424:	4a22      	ldr	r2, [pc, #136]	@ (80024b0 <main+0x154>)
 8002426:	6013      	str	r3, [r2, #0]
	  x4=Back_Right.pid_data.PidSignal;
 8002428:	4b0f      	ldr	r3, [pc, #60]	@ (8002468 <main+0x10c>)
 800242a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe fe67 	bl	8001100 <__aeabi_f2iz>
 8002432:	4603      	mov	r3, r0
 8002434:	4a1f      	ldr	r2, [pc, #124]	@ (80024b4 <main+0x158>)
 8002436:	6013      	str	r3, [r2, #0]
	  k4=Back_Right.motor_siganl;*/

	  //Logika(&Front_Left, &Front_Right, &Back_Left, &Back_Right);

	  //wywołuję funkcję która ustawia predkosć i kierunek jazdy dla czterech kół
	  MotorState(&Front_Left);
 8002438:	480e      	ldr	r0, [pc, #56]	@ (8002474 <main+0x118>)
 800243a:	f7ff fbc1 	bl	8001bc0 <MotorState>
	  MotorState(&Front_Right);
 800243e:	480c      	ldr	r0, [pc, #48]	@ (8002470 <main+0x114>)
 8002440:	f7ff fbbe 	bl	8001bc0 <MotorState>
	  MotorState(&Back_Left);
 8002444:	4809      	ldr	r0, [pc, #36]	@ (800246c <main+0x110>)
 8002446:	f7ff fbbb 	bl	8001bc0 <MotorState>
	  MotorState(&Back_Right);
 800244a:	4807      	ldr	r0, [pc, #28]	@ (8002468 <main+0x10c>)
 800244c:	f7ff fbb8 	bl	8001bc0 <MotorState>

	  VelocityCalculation(&Front_Left, &Front_Right, &Back_Left, &Back_Right,speed);
 8002450:	4b19      	ldr	r3, [pc, #100]	@ (80024b8 <main+0x15c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	4b04      	ldr	r3, [pc, #16]	@ (8002468 <main+0x10c>)
 8002458:	4a04      	ldr	r2, [pc, #16]	@ (800246c <main+0x110>)
 800245a:	4905      	ldr	r1, [pc, #20]	@ (8002470 <main+0x114>)
 800245c:	4805      	ldr	r0, [pc, #20]	@ (8002474 <main+0x118>)
 800245e:	f7ff fa9b 	bl	8001998 <VelocityCalculation>
	  sp1=Front_Left.encoder_data.CurrentVelocity;
 8002462:	bf00      	nop
 8002464:	e7b8      	b.n	80023d8 <main+0x7c>
 8002466:	bf00      	nop
 8002468:	200002f8 	.word	0x200002f8
 800246c:	20000350 	.word	0x20000350
 8002470:	20000248 	.word	0x20000248
 8002474:	200002a0 	.word	0x200002a0
 8002478:	20000450 	.word	0x20000450
 800247c:	20000490 	.word	0x20000490
 8002480:	200001f4 	.word	0x200001f4
 8002484:	200003ec 	.word	0x200003ec
 8002488:	3c23d70a 	.word	0x3c23d70a
 800248c:	200003a8 	.word	0x200003a8
 8002490:	20000000 	.word	0x20000000
 8002494:	200004d0 	.word	0x200004d0
 8002498:	200003cc 	.word	0x200003cc
 800249c:	200003d0 	.word	0x200003d0
 80024a0:	200003d4 	.word	0x200003d4
 80024a4:	200003d8 	.word	0x200003d8
 80024a8:	200003dc 	.word	0x200003dc
 80024ac:	200003e0 	.word	0x200003e0
 80024b0:	200003e4 	.word	0x200003e4
 80024b4:	200003e8 	.word	0x200003e8
 80024b8:	200003c8 	.word	0x200003c8

080024bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b092      	sub	sp, #72	@ 0x48
 80024c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024c2:	f107 0314 	add.w	r3, r7, #20
 80024c6:	2234      	movs	r2, #52	@ 0x34
 80024c8:	2100      	movs	r1, #0
 80024ca:	4618      	mov	r0, r3
 80024cc:	f004 ffbd 	bl	800744a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024d0:	463b      	mov	r3, r7
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	60da      	str	r2, [r3, #12]
 80024dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024de:	4b1c      	ldr	r3, [pc, #112]	@ (8002550 <SystemClock_Config+0x94>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 80024e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002550 <SystemClock_Config+0x94>)
 80024e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80024ec:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024ee:	2301      	movs	r3, #1
 80024f0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80024f2:	2305      	movs	r3, #5
 80024f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024f6:	2302      	movs	r3, #2
 80024f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002500:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002504:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8002506:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800250a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800250c:	f107 0314 	add.w	r3, r7, #20
 8002510:	4618      	mov	r0, r3
 8002512:	f001 ff99 	bl	8004448 <HAL_RCC_OscConfig>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800251c:	f000 f9f6 	bl	800290c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002520:	230f      	movs	r3, #15
 8002522:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002524:	2303      	movs	r3, #3
 8002526:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002528:	2300      	movs	r3, #0
 800252a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800252c:	2300      	movs	r3, #0
 800252e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002530:	2300      	movs	r3, #0
 8002532:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002534:	463b      	mov	r3, r7
 8002536:	2101      	movs	r1, #1
 8002538:	4618      	mov	r0, r3
 800253a:	f002 fab5 	bl	8004aa8 <HAL_RCC_ClockConfig>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002544:	f000 f9e2 	bl	800290c <Error_Handler>
  }
}
 8002548:	bf00      	nop
 800254a:	3748      	adds	r7, #72	@ 0x48
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40007000 	.word	0x40007000

08002554 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* TIM11_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM11_IRQn, 0, 1);
 8002558:	2201      	movs	r2, #1
 800255a:	2100      	movs	r1, #0
 800255c:	201b      	movs	r0, #27
 800255e:	f000 febe 	bl	80032de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8002562:	201b      	movs	r0, #27
 8002564:	f000 fed7 	bl	8003316 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002568:	2200      	movs	r2, #0
 800256a:	2100      	movs	r1, #0
 800256c:	2028      	movs	r0, #40	@ 0x28
 800256e:	f000 feb6 	bl	80032de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002572:	2028      	movs	r0, #40	@ 0x28
 8002574:	f000 fecf 	bl	8003316 <HAL_NVIC_EnableIRQ>
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002578:	2200      	movs	r2, #0
 800257a:	2100      	movs	r1, #0
 800257c:	2006      	movs	r0, #6
 800257e:	f000 feae 	bl	80032de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002582:	2006      	movs	r0, #6
 8002584:	f000 fec7 	bl	8003316 <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002588:	2200      	movs	r2, #0
 800258a:	2100      	movs	r1, #0
 800258c:	2009      	movs	r0, #9
 800258e:	f000 fea6 	bl	80032de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002592:	2009      	movs	r0, #9
 8002594:	f000 febf 	bl	8003316 <HAL_NVIC_EnableIRQ>
  /* EXTI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002598:	2200      	movs	r2, #0
 800259a:	2100      	movs	r1, #0
 800259c:	2008      	movs	r0, #8
 800259e:	f000 fe9e 	bl	80032de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80025a2:	2008      	movs	r0, #8
 80025a4:	f000 feb7 	bl	8003316 <HAL_NVIC_EnableIRQ>
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80025a8:	2200      	movs	r2, #0
 80025aa:	2100      	movs	r1, #0
 80025ac:	2007      	movs	r0, #7
 80025ae:	f000 fe96 	bl	80032de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80025b2:	2007      	movs	r0, #7
 80025b4:	f000 feaf 	bl	8003316 <HAL_NVIC_EnableIRQ>
  /* TIM10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM10_IRQn, 0, 1);
 80025b8:	2201      	movs	r2, #1
 80025ba:	2100      	movs	r1, #0
 80025bc:	201a      	movs	r0, #26
 80025be:	f000 fe8e 	bl	80032de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM10_IRQn);
 80025c2:	201a      	movs	r0, #26
 80025c4:	f000 fea7 	bl	8003316 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80025c8:	2200      	movs	r2, #0
 80025ca:	2100      	movs	r1, #0
 80025cc:	2026      	movs	r0, #38	@ 0x26
 80025ce:	f000 fe86 	bl	80032de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025d2:	2026      	movs	r0, #38	@ 0x26
 80025d4:	f000 fe9f 	bl	8003316 <HAL_NVIC_EnableIRQ>
}
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==Front_Left.pinout_data.EncoderPin)//sprawdzam z którego pinu przyszło przerwanie i inkrementuję
 80025e6:	4b12      	ldr	r3, [pc, #72]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x54>)
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ea:	88fa      	ldrh	r2, [r7, #6]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d102      	bne.n	80025f6 <HAL_GPIO_EXTI_Callback+0x1a>
	{                                              //odpowiednią zmiennę od odpowiedniego koła
		PositionIncrement(&Front_Left);
 80025f0:	480f      	ldr	r0, [pc, #60]	@ (8002630 <HAL_GPIO_EXTI_Callback+0x54>)
 80025f2:	f7ff f9c3 	bl	800197c <PositionIncrement>
	}
	if(GPIO_Pin==Front_Right.pinout_data.EncoderPin)
 80025f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002634 <HAL_GPIO_EXTI_Callback+0x58>)
 80025f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025fa:	88fa      	ldrh	r2, [r7, #6]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d102      	bne.n	8002606 <HAL_GPIO_EXTI_Callback+0x2a>
	{
		PositionIncrement(&Front_Right);
 8002600:	480c      	ldr	r0, [pc, #48]	@ (8002634 <HAL_GPIO_EXTI_Callback+0x58>)
 8002602:	f7ff f9bb 	bl	800197c <PositionIncrement>
	}
	if(GPIO_Pin==Back_Left.pinout_data.EncoderPin)
 8002606:	4b0c      	ldr	r3, [pc, #48]	@ (8002638 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800260a:	88fa      	ldrh	r2, [r7, #6]
 800260c:	429a      	cmp	r2, r3
 800260e:	d102      	bne.n	8002616 <HAL_GPIO_EXTI_Callback+0x3a>
	{
		PositionIncrement(&Back_Left);
 8002610:	4809      	ldr	r0, [pc, #36]	@ (8002638 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002612:	f7ff f9b3 	bl	800197c <PositionIncrement>
	}
	if(GPIO_Pin==Back_Right.pinout_data.EncoderPin)
 8002616:	4b09      	ldr	r3, [pc, #36]	@ (800263c <HAL_GPIO_EXTI_Callback+0x60>)
 8002618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800261a:	88fa      	ldrh	r2, [r7, #6]
 800261c:	429a      	cmp	r2, r3
 800261e:	d102      	bne.n	8002626 <HAL_GPIO_EXTI_Callback+0x4a>
	{
		PositionIncrement(&Back_Right);
 8002620:	4806      	ldr	r0, [pc, #24]	@ (800263c <HAL_GPIO_EXTI_Callback+0x60>)
 8002622:	f7ff f9ab 	bl	800197c <PositionIncrement>
	}
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	200002a0 	.word	0x200002a0
 8002634:	20000248 	.word	0x20000248
 8002638:	20000350 	.word	0x20000350
 800263c:	200002f8 	.word	0x200002f8

08002640 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)//to callback od przerwania co określony czas
{
 8002640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002644:	b0b8      	sub	sp, #224	@ 0xe0
 8002646:	af10      	add	r7, sp, #64	@ 0x40
 8002648:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if(htim->Instance==TIM11)//sprawdzam czy przerwanie pochodzi z timera który mnie interesuje - przerwanie co 0.2s
 800264a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a8c      	ldr	r2, [pc, #560]	@ (8002880 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d123      	bne.n	800269c <HAL_TIM_PeriodElapsedCallback+0x5c>
	{
		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //to część kodu testujacego
		EncoderVelocity(&Front_Left);
 8002654:	488b      	ldr	r0, [pc, #556]	@ (8002884 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002656:	f7ff fa4b 	bl	8001af0 <EncoderVelocity>
		EncoderVelocity(&Front_Right);
 800265a:	488b      	ldr	r0, [pc, #556]	@ (8002888 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800265c:	f7ff fa48 	bl	8001af0 <EncoderVelocity>
		EncoderVelocity(&Back_Left);
 8002660:	488a      	ldr	r0, [pc, #552]	@ (800288c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002662:	f7ff fa45 	bl	8001af0 <EncoderVelocity>
		EncoderVelocity(&Back_Right);
 8002666:	488a      	ldr	r0, [pc, #552]	@ (8002890 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002668:	f7ff fa42 	bl	8001af0 <EncoderVelocity>

		SpeedRamp(&Front_Left);
 800266c:	4885      	ldr	r0, [pc, #532]	@ (8002884 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800266e:	f7ff fc2f 	bl	8001ed0 <SpeedRamp>
		SpeedRamp(&Front_Right);
 8002672:	4885      	ldr	r0, [pc, #532]	@ (8002888 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002674:	f7ff fc2c 	bl	8001ed0 <SpeedRamp>
		SpeedRamp(&Back_Left);
 8002678:	4884      	ldr	r0, [pc, #528]	@ (800288c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800267a:	f7ff fc29 	bl	8001ed0 <SpeedRamp>
		SpeedRamp(&Back_Right);
 800267e:	4884      	ldr	r0, [pc, #528]	@ (8002890 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002680:	f7ff fc26 	bl	8001ed0 <SpeedRamp>

		PID(&Front_Left);
 8002684:	487f      	ldr	r0, [pc, #508]	@ (8002884 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002686:	f7ff fb7b 	bl	8001d80 <PID>
		PID(&Front_Right);
 800268a:	487f      	ldr	r0, [pc, #508]	@ (8002888 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800268c:	f7ff fb78 	bl	8001d80 <PID>
		PID(&Back_Left);
 8002690:	487e      	ldr	r0, [pc, #504]	@ (800288c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002692:	f7ff fb75 	bl	8001d80 <PID>
		PID(&Back_Right);
 8002696:	487e      	ldr	r0, [pc, #504]	@ (8002890 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002698:	f7ff fb72 	bl	8001d80 <PID>

	}

	if(htim->Instance==TIM10)//sprawdzam czy przerwanie pochodzi z timera który mnie interesuje - przerwanie co 0.5s
 800269c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a7c      	ldr	r2, [pc, #496]	@ (8002894 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	f040 80e6 	bne.w	8002874 <HAL_TIM_PeriodElapsedCallback+0x234>
	{
		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //to część kodu testujacego
		//odczytuję informację z czujnika i przypisuję do odpowiedniego miejsca w strukturze
		Sensor_INA3221.Channel1.Current=INA3221_GetCurrentRaw(&ina3221, INA3221_CHANNEL_1);
 80026a8:	2100      	movs	r1, #0
 80026aa:	487b      	ldr	r0, [pc, #492]	@ (8002898 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80026ac:	f7fe ff8c 	bl	80015c8 <INA3221_GetCurrentRaw>
 80026b0:	4603      	mov	r3, r0
 80026b2:	4a7a      	ldr	r2, [pc, #488]	@ (800289c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80026b4:	6053      	str	r3, [r2, #4]
		Sensor_INA3221.Channel1.Voltage=INA3221_GetBusVoltage(&ina3221, INA3221_CHANNEL_1);
 80026b6:	2100      	movs	r1, #0
 80026b8:	4877      	ldr	r0, [pc, #476]	@ (8002898 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80026ba:	f7fe ff0d 	bl	80014d8 <INA3221_GetBusVoltage>
 80026be:	4603      	mov	r3, r0
 80026c0:	4a76      	ldr	r2, [pc, #472]	@ (800289c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80026c2:	6013      	str	r3, [r2, #0]
	    Sensor_INA3221.Channel2.Current=INA3221_GetCurrentRaw(&ina3221, INA3221_CHANNEL_2);
 80026c4:	2101      	movs	r1, #1
 80026c6:	4874      	ldr	r0, [pc, #464]	@ (8002898 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80026c8:	f7fe ff7e 	bl	80015c8 <INA3221_GetCurrentRaw>
 80026cc:	4603      	mov	r3, r0
 80026ce:	4a73      	ldr	r2, [pc, #460]	@ (800289c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80026d0:	60d3      	str	r3, [r2, #12]
	    Sensor_INA3221.Channel2.Voltage=INA3221_GetBusVoltage(&ina3221, INA3221_CHANNEL_2);
 80026d2:	2101      	movs	r1, #1
 80026d4:	4870      	ldr	r0, [pc, #448]	@ (8002898 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80026d6:	f7fe feff 	bl	80014d8 <INA3221_GetBusVoltage>
 80026da:	4603      	mov	r3, r0
 80026dc:	4a6f      	ldr	r2, [pc, #444]	@ (800289c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80026de:	6093      	str	r3, [r2, #8]
		Sensor_INA3221.Channel3.Current=INA3221_GetCurrentRaw(&ina3221, INA3221_CHANNEL_3);
 80026e0:	2102      	movs	r1, #2
 80026e2:	486d      	ldr	r0, [pc, #436]	@ (8002898 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80026e4:	f7fe ff70 	bl	80015c8 <INA3221_GetCurrentRaw>
 80026e8:	4603      	mov	r3, r0
 80026ea:	4a6c      	ldr	r2, [pc, #432]	@ (800289c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80026ec:	6153      	str	r3, [r2, #20]
		Sensor_INA3221.Channel3.Voltage=INA3221_GetBusVoltage(&ina3221, INA3221_CHANNEL_3);
 80026ee:	2102      	movs	r1, #2
 80026f0:	4869      	ldr	r0, [pc, #420]	@ (8002898 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80026f2:	f7fe fef1 	bl	80014d8 <INA3221_GetBusVoltage>
 80026f6:	4603      	mov	r3, r0
 80026f8:	4a68      	ldr	r2, [pc, #416]	@ (800289c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80026fa:	6113      	str	r3, [r2, #16]

		Sensor_INA3221.Power=Sensor_INA3221.Channel3.Voltage*Sensor_INA3221.Channel3.Current;//obliczam teraz moc w watach
 80026fc:	4b67      	ldr	r3, [pc, #412]	@ (800289c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	4a66      	ldr	r2, [pc, #408]	@ (800289c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002702:	6952      	ldr	r2, [r2, #20]
 8002704:	4611      	mov	r1, r2
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe fb34 	bl	8000d74 <__aeabi_fmul>
 800270c:	4603      	mov	r3, r0
 800270e:	461a      	mov	r2, r3
 8002710:	4b62      	ldr	r3, [pc, #392]	@ (800289c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002712:	619a      	str	r2, [r3, #24]
		Sensor_INA3221.TotalEnergy+=Sensor_INA3221.Power/7200;                        //teraz obliczam enegie zużytą w Wh
 8002714:	4b61      	ldr	r3, [pc, #388]	@ (800289c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002716:	69dc      	ldr	r4, [r3, #28]
 8002718:	4b60      	ldr	r3, [pc, #384]	@ (800289c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	4960      	ldr	r1, [pc, #384]	@ (80028a0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800271e:	4618      	mov	r0, r3
 8002720:	f7fe fbdc 	bl	8000edc <__aeabi_fdiv>
 8002724:	4603      	mov	r3, r0
 8002726:	4619      	mov	r1, r3
 8002728:	4620      	mov	r0, r4
 800272a:	f7fe fa1b 	bl	8000b64 <__addsf3>
 800272e:	4603      	mov	r3, r0
 8002730:	461a      	mov	r2, r3
 8002732:	4b5a      	ldr	r3, [pc, #360]	@ (800289c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002734:	61da      	str	r2, [r3, #28]
		//teraz wysyłanie informacj
		char Message[100];
		//to obroty kół na minutę
		float Velo=(abs(Front_Left.encoder_data.CurrentVelocity)+abs(Front_Right.encoder_data.CurrentVelocity)+
 8002736:	4b53      	ldr	r3, [pc, #332]	@ (8002884 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	4618      	mov	r0, r3
 800273c:	f7fe fce0 	bl	8001100 <__aeabi_f2iz>
 8002740:	4603      	mov	r3, r0
 8002742:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8002746:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 800274a:	4b4f      	ldr	r3, [pc, #316]	@ (8002888 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe fcd6 	bl	8001100 <__aeabi_f2iz>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	bfb8      	it	lt
 800275a:	425b      	neglt	r3, r3
 800275c:	441c      	add	r4, r3
				abs(Back_Left.encoder_data.CurrentVelocity)+abs(Back_Right.encoder_data.CurrentVelocity))*15/54;
 800275e:	4b4b      	ldr	r3, [pc, #300]	@ (800288c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe fccc 	bl	8001100 <__aeabi_f2iz>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	bfb8      	it	lt
 800276e:	425b      	neglt	r3, r3
		float Velo=(abs(Front_Left.encoder_data.CurrentVelocity)+abs(Front_Right.encoder_data.CurrentVelocity)+
 8002770:	441c      	add	r4, r3
				abs(Back_Left.encoder_data.CurrentVelocity)+abs(Back_Right.encoder_data.CurrentVelocity))*15/54;
 8002772:	4b47      	ldr	r3, [pc, #284]	@ (8002890 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe fcc2 	bl	8001100 <__aeabi_f2iz>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	bfb8      	it	lt
 8002782:	425b      	neglt	r3, r3
 8002784:	18e2      	adds	r2, r4, r3
 8002786:	4613      	mov	r3, r2
 8002788:	011b      	lsls	r3, r3, #4
 800278a:	1a9b      	subs	r3, r3, r2
 800278c:	4a45      	ldr	r2, [pc, #276]	@ (80028a4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800278e:	fb82 1203 	smull	r1, r2, r2, r3
 8002792:	1112      	asrs	r2, r2, #4
 8002794:	17db      	asrs	r3, r3, #31
 8002796:	1ad3      	subs	r3, r2, r3
		float Velo=(abs(Front_Left.encoder_data.CurrentVelocity)+abs(Front_Right.encoder_data.CurrentVelocity)+
 8002798:	4618      	mov	r0, r3
 800279a:	f7fe fa97 	bl	8000ccc <__aeabi_i2f>
 800279e:	4603      	mov	r3, r0
 80027a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		int Lenght = sprintf((char*)Message,"V=%.2f,C1=%.2f,N1=%.2f,C2=%.2f,N2=%.2f,C3=%.2f,N3=%.2f,P=%.2f,E=%.2f\n\r",Velo
 80027a4:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80027a8:	f7fd fe56 	bl	8000458 <__aeabi_f2d>
 80027ac:	e9c7 0108 	strd	r0, r1, [r7, #32]
			,Sensor_INA3221.Channel1.Current,Sensor_INA3221.Channel1.Voltage,Sensor_INA3221.Channel2.Current,
 80027b0:	4b3a      	ldr	r3, [pc, #232]	@ (800289c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80027b2:	685b      	ldr	r3, [r3, #4]
		int Lenght = sprintf((char*)Message,"V=%.2f,C1=%.2f,N1=%.2f,C2=%.2f,N2=%.2f,C3=%.2f,N3=%.2f,P=%.2f,E=%.2f\n\r",Velo
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fd fe4f 	bl	8000458 <__aeabi_f2d>
 80027ba:	e9c7 0106 	strd	r0, r1, [r7, #24]
			,Sensor_INA3221.Channel1.Current,Sensor_INA3221.Channel1.Voltage,Sensor_INA3221.Channel2.Current,
 80027be:	4b37      	ldr	r3, [pc, #220]	@ (800289c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
		int Lenght = sprintf((char*)Message,"V=%.2f,C1=%.2f,N1=%.2f,C2=%.2f,N2=%.2f,C3=%.2f,N3=%.2f,P=%.2f,E=%.2f\n\r",Velo
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fd fe48 	bl	8000458 <__aeabi_f2d>
 80027c8:	e9c7 0104 	strd	r0, r1, [r7, #16]
			,Sensor_INA3221.Channel1.Current,Sensor_INA3221.Channel1.Voltage,Sensor_INA3221.Channel2.Current,
 80027cc:	4b33      	ldr	r3, [pc, #204]	@ (800289c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80027ce:	68db      	ldr	r3, [r3, #12]
		int Lenght = sprintf((char*)Message,"V=%.2f,C1=%.2f,N1=%.2f,C2=%.2f,N2=%.2f,C3=%.2f,N3=%.2f,P=%.2f,E=%.2f\n\r",Velo
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fd fe41 	bl	8000458 <__aeabi_f2d>
 80027d6:	e9c7 0102 	strd	r0, r1, [r7, #8]
			Sensor_INA3221.Channel2.Voltage,Sensor_INA3221.Channel3.Current,Sensor_INA3221.Channel3.Voltage,
 80027da:	4b30      	ldr	r3, [pc, #192]	@ (800289c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80027dc:	689b      	ldr	r3, [r3, #8]
		int Lenght = sprintf((char*)Message,"V=%.2f,C1=%.2f,N1=%.2f,C2=%.2f,N2=%.2f,C3=%.2f,N3=%.2f,P=%.2f,E=%.2f\n\r",Velo
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fd fe3a 	bl	8000458 <__aeabi_f2d>
 80027e4:	e9c7 0100 	strd	r0, r1, [r7]
			Sensor_INA3221.Channel2.Voltage,Sensor_INA3221.Channel3.Current,Sensor_INA3221.Channel3.Voltage,
 80027e8:	4b2c      	ldr	r3, [pc, #176]	@ (800289c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80027ea:	695b      	ldr	r3, [r3, #20]
		int Lenght = sprintf((char*)Message,"V=%.2f,C1=%.2f,N1=%.2f,C2=%.2f,N2=%.2f,C3=%.2f,N3=%.2f,P=%.2f,E=%.2f\n\r",Velo
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fd fe33 	bl	8000458 <__aeabi_f2d>
 80027f2:	4682      	mov	sl, r0
 80027f4:	468b      	mov	fp, r1
			Sensor_INA3221.Channel2.Voltage,Sensor_INA3221.Channel3.Current,Sensor_INA3221.Channel3.Voltage,
 80027f6:	4b29      	ldr	r3, [pc, #164]	@ (800289c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80027f8:	691b      	ldr	r3, [r3, #16]
		int Lenght = sprintf((char*)Message,"V=%.2f,C1=%.2f,N1=%.2f,C2=%.2f,N2=%.2f,C3=%.2f,N3=%.2f,P=%.2f,E=%.2f\n\r",Velo
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fd fe2c 	bl	8000458 <__aeabi_f2d>
 8002800:	4680      	mov	r8, r0
 8002802:	4689      	mov	r9, r1
			Sensor_INA3221.Power,Sensor_INA3221.TotalEnergy);
 8002804:	4b25      	ldr	r3, [pc, #148]	@ (800289c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002806:	699b      	ldr	r3, [r3, #24]
		int Lenght = sprintf((char*)Message,"V=%.2f,C1=%.2f,N1=%.2f,C2=%.2f,N2=%.2f,C3=%.2f,N3=%.2f,P=%.2f,E=%.2f\n\r",Velo
 8002808:	4618      	mov	r0, r3
 800280a:	f7fd fe25 	bl	8000458 <__aeabi_f2d>
 800280e:	4604      	mov	r4, r0
 8002810:	460d      	mov	r5, r1
			Sensor_INA3221.Power,Sensor_INA3221.TotalEnergy);
 8002812:	4b22      	ldr	r3, [pc, #136]	@ (800289c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002814:	69db      	ldr	r3, [r3, #28]
		int Lenght = sprintf((char*)Message,"V=%.2f,C1=%.2f,N1=%.2f,C2=%.2f,N2=%.2f,C3=%.2f,N3=%.2f,P=%.2f,E=%.2f\n\r",Velo
 8002816:	4618      	mov	r0, r3
 8002818:	f7fd fe1e 	bl	8000458 <__aeabi_f2d>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8002824:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 8002828:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
 800282c:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 8002830:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8002834:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002838:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800283c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002840:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002844:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002848:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800284c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002850:	e9cd 3400 	strd	r3, r4, [sp]
 8002854:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002858:	4913      	ldr	r1, [pc, #76]	@ (80028a8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800285a:	f004 fd93 	bl	8007384 <siprintf>
 800285e:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
		HAL_UART_Transmit_IT(&huart2, Message, Lenght);
 8002862:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002866:	b29a      	uxth	r2, r3
 8002868:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800286c:	4619      	mov	r1, r3
 800286e:	480f      	ldr	r0, [pc, #60]	@ (80028ac <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002870:	f003 faa8 	bl	8005dc4 <HAL_UART_Transmit_IT>
	}
}
 8002874:	bf00      	nop
 8002876:	37a0      	adds	r7, #160	@ 0xa0
 8002878:	46bd      	mov	sp, r7
 800287a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800287e:	bf00      	nop
 8002880:	40011000 	.word	0x40011000
 8002884:	200002a0 	.word	0x200002a0
 8002888:	20000248 	.word	0x20000248
 800288c:	20000350 	.word	0x20000350
 8002890:	200002f8 	.word	0x200002f8
 8002894:	40010c00 	.word	0x40010c00
 8002898:	200003ec 	.word	0x200003ec
 800289c:	200003a8 	.word	0x200003a8
 80028a0:	45e10000 	.word	0x45e10000
 80028a4:	4bda12f7 	.word	0x4bda12f7
 80028a8:	08009608 	.word	0x08009608
 80028ac:	200004d0 	.word	0x200004d0

080028b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af02      	add	r7, sp, #8
 80028b6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0b      	ldr	r2, [pc, #44]	@ (80028ec <HAL_UART_RxCpltCallback+0x3c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d110      	bne.n	80028e4 <HAL_UART_RxCpltCallback+0x34>
		{
		  HAL_UART_Receive_IT(&huart2, &znak,1);
 80028c2:	2201      	movs	r2, #1
 80028c4:	490a      	ldr	r1, [pc, #40]	@ (80028f0 <HAL_UART_RxCpltCallback+0x40>)
 80028c6:	480b      	ldr	r0, [pc, #44]	@ (80028f4 <HAL_UART_RxCpltCallback+0x44>)
 80028c8:	f003 fab1 	bl	8005e2e <HAL_UART_Receive_IT>
			  speed=ReadInfoFromUart(znak, &Front_Left, &Front_Right, &Back_Left, &Back_Right);
 80028cc:	4b08      	ldr	r3, [pc, #32]	@ (80028f0 <HAL_UART_RxCpltCallback+0x40>)
 80028ce:	7818      	ldrb	r0, [r3, #0]
 80028d0:	4b09      	ldr	r3, [pc, #36]	@ (80028f8 <HAL_UART_RxCpltCallback+0x48>)
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	4b09      	ldr	r3, [pc, #36]	@ (80028fc <HAL_UART_RxCpltCallback+0x4c>)
 80028d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002900 <HAL_UART_RxCpltCallback+0x50>)
 80028d8:	490a      	ldr	r1, [pc, #40]	@ (8002904 <HAL_UART_RxCpltCallback+0x54>)
 80028da:	f7ff fbe3 	bl	80020a4 <ReadInfoFromUart>
 80028de:	4603      	mov	r3, r0
 80028e0:	4a09      	ldr	r2, [pc, #36]	@ (8002908 <HAL_UART_RxCpltCallback+0x58>)
 80028e2:	6013      	str	r3, [r2, #0]
		}

}
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40004400 	.word	0x40004400
 80028f0:	20000000 	.word	0x20000000
 80028f4:	200004d0 	.word	0x200004d0
 80028f8:	200002f8 	.word	0x200002f8
 80028fc:	20000350 	.word	0x20000350
 8002900:	20000248 	.word	0x20000248
 8002904:	200002a0 	.word	0x200002a0
 8002908:	200003c8 	.word	0x200003c8

0800290c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002910:	b672      	cpsid	i
}
 8002912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002914:	bf00      	nop
 8002916:	e7fd      	b.n	8002914 <Error_Handler+0x8>

08002918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800291e:	4b15      	ldr	r3, [pc, #84]	@ (8002974 <HAL_MspInit+0x5c>)
 8002920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002922:	4a14      	ldr	r2, [pc, #80]	@ (8002974 <HAL_MspInit+0x5c>)
 8002924:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002928:	6253      	str	r3, [r2, #36]	@ 0x24
 800292a:	4b12      	ldr	r3, [pc, #72]	@ (8002974 <HAL_MspInit+0x5c>)
 800292c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002936:	4b0f      	ldr	r3, [pc, #60]	@ (8002974 <HAL_MspInit+0x5c>)
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	4a0e      	ldr	r2, [pc, #56]	@ (8002974 <HAL_MspInit+0x5c>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	6213      	str	r3, [r2, #32]
 8002942:	4b0c      	ldr	r3, [pc, #48]	@ (8002974 <HAL_MspInit+0x5c>)
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800294e:	4b09      	ldr	r3, [pc, #36]	@ (8002974 <HAL_MspInit+0x5c>)
 8002950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002952:	4a08      	ldr	r2, [pc, #32]	@ (8002974 <HAL_MspInit+0x5c>)
 8002954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002958:	6253      	str	r3, [r2, #36]	@ 0x24
 800295a:	4b06      	ldr	r3, [pc, #24]	@ (8002974 <HAL_MspInit+0x5c>)
 800295c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002962:	607b      	str	r3, [r7, #4]
 8002964:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002966:	2007      	movs	r0, #7
 8002968:	f000 fcae 	bl	80032c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800296c:	bf00      	nop
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40023800 	.word	0x40023800

08002978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800297c:	bf00      	nop
 800297e:	e7fd      	b.n	800297c <NMI_Handler+0x4>

08002980 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002984:	bf00      	nop
 8002986:	e7fd      	b.n	8002984 <HardFault_Handler+0x4>

08002988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800298c:	bf00      	nop
 800298e:	e7fd      	b.n	800298c <MemManage_Handler+0x4>

08002990 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002994:	bf00      	nop
 8002996:	e7fd      	b.n	8002994 <BusFault_Handler+0x4>

08002998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800299c:	bf00      	nop
 800299e:	e7fd      	b.n	800299c <UsageFault_Handler+0x4>

080029a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr

080029b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029c8:	f000 fb96 	bl	80030f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029cc:	bf00      	nop
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EN_1_Pin);
 80029d4:	2001      	movs	r0, #1
 80029d6:	f000 fedf 	bl	8003798 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}

080029de <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EN_2_Pin);
 80029e2:	2002      	movs	r0, #2
 80029e4:	f000 fed8 	bl	8003798 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80029e8:	bf00      	nop
 80029ea:	bd80      	pop	{r7, pc}

080029ec <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EN_3_Pin);
 80029f0:	2004      	movs	r0, #4
 80029f2:	f000 fed1 	bl	8003798 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}

080029fa <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EN_4_Pin);
 80029fe:	2008      	movs	r0, #8
 8002a00:	f000 feca 	bl	8003798 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002a04:	bf00      	nop
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <TIM10_IRQHandler>:

/**
  * @brief This function handles TIM10 global interrupt.
  */
void TIM10_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM10_IRQn 0 */

  /* USER CODE END TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002a0c:	4802      	ldr	r0, [pc, #8]	@ (8002a18 <TIM10_IRQHandler+0x10>)
 8002a0e:	f002 fc81 	bl	8005314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM10_IRQn 1 */

  /* USER CODE END TIM10_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20000450 	.word	0x20000450

08002a1c <TIM11_IRQHandler>:

/**
  * @brief This function handles TIM11 global interrupt.
  */
void TIM11_IRQHandler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM11_IRQn 0 */

  /* USER CODE END TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002a20:	4802      	ldr	r0, [pc, #8]	@ (8002a2c <TIM11_IRQHandler+0x10>)
 8002a22:	f002 fc77 	bl	8005314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM11_IRQn 1 */

  /* USER CODE END TIM11_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000490 	.word	0x20000490

08002a30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a34:	4802      	ldr	r0, [pc, #8]	@ (8002a40 <USART2_IRQHandler+0x10>)
 8002a36:	f003 fa1f 	bl	8005e78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	200004d0 	.word	0x200004d0

08002a44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002a48:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002a4c:	f000 fea4 	bl	8003798 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a50:	bf00      	nop
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return 1;
 8002a58:	2301      	movs	r3, #1
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr

08002a62 <_kill>:

int _kill(int pid, int sig)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b082      	sub	sp, #8
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a6c:	f004 fd40 	bl	80074f0 <__errno>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2216      	movs	r2, #22
 8002a74:	601a      	str	r2, [r3, #0]
  return -1;
 8002a76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <_exit>:

void _exit (int status)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a8a:	f04f 31ff 	mov.w	r1, #4294967295
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff ffe7 	bl	8002a62 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a94:	bf00      	nop
 8002a96:	e7fd      	b.n	8002a94 <_exit+0x12>

08002a98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	e00a      	b.n	8002ac0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002aaa:	f3af 8000 	nop.w
 8002aae:	4601      	mov	r1, r0
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	60ba      	str	r2, [r7, #8]
 8002ab6:	b2ca      	uxtb	r2, r1
 8002ab8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	3301      	adds	r3, #1
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	dbf0      	blt.n	8002aaa <_read+0x12>
  }

  return len;
 8002ac8:	687b      	ldr	r3, [r7, #4]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b086      	sub	sp, #24
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	e009      	b.n	8002af8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	60ba      	str	r2, [r7, #8]
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	3301      	adds	r3, #1
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	dbf1      	blt.n	8002ae4 <_write+0x12>
  }
  return len;
 8002b00:	687b      	ldr	r3, [r7, #4]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <_close>:

int _close(int file)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b30:	605a      	str	r2, [r3, #4]
  return 0;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <_isatty>:

int _isatty(int file)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b46:	2301      	movs	r3, #1
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr

08002b52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b085      	sub	sp, #20
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr
	...

08002b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b74:	4a14      	ldr	r2, [pc, #80]	@ (8002bc8 <_sbrk+0x5c>)
 8002b76:	4b15      	ldr	r3, [pc, #84]	@ (8002bcc <_sbrk+0x60>)
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b80:	4b13      	ldr	r3, [pc, #76]	@ (8002bd0 <_sbrk+0x64>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d102      	bne.n	8002b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b88:	4b11      	ldr	r3, [pc, #68]	@ (8002bd0 <_sbrk+0x64>)
 8002b8a:	4a12      	ldr	r2, [pc, #72]	@ (8002bd4 <_sbrk+0x68>)
 8002b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b8e:	4b10      	ldr	r3, [pc, #64]	@ (8002bd0 <_sbrk+0x64>)
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4413      	add	r3, r2
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d207      	bcs.n	8002bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b9c:	f004 fca8 	bl	80074f0 <__errno>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	220c      	movs	r2, #12
 8002ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8002baa:	e009      	b.n	8002bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bac:	4b08      	ldr	r3, [pc, #32]	@ (8002bd0 <_sbrk+0x64>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bb2:	4b07      	ldr	r3, [pc, #28]	@ (8002bd0 <_sbrk+0x64>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4413      	add	r3, r2
 8002bba:	4a05      	ldr	r2, [pc, #20]	@ (8002bd0 <_sbrk+0x64>)
 8002bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20014000 	.word	0x20014000
 8002bcc:	00001000 	.word	0x00001000
 8002bd0:	2000040c 	.word	0x2000040c
 8002bd4:	20000668 	.word	0x20000668

08002bd8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bdc:	bf00      	nop
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08a      	sub	sp, #40	@ 0x28
 8002be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bea:	f107 0318 	add.w	r3, r7, #24
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	605a      	str	r2, [r3, #4]
 8002bf4:	609a      	str	r2, [r3, #8]
 8002bf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bf8:	f107 0310 	add.w	r3, r7, #16
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c02:	463b      	mov	r3, r7
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c0e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d04 <MX_TIM3_Init+0x120>)
 8002c10:	4a3d      	ldr	r2, [pc, #244]	@ (8002d08 <MX_TIM3_Init+0x124>)
 8002c12:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8002c14:	4b3b      	ldr	r3, [pc, #236]	@ (8002d04 <MX_TIM3_Init+0x120>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c1a:	4b3a      	ldr	r3, [pc, #232]	@ (8002d04 <MX_TIM3_Init+0x120>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002c20:	4b38      	ldr	r3, [pc, #224]	@ (8002d04 <MX_TIM3_Init+0x120>)
 8002c22:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002c26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c28:	4b36      	ldr	r3, [pc, #216]	@ (8002d04 <MX_TIM3_Init+0x120>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c2e:	4b35      	ldr	r3, [pc, #212]	@ (8002d04 <MX_TIM3_Init+0x120>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c34:	4833      	ldr	r0, [pc, #204]	@ (8002d04 <MX_TIM3_Init+0x120>)
 8002c36:	f002 f9fd 	bl	8005034 <HAL_TIM_Base_Init>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8002c40:	f7ff fe64 	bl	800290c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c48:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c4a:	f107 0318 	add.w	r3, r7, #24
 8002c4e:	4619      	mov	r1, r3
 8002c50:	482c      	ldr	r0, [pc, #176]	@ (8002d04 <MX_TIM3_Init+0x120>)
 8002c52:	f002 fcfd 	bl	8005650 <HAL_TIM_ConfigClockSource>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002c5c:	f7ff fe56 	bl	800290c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c60:	4828      	ldr	r0, [pc, #160]	@ (8002d04 <MX_TIM3_Init+0x120>)
 8002c62:	f002 fa79 	bl	8005158 <HAL_TIM_PWM_Init>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002c6c:	f7ff fe4e 	bl	800290c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c70:	2300      	movs	r3, #0
 8002c72:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c78:	f107 0310 	add.w	r3, r7, #16
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4821      	ldr	r0, [pc, #132]	@ (8002d04 <MX_TIM3_Init+0x120>)
 8002c80:	f002 fff2 	bl	8005c68 <HAL_TIMEx_MasterConfigSynchronization>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8002c8a:	f7ff fe3f 	bl	800290c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002c8e:	2370      	movs	r3, #112	@ 0x70
 8002c90:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002c92:	2300      	movs	r3, #0
 8002c94:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c96:	2300      	movs	r3, #0
 8002c98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c9e:	463b      	mov	r3, r7
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4817      	ldr	r0, [pc, #92]	@ (8002d04 <MX_TIM3_Init+0x120>)
 8002ca6:	f002 fc11 	bl	80054cc <HAL_TIM_PWM_ConfigChannel>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8002cb0:	f7ff fe2c 	bl	800290c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002cb4:	463b      	mov	r3, r7
 8002cb6:	2204      	movs	r2, #4
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4812      	ldr	r0, [pc, #72]	@ (8002d04 <MX_TIM3_Init+0x120>)
 8002cbc:	f002 fc06 	bl	80054cc <HAL_TIM_PWM_ConfigChannel>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8002cc6:	f7ff fe21 	bl	800290c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002cca:	463b      	mov	r3, r7
 8002ccc:	2208      	movs	r2, #8
 8002cce:	4619      	mov	r1, r3
 8002cd0:	480c      	ldr	r0, [pc, #48]	@ (8002d04 <MX_TIM3_Init+0x120>)
 8002cd2:	f002 fbfb 	bl	80054cc <HAL_TIM_PWM_ConfigChannel>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8002cdc:	f7ff fe16 	bl	800290c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ce0:	463b      	mov	r3, r7
 8002ce2:	220c      	movs	r2, #12
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4807      	ldr	r0, [pc, #28]	@ (8002d04 <MX_TIM3_Init+0x120>)
 8002ce8:	f002 fbf0 	bl	80054cc <HAL_TIM_PWM_ConfigChannel>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 8002cf2:	f7ff fe0b 	bl	800290c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002cf6:	4803      	ldr	r0, [pc, #12]	@ (8002d04 <MX_TIM3_Init+0x120>)
 8002cf8:	f000 f8c2 	bl	8002e80 <HAL_TIM_MspPostInit>

}
 8002cfc:	bf00      	nop
 8002cfe:	3728      	adds	r7, #40	@ 0x28
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20000410 	.word	0x20000410
 8002d08:	40000400 	.word	0x40000400

08002d0c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d12:	463b      	mov	r3, r7
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002d1e:	4b16      	ldr	r3, [pc, #88]	@ (8002d78 <MX_TIM10_Init+0x6c>)
 8002d20:	4a16      	ldr	r2, [pc, #88]	@ (8002d7c <MX_TIM10_Init+0x70>)
 8002d22:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 639;
 8002d24:	4b14      	ldr	r3, [pc, #80]	@ (8002d78 <MX_TIM10_Init+0x6c>)
 8002d26:	f240 227f 	movw	r2, #639	@ 0x27f
 8002d2a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d2c:	4b12      	ldr	r3, [pc, #72]	@ (8002d78 <MX_TIM10_Init+0x6c>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 24999;
 8002d32:	4b11      	ldr	r3, [pc, #68]	@ (8002d78 <MX_TIM10_Init+0x6c>)
 8002d34:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8002d38:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d78 <MX_TIM10_Init+0x6c>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d40:	4b0d      	ldr	r3, [pc, #52]	@ (8002d78 <MX_TIM10_Init+0x6c>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002d46:	480c      	ldr	r0, [pc, #48]	@ (8002d78 <MX_TIM10_Init+0x6c>)
 8002d48:	f002 f974 	bl	8005034 <HAL_TIM_Base_Init>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <MX_TIM10_Init+0x4a>
  {
    Error_Handler();
 8002d52:	f7ff fddb 	bl	800290c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d5a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 8002d5c:	463b      	mov	r3, r7
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4805      	ldr	r0, [pc, #20]	@ (8002d78 <MX_TIM10_Init+0x6c>)
 8002d62:	f002 fc75 	bl	8005650 <HAL_TIM_ConfigClockSource>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <MX_TIM10_Init+0x64>
  {
    Error_Handler();
 8002d6c:	f7ff fdce 	bl	800290c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002d70:	bf00      	nop
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20000450 	.word	0x20000450
 8002d7c:	40010c00 	.word	0x40010c00

08002d80 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d86:	463b      	mov	r3, r7
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002d92:	4b16      	ldr	r3, [pc, #88]	@ (8002dec <MX_TIM11_Init+0x6c>)
 8002d94:	4a16      	ldr	r2, [pc, #88]	@ (8002df0 <MX_TIM11_Init+0x70>)
 8002d96:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 639;
 8002d98:	4b14      	ldr	r3, [pc, #80]	@ (8002dec <MX_TIM11_Init+0x6c>)
 8002d9a:	f240 227f 	movw	r2, #639	@ 0x27f
 8002d9e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002da0:	4b12      	ldr	r3, [pc, #72]	@ (8002dec <MX_TIM11_Init+0x6c>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9999;
 8002da6:	4b11      	ldr	r3, [pc, #68]	@ (8002dec <MX_TIM11_Init+0x6c>)
 8002da8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002dac:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dae:	4b0f      	ldr	r3, [pc, #60]	@ (8002dec <MX_TIM11_Init+0x6c>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002db4:	4b0d      	ldr	r3, [pc, #52]	@ (8002dec <MX_TIM11_Init+0x6c>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002dba:	480c      	ldr	r0, [pc, #48]	@ (8002dec <MX_TIM11_Init+0x6c>)
 8002dbc:	f002 f93a 	bl	8005034 <HAL_TIM_Base_Init>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <MX_TIM11_Init+0x4a>
  {
    Error_Handler();
 8002dc6:	f7ff fda1 	bl	800290c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dce:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 8002dd0:	463b      	mov	r3, r7
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4805      	ldr	r0, [pc, #20]	@ (8002dec <MX_TIM11_Init+0x6c>)
 8002dd6:	f002 fc3b 	bl	8005650 <HAL_TIM_ConfigClockSource>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <MX_TIM11_Init+0x64>
  {
    Error_Handler();
 8002de0:	f7ff fd94 	bl	800290c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002de4:	bf00      	nop
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	20000490 	.word	0x20000490
 8002df0:	40011000 	.word	0x40011000

08002df4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a1b      	ldr	r2, [pc, #108]	@ (8002e70 <HAL_TIM_Base_MspInit+0x7c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d10c      	bne.n	8002e20 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e06:	4b1b      	ldr	r3, [pc, #108]	@ (8002e74 <HAL_TIM_Base_MspInit+0x80>)
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0a:	4a1a      	ldr	r2, [pc, #104]	@ (8002e74 <HAL_TIM_Base_MspInit+0x80>)
 8002e0c:	f043 0302 	orr.w	r3, r3, #2
 8002e10:	6253      	str	r3, [r2, #36]	@ 0x24
 8002e12:	4b18      	ldr	r3, [pc, #96]	@ (8002e74 <HAL_TIM_Base_MspInit+0x80>)
 8002e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002e1e:	e022      	b.n	8002e66 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM10)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a14      	ldr	r2, [pc, #80]	@ (8002e78 <HAL_TIM_Base_MspInit+0x84>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d10c      	bne.n	8002e44 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002e2a:	4b12      	ldr	r3, [pc, #72]	@ (8002e74 <HAL_TIM_Base_MspInit+0x80>)
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	4a11      	ldr	r2, [pc, #68]	@ (8002e74 <HAL_TIM_Base_MspInit+0x80>)
 8002e30:	f043 0308 	orr.w	r3, r3, #8
 8002e34:	6213      	str	r3, [r2, #32]
 8002e36:	4b0f      	ldr	r3, [pc, #60]	@ (8002e74 <HAL_TIM_Base_MspInit+0x80>)
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	693b      	ldr	r3, [r7, #16]
}
 8002e42:	e010      	b.n	8002e66 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM11)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a0c      	ldr	r2, [pc, #48]	@ (8002e7c <HAL_TIM_Base_MspInit+0x88>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d10b      	bne.n	8002e66 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002e4e:	4b09      	ldr	r3, [pc, #36]	@ (8002e74 <HAL_TIM_Base_MspInit+0x80>)
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	4a08      	ldr	r2, [pc, #32]	@ (8002e74 <HAL_TIM_Base_MspInit+0x80>)
 8002e54:	f043 0310 	orr.w	r3, r3, #16
 8002e58:	6213      	str	r3, [r2, #32]
 8002e5a:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <HAL_TIM_Base_MspInit+0x80>)
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	f003 0310 	and.w	r3, r3, #16
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	68fb      	ldr	r3, [r7, #12]
}
 8002e66:	bf00      	nop
 8002e68:	371c      	adds	r7, #28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr
 8002e70:	40000400 	.word	0x40000400
 8002e74:	40023800 	.word	0x40023800
 8002e78:	40010c00 	.word	0x40010c00
 8002e7c:	40011000 	.word	0x40011000

08002e80 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08a      	sub	sp, #40	@ 0x28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e88:	f107 0314 	add.w	r3, r7, #20
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	609a      	str	r2, [r3, #8]
 8002e94:	60da      	str	r2, [r3, #12]
 8002e96:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a1f      	ldr	r2, [pc, #124]	@ (8002f1c <HAL_TIM_MspPostInit+0x9c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d137      	bne.n	8002f12 <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8002f20 <HAL_TIM_MspPostInit+0xa0>)
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8002f20 <HAL_TIM_MspPostInit+0xa0>)
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	61d3      	str	r3, [r2, #28]
 8002eae:	4b1c      	ldr	r3, [pc, #112]	@ (8002f20 <HAL_TIM_MspPostInit+0xa0>)
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eba:	4b19      	ldr	r3, [pc, #100]	@ (8002f20 <HAL_TIM_MspPostInit+0xa0>)
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	4a18      	ldr	r2, [pc, #96]	@ (8002f20 <HAL_TIM_MspPostInit+0xa0>)
 8002ec0:	f043 0302 	orr.w	r3, r3, #2
 8002ec4:	61d3      	str	r3, [r2, #28]
 8002ec6:	4b16      	ldr	r3, [pc, #88]	@ (8002f20 <HAL_TIM_MspPostInit+0xa0>)
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ed2:	23c0      	movs	r3, #192	@ 0xc0
 8002ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee6:	f107 0314 	add.w	r3, r7, #20
 8002eea:	4619      	mov	r1, r3
 8002eec:	480d      	ldr	r0, [pc, #52]	@ (8002f24 <HAL_TIM_MspPostInit+0xa4>)
 8002eee:	f000 faab 	bl	8003448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efe:	2300      	movs	r3, #0
 8002f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f02:	2302      	movs	r3, #2
 8002f04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f06:	f107 0314 	add.w	r3, r7, #20
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4806      	ldr	r0, [pc, #24]	@ (8002f28 <HAL_TIM_MspPostInit+0xa8>)
 8002f0e:	f000 fa9b 	bl	8003448 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002f12:	bf00      	nop
 8002f14:	3728      	adds	r7, #40	@ 0x28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40000400 	.word	0x40000400
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40020000 	.word	0x40020000
 8002f28:	40020400 	.word	0x40020400

08002f2c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f30:	4b11      	ldr	r3, [pc, #68]	@ (8002f78 <MX_USART2_UART_Init+0x4c>)
 8002f32:	4a12      	ldr	r2, [pc, #72]	@ (8002f7c <MX_USART2_UART_Init+0x50>)
 8002f34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002f36:	4b10      	ldr	r3, [pc, #64]	@ (8002f78 <MX_USART2_UART_Init+0x4c>)
 8002f38:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002f3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f78 <MX_USART2_UART_Init+0x4c>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f44:	4b0c      	ldr	r3, [pc, #48]	@ (8002f78 <MX_USART2_UART_Init+0x4c>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f78 <MX_USART2_UART_Init+0x4c>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f50:	4b09      	ldr	r3, [pc, #36]	@ (8002f78 <MX_USART2_UART_Init+0x4c>)
 8002f52:	220c      	movs	r2, #12
 8002f54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f56:	4b08      	ldr	r3, [pc, #32]	@ (8002f78 <MX_USART2_UART_Init+0x4c>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f5c:	4b06      	ldr	r3, [pc, #24]	@ (8002f78 <MX_USART2_UART_Init+0x4c>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f62:	4805      	ldr	r0, [pc, #20]	@ (8002f78 <MX_USART2_UART_Init+0x4c>)
 8002f64:	f002 fede 	bl	8005d24 <HAL_UART_Init>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f6e:	f7ff fccd 	bl	800290c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f72:	bf00      	nop
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	200004d0 	.word	0x200004d0
 8002f7c:	40004400 	.word	0x40004400

08002f80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08a      	sub	sp, #40	@ 0x28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f88:	f107 0314 	add.w	r3, r7, #20
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	609a      	str	r2, [r3, #8]
 8002f94:	60da      	str	r2, [r3, #12]
 8002f96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a17      	ldr	r2, [pc, #92]	@ (8002ffc <HAL_UART_MspInit+0x7c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d127      	bne.n	8002ff2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fa2:	4b17      	ldr	r3, [pc, #92]	@ (8003000 <HAL_UART_MspInit+0x80>)
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa6:	4a16      	ldr	r2, [pc, #88]	@ (8003000 <HAL_UART_MspInit+0x80>)
 8002fa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fac:	6253      	str	r3, [r2, #36]	@ 0x24
 8002fae:	4b14      	ldr	r3, [pc, #80]	@ (8003000 <HAL_UART_MspInit+0x80>)
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb6:	613b      	str	r3, [r7, #16]
 8002fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fba:	4b11      	ldr	r3, [pc, #68]	@ (8003000 <HAL_UART_MspInit+0x80>)
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	4a10      	ldr	r2, [pc, #64]	@ (8003000 <HAL_UART_MspInit+0x80>)
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	61d3      	str	r3, [r2, #28]
 8002fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8003000 <HAL_UART_MspInit+0x80>)
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002fd2:	230c      	movs	r3, #12
 8002fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fe2:	2307      	movs	r3, #7
 8002fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe6:	f107 0314 	add.w	r3, r7, #20
 8002fea:	4619      	mov	r1, r3
 8002fec:	4805      	ldr	r0, [pc, #20]	@ (8003004 <HAL_UART_MspInit+0x84>)
 8002fee:	f000 fa2b 	bl	8003448 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002ff2:	bf00      	nop
 8002ff4:	3728      	adds	r7, #40	@ 0x28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40004400 	.word	0x40004400
 8003000:	40023800 	.word	0x40023800
 8003004:	40020000 	.word	0x40020000

08003008 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8003008:	f7ff fde6 	bl	8002bd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800300c:	480b      	ldr	r0, [pc, #44]	@ (800303c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800300e:	490c      	ldr	r1, [pc, #48]	@ (8003040 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003010:	4a0c      	ldr	r2, [pc, #48]	@ (8003044 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003014:	e002      	b.n	800301c <LoopCopyDataInit>

08003016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800301a:	3304      	adds	r3, #4

0800301c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800301c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800301e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003020:	d3f9      	bcc.n	8003016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003022:	4a09      	ldr	r2, [pc, #36]	@ (8003048 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003024:	4c09      	ldr	r4, [pc, #36]	@ (800304c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003028:	e001      	b.n	800302e <LoopFillZerobss>

0800302a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800302a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800302c:	3204      	adds	r2, #4

0800302e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800302e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003030:	d3fb      	bcc.n	800302a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003032:	f004 fa63 	bl	80074fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003036:	f7ff f991 	bl	800235c <main>
  bx lr
 800303a:	4770      	bx	lr
  ldr r0, =_sdata
 800303c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003040:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003044:	080099f8 	.word	0x080099f8
  ldr r2, =_sbss
 8003048:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800304c:	20000668 	.word	0x20000668

08003050 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003050:	e7fe      	b.n	8003050 <ADC1_IRQHandler>

08003052 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800305c:	2003      	movs	r0, #3
 800305e:	f000 f933 	bl	80032c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003062:	2000      	movs	r0, #0
 8003064:	f000 f80e 	bl	8003084 <HAL_InitTick>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	71fb      	strb	r3, [r7, #7]
 8003072:	e001      	b.n	8003078 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003074:	f7ff fc50 	bl	8002918 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003078:	79fb      	ldrb	r3, [r7, #7]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003090:	4b16      	ldr	r3, [pc, #88]	@ (80030ec <HAL_InitTick+0x68>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d022      	beq.n	80030de <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003098:	4b15      	ldr	r3, [pc, #84]	@ (80030f0 <HAL_InitTick+0x6c>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	4b13      	ldr	r3, [pc, #76]	@ (80030ec <HAL_InitTick+0x68>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80030a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 f940 	bl	8003332 <HAL_SYSTICK_Config>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10f      	bne.n	80030d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b0f      	cmp	r3, #15
 80030bc:	d809      	bhi.n	80030d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030be:	2200      	movs	r2, #0
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	f04f 30ff 	mov.w	r0, #4294967295
 80030c6:	f000 f90a 	bl	80032de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030ca:	4a0a      	ldr	r2, [pc, #40]	@ (80030f4 <HAL_InitTick+0x70>)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6013      	str	r3, [r2, #0]
 80030d0:	e007      	b.n	80030e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	73fb      	strb	r3, [r7, #15]
 80030d6:	e004      	b.n	80030e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	73fb      	strb	r3, [r7, #15]
 80030dc:	e001      	b.n	80030e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	2000000c 	.word	0x2000000c
 80030f0:	20000004 	.word	0x20000004
 80030f4:	20000008 	.word	0x20000008

080030f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030fc:	4b05      	ldr	r3, [pc, #20]	@ (8003114 <HAL_IncTick+0x1c>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	4b05      	ldr	r3, [pc, #20]	@ (8003118 <HAL_IncTick+0x20>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4413      	add	r3, r2
 8003106:	4a03      	ldr	r2, [pc, #12]	@ (8003114 <HAL_IncTick+0x1c>)
 8003108:	6013      	str	r3, [r2, #0]
}
 800310a:	bf00      	nop
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	20000518 	.word	0x20000518
 8003118:	2000000c 	.word	0x2000000c

0800311c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return uwTick;
 8003120:	4b02      	ldr	r3, [pc, #8]	@ (800312c <HAL_GetTick+0x10>)
 8003122:	681b      	ldr	r3, [r3, #0]
}
 8003124:	4618      	mov	r0, r3
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr
 800312c:	20000518 	.word	0x20000518

08003130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003140:	4b0c      	ldr	r3, [pc, #48]	@ (8003174 <__NVIC_SetPriorityGrouping+0x44>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800314c:	4013      	ands	r3, r2
 800314e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003158:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800315c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003162:	4a04      	ldr	r2, [pc, #16]	@ (8003174 <__NVIC_SetPriorityGrouping+0x44>)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	60d3      	str	r3, [r2, #12]
}
 8003168:	bf00      	nop
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800317c:	4b04      	ldr	r3, [pc, #16]	@ (8003190 <__NVIC_GetPriorityGrouping+0x18>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	0a1b      	lsrs	r3, r3, #8
 8003182:	f003 0307 	and.w	r3, r3, #7
}
 8003186:	4618      	mov	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800319e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	db0b      	blt.n	80031be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	f003 021f 	and.w	r2, r3, #31
 80031ac:	4906      	ldr	r1, [pc, #24]	@ (80031c8 <__NVIC_EnableIRQ+0x34>)
 80031ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	2001      	movs	r0, #1
 80031b6:	fa00 f202 	lsl.w	r2, r0, r2
 80031ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr
 80031c8:	e000e100 	.word	0xe000e100

080031cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	6039      	str	r1, [r7, #0]
 80031d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	db0a      	blt.n	80031f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	490c      	ldr	r1, [pc, #48]	@ (8003218 <__NVIC_SetPriority+0x4c>)
 80031e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ea:	0112      	lsls	r2, r2, #4
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	440b      	add	r3, r1
 80031f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031f4:	e00a      	b.n	800320c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	4908      	ldr	r1, [pc, #32]	@ (800321c <__NVIC_SetPriority+0x50>)
 80031fc:	79fb      	ldrb	r3, [r7, #7]
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	3b04      	subs	r3, #4
 8003204:	0112      	lsls	r2, r2, #4
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	440b      	add	r3, r1
 800320a:	761a      	strb	r2, [r3, #24]
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	e000e100 	.word	0xe000e100
 800321c:	e000ed00 	.word	0xe000ed00

08003220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003220:	b480      	push	{r7}
 8003222:	b089      	sub	sp, #36	@ 0x24
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f1c3 0307 	rsb	r3, r3, #7
 800323a:	2b04      	cmp	r3, #4
 800323c:	bf28      	it	cs
 800323e:	2304      	movcs	r3, #4
 8003240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	3304      	adds	r3, #4
 8003246:	2b06      	cmp	r3, #6
 8003248:	d902      	bls.n	8003250 <NVIC_EncodePriority+0x30>
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	3b03      	subs	r3, #3
 800324e:	e000      	b.n	8003252 <NVIC_EncodePriority+0x32>
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003254:	f04f 32ff 	mov.w	r2, #4294967295
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43da      	mvns	r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	401a      	ands	r2, r3
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003268:	f04f 31ff 	mov.w	r1, #4294967295
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	fa01 f303 	lsl.w	r3, r1, r3
 8003272:	43d9      	mvns	r1, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003278:	4313      	orrs	r3, r2
         );
}
 800327a:	4618      	mov	r0, r3
 800327c:	3724      	adds	r7, #36	@ 0x24
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr

08003284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3b01      	subs	r3, #1
 8003290:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003294:	d301      	bcc.n	800329a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003296:	2301      	movs	r3, #1
 8003298:	e00f      	b.n	80032ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800329a:	4a0a      	ldr	r2, [pc, #40]	@ (80032c4 <SysTick_Config+0x40>)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3b01      	subs	r3, #1
 80032a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032a2:	210f      	movs	r1, #15
 80032a4:	f04f 30ff 	mov.w	r0, #4294967295
 80032a8:	f7ff ff90 	bl	80031cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032ac:	4b05      	ldr	r3, [pc, #20]	@ (80032c4 <SysTick_Config+0x40>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032b2:	4b04      	ldr	r3, [pc, #16]	@ (80032c4 <SysTick_Config+0x40>)
 80032b4:	2207      	movs	r2, #7
 80032b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	e000e010 	.word	0xe000e010

080032c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff ff2d 	bl	8003130 <__NVIC_SetPriorityGrouping>
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b086      	sub	sp, #24
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	4603      	mov	r3, r0
 80032e6:	60b9      	str	r1, [r7, #8]
 80032e8:	607a      	str	r2, [r7, #4]
 80032ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032f0:	f7ff ff42 	bl	8003178 <__NVIC_GetPriorityGrouping>
 80032f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	68b9      	ldr	r1, [r7, #8]
 80032fa:	6978      	ldr	r0, [r7, #20]
 80032fc:	f7ff ff90 	bl	8003220 <NVIC_EncodePriority>
 8003300:	4602      	mov	r2, r0
 8003302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003306:	4611      	mov	r1, r2
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff ff5f 	bl	80031cc <__NVIC_SetPriority>
}
 800330e:	bf00      	nop
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b082      	sub	sp, #8
 800331a:	af00      	add	r7, sp, #0
 800331c:	4603      	mov	r3, r0
 800331e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff ff35 	bl	8003194 <__NVIC_EnableIRQ>
}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7ff ffa2 	bl	8003284 <SysTick_Config>
 8003340:	4603      	mov	r3, r0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800334a:	b480      	push	{r7}
 800334c:	b085      	sub	sp, #20
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d008      	beq.n	8003374 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2204      	movs	r2, #4
 8003366:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e022      	b.n	80033ba <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 020e 	bic.w	r2, r2, #14
 8003382:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0201 	bic.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003398:	f003 021c 	and.w	r2, r3, #28
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a0:	2101      	movs	r1, #1
 80033a2:	fa01 f202 	lsl.w	r2, r1, r2
 80033a6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr

080033c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d005      	beq.n	80033e8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2204      	movs	r2, #4
 80033e0:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	73fb      	strb	r3, [r7, #15]
 80033e6:	e029      	b.n	800343c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 020e 	bic.w	r2, r2, #14
 80033f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0201 	bic.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340c:	f003 021c 	and.w	r2, r3, #28
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003414:	2101      	movs	r1, #1
 8003416:	fa01 f202 	lsl.w	r2, r1, r2
 800341a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	4798      	blx	r3
    }
  }
  return status;
 800343c:	7bfb      	ldrb	r3, [r7, #15]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003452:	2300      	movs	r3, #0
 8003454:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800345a:	2300      	movs	r3, #0
 800345c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800345e:	e160      	b.n	8003722 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	2101      	movs	r1, #1
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	fa01 f303 	lsl.w	r3, r1, r3
 800346c:	4013      	ands	r3, r2
 800346e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 8152 	beq.w	800371c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	2b01      	cmp	r3, #1
 8003482:	d005      	beq.n	8003490 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800348c:	2b02      	cmp	r3, #2
 800348e:	d130      	bne.n	80034f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	2203      	movs	r2, #3
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4013      	ands	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	68da      	ldr	r2, [r3, #12]
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80034c6:	2201      	movs	r2, #1
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	43db      	mvns	r3, r3
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	4013      	ands	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	091b      	lsrs	r3, r3, #4
 80034dc:	f003 0201 	and.w	r2, r3, #1
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d017      	beq.n	800352e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	2203      	movs	r2, #3
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43db      	mvns	r3, r3
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4013      	ands	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d123      	bne.n	8003582 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	08da      	lsrs	r2, r3, #3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3208      	adds	r2, #8
 8003542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003546:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	220f      	movs	r2, #15
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43db      	mvns	r3, r3
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4013      	ands	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	691a      	ldr	r2, [r3, #16]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	08da      	lsrs	r2, r3, #3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3208      	adds	r2, #8
 800357c:	6939      	ldr	r1, [r7, #16]
 800357e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	2203      	movs	r2, #3
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43db      	mvns	r3, r3
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4013      	ands	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 0203 	and.w	r2, r3, #3
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 80ac 	beq.w	800371c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035c4:	4b5e      	ldr	r3, [pc, #376]	@ (8003740 <HAL_GPIO_Init+0x2f8>)
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	4a5d      	ldr	r2, [pc, #372]	@ (8003740 <HAL_GPIO_Init+0x2f8>)
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	6213      	str	r3, [r2, #32]
 80035d0:	4b5b      	ldr	r3, [pc, #364]	@ (8003740 <HAL_GPIO_Init+0x2f8>)
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80035dc:	4a59      	ldr	r2, [pc, #356]	@ (8003744 <HAL_GPIO_Init+0x2fc>)
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	089b      	lsrs	r3, r3, #2
 80035e2:	3302      	adds	r3, #2
 80035e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f003 0303 	and.w	r3, r3, #3
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	220f      	movs	r2, #15
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	43db      	mvns	r3, r3
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4013      	ands	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a51      	ldr	r2, [pc, #324]	@ (8003748 <HAL_GPIO_Init+0x300>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d025      	beq.n	8003654 <HAL_GPIO_Init+0x20c>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a50      	ldr	r2, [pc, #320]	@ (800374c <HAL_GPIO_Init+0x304>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d01f      	beq.n	8003650 <HAL_GPIO_Init+0x208>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a4f      	ldr	r2, [pc, #316]	@ (8003750 <HAL_GPIO_Init+0x308>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d019      	beq.n	800364c <HAL_GPIO_Init+0x204>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a4e      	ldr	r2, [pc, #312]	@ (8003754 <HAL_GPIO_Init+0x30c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d013      	beq.n	8003648 <HAL_GPIO_Init+0x200>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a4d      	ldr	r2, [pc, #308]	@ (8003758 <HAL_GPIO_Init+0x310>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d00d      	beq.n	8003644 <HAL_GPIO_Init+0x1fc>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a4c      	ldr	r2, [pc, #304]	@ (800375c <HAL_GPIO_Init+0x314>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d007      	beq.n	8003640 <HAL_GPIO_Init+0x1f8>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a4b      	ldr	r2, [pc, #300]	@ (8003760 <HAL_GPIO_Init+0x318>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d101      	bne.n	800363c <HAL_GPIO_Init+0x1f4>
 8003638:	2306      	movs	r3, #6
 800363a:	e00c      	b.n	8003656 <HAL_GPIO_Init+0x20e>
 800363c:	2307      	movs	r3, #7
 800363e:	e00a      	b.n	8003656 <HAL_GPIO_Init+0x20e>
 8003640:	2305      	movs	r3, #5
 8003642:	e008      	b.n	8003656 <HAL_GPIO_Init+0x20e>
 8003644:	2304      	movs	r3, #4
 8003646:	e006      	b.n	8003656 <HAL_GPIO_Init+0x20e>
 8003648:	2303      	movs	r3, #3
 800364a:	e004      	b.n	8003656 <HAL_GPIO_Init+0x20e>
 800364c:	2302      	movs	r3, #2
 800364e:	e002      	b.n	8003656 <HAL_GPIO_Init+0x20e>
 8003650:	2301      	movs	r3, #1
 8003652:	e000      	b.n	8003656 <HAL_GPIO_Init+0x20e>
 8003654:	2300      	movs	r3, #0
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	f002 0203 	and.w	r2, r2, #3
 800365c:	0092      	lsls	r2, r2, #2
 800365e:	4093      	lsls	r3, r2
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003666:	4937      	ldr	r1, [pc, #220]	@ (8003744 <HAL_GPIO_Init+0x2fc>)
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	089b      	lsrs	r3, r3, #2
 800366c:	3302      	adds	r3, #2
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003674:	4b3b      	ldr	r3, [pc, #236]	@ (8003764 <HAL_GPIO_Init+0x31c>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	43db      	mvns	r3, r3
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4013      	ands	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003698:	4a32      	ldr	r2, [pc, #200]	@ (8003764 <HAL_GPIO_Init+0x31c>)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800369e:	4b31      	ldr	r3, [pc, #196]	@ (8003764 <HAL_GPIO_Init+0x31c>)
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	43db      	mvns	r3, r3
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4013      	ands	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80036c2:	4a28      	ldr	r2, [pc, #160]	@ (8003764 <HAL_GPIO_Init+0x31c>)
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036c8:	4b26      	ldr	r3, [pc, #152]	@ (8003764 <HAL_GPIO_Init+0x31c>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	43db      	mvns	r3, r3
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4013      	ands	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80036ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003764 <HAL_GPIO_Init+0x31c>)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003764 <HAL_GPIO_Init+0x31c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	43db      	mvns	r3, r3
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	4013      	ands	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003716:	4a13      	ldr	r2, [pc, #76]	@ (8003764 <HAL_GPIO_Init+0x31c>)
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	3301      	adds	r3, #1
 8003720:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	fa22 f303 	lsr.w	r3, r2, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	f47f ae97 	bne.w	8003460 <HAL_GPIO_Init+0x18>
  }
}
 8003732:	bf00      	nop
 8003734:	bf00      	nop
 8003736:	371c      	adds	r7, #28
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40023800 	.word	0x40023800
 8003744:	40010000 	.word	0x40010000
 8003748:	40020000 	.word	0x40020000
 800374c:	40020400 	.word	0x40020400
 8003750:	40020800 	.word	0x40020800
 8003754:	40020c00 	.word	0x40020c00
 8003758:	40021000 	.word	0x40021000
 800375c:	40021400 	.word	0x40021400
 8003760:	40021800 	.word	0x40021800
 8003764:	40010400 	.word	0x40010400

08003768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	807b      	strh	r3, [r7, #2]
 8003774:	4613      	mov	r3, r2
 8003776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003778:	787b      	ldrb	r3, [r7, #1]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800377e:	887a      	ldrh	r2, [r7, #2]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8003784:	e003      	b.n	800378e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8003786:	887b      	ldrh	r3, [r7, #2]
 8003788:	041a      	lsls	r2, r3, #16
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	619a      	str	r2, [r3, #24]
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	bc80      	pop	{r7}
 8003796:	4770      	bx	lr

08003798 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	4603      	mov	r3, r0
 80037a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80037a2:	4b08      	ldr	r3, [pc, #32]	@ (80037c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037a4:	695a      	ldr	r2, [r3, #20]
 80037a6:	88fb      	ldrh	r3, [r7, #6]
 80037a8:	4013      	ands	r3, r2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d006      	beq.n	80037bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037ae:	4a05      	ldr	r2, [pc, #20]	@ (80037c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037b0:	88fb      	ldrh	r3, [r7, #6]
 80037b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037b4:	88fb      	ldrh	r3, [r7, #6]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fe ff10 	bl	80025dc <HAL_GPIO_EXTI_Callback>
  }
}
 80037bc:	bf00      	nop
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40010400 	.word	0x40010400

080037c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e12b      	b.n	8003a32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d106      	bne.n	80037f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7fd ffde 	bl	80017b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2224      	movs	r2, #36	@ 0x24
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0201 	bic.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800381a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800382a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800382c:	f001 fb7a 	bl	8004f24 <HAL_RCC_GetPCLK1Freq>
 8003830:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	4a81      	ldr	r2, [pc, #516]	@ (8003a3c <HAL_I2C_Init+0x274>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d807      	bhi.n	800384c <HAL_I2C_Init+0x84>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4a80      	ldr	r2, [pc, #512]	@ (8003a40 <HAL_I2C_Init+0x278>)
 8003840:	4293      	cmp	r3, r2
 8003842:	bf94      	ite	ls
 8003844:	2301      	movls	r3, #1
 8003846:	2300      	movhi	r3, #0
 8003848:	b2db      	uxtb	r3, r3
 800384a:	e006      	b.n	800385a <HAL_I2C_Init+0x92>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4a7d      	ldr	r2, [pc, #500]	@ (8003a44 <HAL_I2C_Init+0x27c>)
 8003850:	4293      	cmp	r3, r2
 8003852:	bf94      	ite	ls
 8003854:	2301      	movls	r3, #1
 8003856:	2300      	movhi	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e0e7      	b.n	8003a32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4a78      	ldr	r2, [pc, #480]	@ (8003a48 <HAL_I2C_Init+0x280>)
 8003866:	fba2 2303 	umull	r2, r3, r2, r3
 800386a:	0c9b      	lsrs	r3, r3, #18
 800386c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	430a      	orrs	r2, r1
 8003880:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	4a6a      	ldr	r2, [pc, #424]	@ (8003a3c <HAL_I2C_Init+0x274>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d802      	bhi.n	800389c <HAL_I2C_Init+0xd4>
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	3301      	adds	r3, #1
 800389a:	e009      	b.n	80038b0 <HAL_I2C_Init+0xe8>
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80038a2:	fb02 f303 	mul.w	r3, r2, r3
 80038a6:	4a69      	ldr	r2, [pc, #420]	@ (8003a4c <HAL_I2C_Init+0x284>)
 80038a8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ac:	099b      	lsrs	r3, r3, #6
 80038ae:	3301      	adds	r3, #1
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	430b      	orrs	r3, r1
 80038b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80038c2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	495c      	ldr	r1, [pc, #368]	@ (8003a3c <HAL_I2C_Init+0x274>)
 80038cc:	428b      	cmp	r3, r1
 80038ce:	d819      	bhi.n	8003904 <HAL_I2C_Init+0x13c>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	1e59      	subs	r1, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	fbb1 f3f3 	udiv	r3, r1, r3
 80038de:	1c59      	adds	r1, r3, #1
 80038e0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038e4:	400b      	ands	r3, r1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <HAL_I2C_Init+0x138>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	1e59      	subs	r1, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80038f8:	3301      	adds	r3, #1
 80038fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038fe:	e051      	b.n	80039a4 <HAL_I2C_Init+0x1dc>
 8003900:	2304      	movs	r3, #4
 8003902:	e04f      	b.n	80039a4 <HAL_I2C_Init+0x1dc>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d111      	bne.n	8003930 <HAL_I2C_Init+0x168>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	1e58      	subs	r0, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6859      	ldr	r1, [r3, #4]
 8003914:	460b      	mov	r3, r1
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	440b      	add	r3, r1
 800391a:	fbb0 f3f3 	udiv	r3, r0, r3
 800391e:	3301      	adds	r3, #1
 8003920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003924:	2b00      	cmp	r3, #0
 8003926:	bf0c      	ite	eq
 8003928:	2301      	moveq	r3, #1
 800392a:	2300      	movne	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	e012      	b.n	8003956 <HAL_I2C_Init+0x18e>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	1e58      	subs	r0, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6859      	ldr	r1, [r3, #4]
 8003938:	460b      	mov	r3, r1
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	0099      	lsls	r1, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	fbb0 f3f3 	udiv	r3, r0, r3
 8003946:	3301      	adds	r3, #1
 8003948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800394c:	2b00      	cmp	r3, #0
 800394e:	bf0c      	ite	eq
 8003950:	2301      	moveq	r3, #1
 8003952:	2300      	movne	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_I2C_Init+0x196>
 800395a:	2301      	movs	r3, #1
 800395c:	e022      	b.n	80039a4 <HAL_I2C_Init+0x1dc>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10e      	bne.n	8003984 <HAL_I2C_Init+0x1bc>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1e58      	subs	r0, r3, #1
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6859      	ldr	r1, [r3, #4]
 800396e:	460b      	mov	r3, r1
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	440b      	add	r3, r1
 8003974:	fbb0 f3f3 	udiv	r3, r0, r3
 8003978:	3301      	adds	r3, #1
 800397a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800397e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003982:	e00f      	b.n	80039a4 <HAL_I2C_Init+0x1dc>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	1e58      	subs	r0, r3, #1
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6859      	ldr	r1, [r3, #4]
 800398c:	460b      	mov	r3, r1
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	0099      	lsls	r1, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	fbb0 f3f3 	udiv	r3, r0, r3
 800399a:	3301      	adds	r3, #1
 800399c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	6809      	ldr	r1, [r1, #0]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69da      	ldr	r2, [r3, #28]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80039d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6911      	ldr	r1, [r2, #16]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	68d2      	ldr	r2, [r2, #12]
 80039de:	4311      	orrs	r1, r2
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	430b      	orrs	r3, r1
 80039e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	695a      	ldr	r2, [r3, #20]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0201 	orr.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	000186a0 	.word	0x000186a0
 8003a40:	001e847f 	.word	0x001e847f
 8003a44:	003d08ff 	.word	0x003d08ff
 8003a48:	431bde83 	.word	0x431bde83
 8003a4c:	10624dd3 	.word	0x10624dd3

08003a50 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08c      	sub	sp, #48	@ 0x30
 8003a54:	af02      	add	r7, sp, #8
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	4608      	mov	r0, r1
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	4603      	mov	r3, r0
 8003a60:	817b      	strh	r3, [r7, #10]
 8003a62:	460b      	mov	r3, r1
 8003a64:	813b      	strh	r3, [r7, #8]
 8003a66:	4613      	mov	r3, r2
 8003a68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a6a:	f7ff fb57 	bl	800311c <HAL_GetTick>
 8003a6e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	f040 8208 	bne.w	8003e8e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	2319      	movs	r3, #25
 8003a84:	2201      	movs	r2, #1
 8003a86:	497b      	ldr	r1, [pc, #492]	@ (8003c74 <HAL_I2C_Mem_Read+0x224>)
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 faef 	bl	800406c <I2C_WaitOnFlagUntilTimeout>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003a94:	2302      	movs	r3, #2
 8003a96:	e1fb      	b.n	8003e90 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d101      	bne.n	8003aa6 <HAL_I2C_Mem_Read+0x56>
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	e1f4      	b.n	8003e90 <HAL_I2C_Mem_Read+0x440>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d007      	beq.n	8003acc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0201 	orr.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ada:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2222      	movs	r2, #34	@ 0x22
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2240      	movs	r2, #64	@ 0x40
 8003ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003af6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003afc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4a5b      	ldr	r2, [pc, #364]	@ (8003c78 <HAL_I2C_Mem_Read+0x228>)
 8003b0c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b0e:	88f8      	ldrh	r0, [r7, #6]
 8003b10:	893a      	ldrh	r2, [r7, #8]
 8003b12:	8979      	ldrh	r1, [r7, #10]
 8003b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b16:	9301      	str	r3, [sp, #4]
 8003b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 f9bc 	bl	8003e9c <I2C_RequestMemoryRead>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e1b0      	b.n	8003e90 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d113      	bne.n	8003b5e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b36:	2300      	movs	r3, #0
 8003b38:	623b      	str	r3, [r7, #32]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	623b      	str	r3, [r7, #32]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	623b      	str	r3, [r7, #32]
 8003b4a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	e184      	b.n	8003e68 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d11b      	bne.n	8003b9e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b76:	2300      	movs	r3, #0
 8003b78:	61fb      	str	r3, [r7, #28]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	61fb      	str	r3, [r7, #28]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	61fb      	str	r3, [r7, #28]
 8003b8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	e164      	b.n	8003e68 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d11b      	bne.n	8003bde <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bb4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61bb      	str	r3, [r7, #24]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	61bb      	str	r3, [r7, #24]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	61bb      	str	r3, [r7, #24]
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	e144      	b.n	8003e68 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bde:	2300      	movs	r3, #0
 8003be0:	617b      	str	r3, [r7, #20]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	617b      	str	r3, [r7, #20]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003bf4:	e138      	b.n	8003e68 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	f200 80f1 	bhi.w	8003de2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d123      	bne.n	8003c50 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c0a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 fb8f 	bl	8004330 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e139      	b.n	8003e90 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c4e:	e10b      	b.n	8003e68 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d14e      	bne.n	8003cf6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c5e:	2200      	movs	r2, #0
 8003c60:	4906      	ldr	r1, [pc, #24]	@ (8003c7c <HAL_I2C_Mem_Read+0x22c>)
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 fa02 	bl	800406c <I2C_WaitOnFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d008      	beq.n	8003c80 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e10e      	b.n	8003e90 <HAL_I2C_Mem_Read+0x440>
 8003c72:	bf00      	nop
 8003c74:	00100002 	.word	0x00100002
 8003c78:	ffff0000 	.word	0xffff0000
 8003c7c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	691a      	ldr	r2, [r3, #16]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003cf4:	e0b8      	b.n	8003e68 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	4966      	ldr	r1, [pc, #408]	@ (8003e98 <HAL_I2C_Mem_Read+0x448>)
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 f9b3 	bl	800406c <I2C_WaitOnFlagUntilTimeout>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e0bf      	b.n	8003e90 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	691a      	ldr	r2, [r3, #16]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d32:	1c5a      	adds	r2, r3, #1
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d58:	2200      	movs	r2, #0
 8003d5a:	494f      	ldr	r1, [pc, #316]	@ (8003e98 <HAL_I2C_Mem_Read+0x448>)
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 f985 	bl	800406c <I2C_WaitOnFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e091      	b.n	8003e90 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	691a      	ldr	r2, [r3, #16]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003de0:	e042      	b.n	8003e68 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 faa2 	bl	8004330 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e04c      	b.n	8003e90 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e00:	b2d2      	uxtb	r2, r2
 8003e02:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	f003 0304 	and.w	r3, r3, #4
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d118      	bne.n	8003e68 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f47f aec2 	bne.w	8003bf6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	e000      	b.n	8003e90 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003e8e:	2302      	movs	r3, #2
  }
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3728      	adds	r7, #40	@ 0x28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	00010004 	.word	0x00010004

08003e9c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af02      	add	r7, sp, #8
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	4608      	mov	r0, r1
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4603      	mov	r3, r0
 8003eac:	817b      	strh	r3, [r7, #10]
 8003eae:	460b      	mov	r3, r1
 8003eb0:	813b      	strh	r3, [r7, #8]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ec4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ed4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	6a3b      	ldr	r3, [r7, #32]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 f8c2 	bl	800406c <I2C_WaitOnFlagUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00d      	beq.n	8003f0a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ef8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003efc:	d103      	bne.n	8003f06 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f04:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e0aa      	b.n	8004060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f0a:	897b      	ldrh	r3, [r7, #10]
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	461a      	mov	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1c:	6a3a      	ldr	r2, [r7, #32]
 8003f1e:	4952      	ldr	r1, [pc, #328]	@ (8004068 <I2C_RequestMemoryRead+0x1cc>)
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 f91d 	bl	8004160 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e097      	b.n	8004060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f48:	6a39      	ldr	r1, [r7, #32]
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f9a8 	bl	80042a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00d      	beq.n	8003f72 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d107      	bne.n	8003f6e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e076      	b.n	8004060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f72:	88fb      	ldrh	r3, [r7, #6]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d105      	bne.n	8003f84 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f78:	893b      	ldrh	r3, [r7, #8]
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	611a      	str	r2, [r3, #16]
 8003f82:	e021      	b.n	8003fc8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f84:	893b      	ldrh	r3, [r7, #8]
 8003f86:	0a1b      	lsrs	r3, r3, #8
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f94:	6a39      	ldr	r1, [r7, #32]
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 f982 	bl	80042a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00d      	beq.n	8003fbe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d107      	bne.n	8003fba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e050      	b.n	8004060 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fbe:	893b      	ldrh	r3, [r7, #8]
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fca:	6a39      	ldr	r1, [r7, #32]
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f967 	bl	80042a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00d      	beq.n	8003ff4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	d107      	bne.n	8003ff0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e035      	b.n	8004060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004002:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	2200      	movs	r2, #0
 800400c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f82b 	bl	800406c <I2C_WaitOnFlagUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00d      	beq.n	8004038 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004026:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800402a:	d103      	bne.n	8004034 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004032:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e013      	b.n	8004060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004038:	897b      	ldrh	r3, [r7, #10]
 800403a:	b2db      	uxtb	r3, r3
 800403c:	f043 0301 	orr.w	r3, r3, #1
 8004040:	b2da      	uxtb	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404a:	6a3a      	ldr	r2, [r7, #32]
 800404c:	4906      	ldr	r1, [pc, #24]	@ (8004068 <I2C_RequestMemoryRead+0x1cc>)
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 f886 	bl	8004160 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e000      	b.n	8004060 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	00010002 	.word	0x00010002

0800406c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	603b      	str	r3, [r7, #0]
 8004078:	4613      	mov	r3, r2
 800407a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800407c:	e048      	b.n	8004110 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004084:	d044      	beq.n	8004110 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004086:	f7ff f849 	bl	800311c <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d302      	bcc.n	800409c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d139      	bne.n	8004110 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	0c1b      	lsrs	r3, r3, #16
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d10d      	bne.n	80040c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	43da      	mvns	r2, r3
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	4013      	ands	r3, r2
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	bf0c      	ite	eq
 80040b8:	2301      	moveq	r3, #1
 80040ba:	2300      	movne	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	461a      	mov	r2, r3
 80040c0:	e00c      	b.n	80040dc <I2C_WaitOnFlagUntilTimeout+0x70>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	43da      	mvns	r2, r3
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	4013      	ands	r3, r2
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	bf0c      	ite	eq
 80040d4:	2301      	moveq	r3, #1
 80040d6:	2300      	movne	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	461a      	mov	r2, r3
 80040dc:	79fb      	ldrb	r3, [r7, #7]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d116      	bne.n	8004110 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fc:	f043 0220 	orr.w	r2, r3, #32
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e023      	b.n	8004158 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	0c1b      	lsrs	r3, r3, #16
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b01      	cmp	r3, #1
 8004118:	d10d      	bne.n	8004136 <I2C_WaitOnFlagUntilTimeout+0xca>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	43da      	mvns	r2, r3
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	4013      	ands	r3, r2
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	bf0c      	ite	eq
 800412c:	2301      	moveq	r3, #1
 800412e:	2300      	movne	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	461a      	mov	r2, r3
 8004134:	e00c      	b.n	8004150 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	43da      	mvns	r2, r3
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	4013      	ands	r3, r2
 8004142:	b29b      	uxth	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	bf0c      	ite	eq
 8004148:	2301      	moveq	r3, #1
 800414a:	2300      	movne	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	461a      	mov	r2, r3
 8004150:	79fb      	ldrb	r3, [r7, #7]
 8004152:	429a      	cmp	r2, r3
 8004154:	d093      	beq.n	800407e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800416e:	e071      	b.n	8004254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800417a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800417e:	d123      	bne.n	80041c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800418e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004198:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b4:	f043 0204 	orr.w	r2, r3, #4
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e067      	b.n	8004298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ce:	d041      	beq.n	8004254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041d0:	f7fe ffa4 	bl	800311c <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d302      	bcc.n	80041e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d136      	bne.n	8004254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	0c1b      	lsrs	r3, r3, #16
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d10c      	bne.n	800420a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	43da      	mvns	r2, r3
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	4013      	ands	r3, r2
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	bf14      	ite	ne
 8004202:	2301      	movne	r3, #1
 8004204:	2300      	moveq	r3, #0
 8004206:	b2db      	uxtb	r3, r3
 8004208:	e00b      	b.n	8004222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	43da      	mvns	r2, r3
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	4013      	ands	r3, r2
 8004216:	b29b      	uxth	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	bf14      	ite	ne
 800421c:	2301      	movne	r3, #1
 800421e:	2300      	moveq	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d016      	beq.n	8004254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004240:	f043 0220 	orr.w	r2, r3, #32
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e021      	b.n	8004298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	0c1b      	lsrs	r3, r3, #16
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b01      	cmp	r3, #1
 800425c:	d10c      	bne.n	8004278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	43da      	mvns	r2, r3
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	4013      	ands	r3, r2
 800426a:	b29b      	uxth	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	bf14      	ite	ne
 8004270:	2301      	movne	r3, #1
 8004272:	2300      	moveq	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	e00b      	b.n	8004290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	43da      	mvns	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4013      	ands	r3, r2
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	bf14      	ite	ne
 800428a:	2301      	movne	r3, #1
 800428c:	2300      	moveq	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	f47f af6d 	bne.w	8004170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042ac:	e034      	b.n	8004318 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 f89b 	bl	80043ea <I2C_IsAcknowledgeFailed>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e034      	b.n	8004328 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c4:	d028      	beq.n	8004318 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c6:	f7fe ff29 	bl	800311c <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d302      	bcc.n	80042dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d11d      	bne.n	8004318 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042e6:	2b80      	cmp	r3, #128	@ 0x80
 80042e8:	d016      	beq.n	8004318 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004304:	f043 0220 	orr.w	r2, r3, #32
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e007      	b.n	8004328 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004322:	2b80      	cmp	r3, #128	@ 0x80
 8004324:	d1c3      	bne.n	80042ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800433c:	e049      	b.n	80043d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	f003 0310 	and.w	r3, r3, #16
 8004348:	2b10      	cmp	r3, #16
 800434a:	d119      	bne.n	8004380 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f06f 0210 	mvn.w	r2, #16
 8004354:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e030      	b.n	80043e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004380:	f7fe fecc 	bl	800311c <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	429a      	cmp	r2, r3
 800438e:	d302      	bcc.n	8004396 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d11d      	bne.n	80043d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a0:	2b40      	cmp	r3, #64	@ 0x40
 80043a2:	d016      	beq.n	80043d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2220      	movs	r2, #32
 80043ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043be:	f043 0220 	orr.w	r2, r3, #32
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e007      	b.n	80043e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043dc:	2b40      	cmp	r3, #64	@ 0x40
 80043de:	d1ae      	bne.n	800433e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004400:	d11b      	bne.n	800443a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800440a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2220      	movs	r2, #32
 8004416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004426:	f043 0204 	orr.w	r2, r3, #4
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	bc80      	pop	{r7}
 8004444:	4770      	bx	lr
	...

08004448 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e31d      	b.n	8004a96 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800445a:	4b94      	ldr	r3, [pc, #592]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 030c 	and.w	r3, r3, #12
 8004462:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004464:	4b91      	ldr	r3, [pc, #580]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800446c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	d07b      	beq.n	8004572 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	2b08      	cmp	r3, #8
 800447e:	d006      	beq.n	800448e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	2b0c      	cmp	r3, #12
 8004484:	d10f      	bne.n	80044a6 <HAL_RCC_OscConfig+0x5e>
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800448c:	d10b      	bne.n	80044a6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800448e:	4b87      	ldr	r3, [pc, #540]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d06a      	beq.n	8004570 <HAL_RCC_OscConfig+0x128>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d166      	bne.n	8004570 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e2f7      	b.n	8004a96 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d106      	bne.n	80044bc <HAL_RCC_OscConfig+0x74>
 80044ae:	4b7f      	ldr	r3, [pc, #508]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a7e      	ldr	r2, [pc, #504]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 80044b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044b8:	6013      	str	r3, [r2, #0]
 80044ba:	e02d      	b.n	8004518 <HAL_RCC_OscConfig+0xd0>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10c      	bne.n	80044de <HAL_RCC_OscConfig+0x96>
 80044c4:	4b79      	ldr	r3, [pc, #484]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a78      	ldr	r2, [pc, #480]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 80044ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	4b76      	ldr	r3, [pc, #472]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a75      	ldr	r2, [pc, #468]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 80044d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	e01c      	b.n	8004518 <HAL_RCC_OscConfig+0xd0>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b05      	cmp	r3, #5
 80044e4:	d10c      	bne.n	8004500 <HAL_RCC_OscConfig+0xb8>
 80044e6:	4b71      	ldr	r3, [pc, #452]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a70      	ldr	r2, [pc, #448]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 80044ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	4b6e      	ldr	r3, [pc, #440]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a6d      	ldr	r2, [pc, #436]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 80044f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	e00b      	b.n	8004518 <HAL_RCC_OscConfig+0xd0>
 8004500:	4b6a      	ldr	r3, [pc, #424]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a69      	ldr	r2, [pc, #420]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 8004506:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800450a:	6013      	str	r3, [r2, #0]
 800450c:	4b67      	ldr	r3, [pc, #412]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a66      	ldr	r2, [pc, #408]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 8004512:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d013      	beq.n	8004548 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004520:	f7fe fdfc 	bl	800311c <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004528:	f7fe fdf8 	bl	800311c <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b64      	cmp	r3, #100	@ 0x64
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e2ad      	b.n	8004a96 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800453a:	4b5c      	ldr	r3, [pc, #368]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0f0      	beq.n	8004528 <HAL_RCC_OscConfig+0xe0>
 8004546:	e014      	b.n	8004572 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004548:	f7fe fde8 	bl	800311c <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004550:	f7fe fde4 	bl	800311c <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b64      	cmp	r3, #100	@ 0x64
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e299      	b.n	8004a96 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004562:	4b52      	ldr	r3, [pc, #328]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f0      	bne.n	8004550 <HAL_RCC_OscConfig+0x108>
 800456e:	e000      	b.n	8004572 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d05a      	beq.n	8004634 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	2b04      	cmp	r3, #4
 8004582:	d005      	beq.n	8004590 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	2b0c      	cmp	r3, #12
 8004588:	d119      	bne.n	80045be <HAL_RCC_OscConfig+0x176>
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d116      	bne.n	80045be <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004590:	4b46      	ldr	r3, [pc, #280]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d005      	beq.n	80045a8 <HAL_RCC_OscConfig+0x160>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d001      	beq.n	80045a8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e276      	b.n	8004a96 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a8:	4b40      	ldr	r3, [pc, #256]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	021b      	lsls	r3, r3, #8
 80045b6:	493d      	ldr	r1, [pc, #244]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045bc:	e03a      	b.n	8004634 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d020      	beq.n	8004608 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045c6:	4b3a      	ldr	r3, [pc, #232]	@ (80046b0 <HAL_RCC_OscConfig+0x268>)
 80045c8:	2201      	movs	r2, #1
 80045ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045cc:	f7fe fda6 	bl	800311c <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045d4:	f7fe fda2 	bl	800311c <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e257      	b.n	8004a96 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045e6:	4b31      	ldr	r3, [pc, #196]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f0      	beq.n	80045d4 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f2:	4b2e      	ldr	r3, [pc, #184]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	021b      	lsls	r3, r3, #8
 8004600:	492a      	ldr	r1, [pc, #168]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 8004602:	4313      	orrs	r3, r2
 8004604:	604b      	str	r3, [r1, #4]
 8004606:	e015      	b.n	8004634 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004608:	4b29      	ldr	r3, [pc, #164]	@ (80046b0 <HAL_RCC_OscConfig+0x268>)
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460e:	f7fe fd85 	bl	800311c <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004616:	f7fe fd81 	bl	800311c <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e236      	b.n	8004a96 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004628:	4b20      	ldr	r3, [pc, #128]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1f0      	bne.n	8004616 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0310 	and.w	r3, r3, #16
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 80b8 	beq.w	80047b2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d170      	bne.n	800472a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004648:	4b18      	ldr	r3, [pc, #96]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004650:	2b00      	cmp	r3, #0
 8004652:	d005      	beq.n	8004660 <HAL_RCC_OscConfig+0x218>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e21a      	b.n	8004a96 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a1a      	ldr	r2, [r3, #32]
 8004664:	4b11      	ldr	r3, [pc, #68]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800466c:	429a      	cmp	r2, r3
 800466e:	d921      	bls.n	80046b4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	4618      	mov	r0, r3
 8004676:	f000 fc7d 	bl	8004f74 <RCC_SetFlashLatencyFromMSIRange>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e208      	b.n	8004a96 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004684:	4b09      	ldr	r3, [pc, #36]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	4906      	ldr	r1, [pc, #24]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 8004692:	4313      	orrs	r3, r2
 8004694:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004696:	4b05      	ldr	r3, [pc, #20]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	061b      	lsls	r3, r3, #24
 80046a4:	4901      	ldr	r1, [pc, #4]	@ (80046ac <HAL_RCC_OscConfig+0x264>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	604b      	str	r3, [r1, #4]
 80046aa:	e020      	b.n	80046ee <HAL_RCC_OscConfig+0x2a6>
 80046ac:	40023800 	.word	0x40023800
 80046b0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046b4:	4b99      	ldr	r3, [pc, #612]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	4996      	ldr	r1, [pc, #600]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046c6:	4b95      	ldr	r3, [pc, #596]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	061b      	lsls	r3, r3, #24
 80046d4:	4991      	ldr	r1, [pc, #580]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 fc48 	bl	8004f74 <RCC_SetFlashLatencyFromMSIRange>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e1d3      	b.n	8004a96 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	0b5b      	lsrs	r3, r3, #13
 80046f4:	3301      	adds	r3, #1
 80046f6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80046fa:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80046fe:	4a87      	ldr	r2, [pc, #540]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 8004700:	6892      	ldr	r2, [r2, #8]
 8004702:	0912      	lsrs	r2, r2, #4
 8004704:	f002 020f 	and.w	r2, r2, #15
 8004708:	4985      	ldr	r1, [pc, #532]	@ (8004920 <HAL_RCC_OscConfig+0x4d8>)
 800470a:	5c8a      	ldrb	r2, [r1, r2]
 800470c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800470e:	4a85      	ldr	r2, [pc, #532]	@ (8004924 <HAL_RCC_OscConfig+0x4dc>)
 8004710:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004712:	4b85      	ldr	r3, [pc, #532]	@ (8004928 <HAL_RCC_OscConfig+0x4e0>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7fe fcb4 	bl	8003084 <HAL_InitTick>
 800471c:	4603      	mov	r3, r0
 800471e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004720:	7bfb      	ldrb	r3, [r7, #15]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d045      	beq.n	80047b2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004726:	7bfb      	ldrb	r3, [r7, #15]
 8004728:	e1b5      	b.n	8004a96 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d029      	beq.n	8004786 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004732:	4b7e      	ldr	r3, [pc, #504]	@ (800492c <HAL_RCC_OscConfig+0x4e4>)
 8004734:	2201      	movs	r2, #1
 8004736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004738:	f7fe fcf0 	bl	800311c <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004740:	f7fe fcec 	bl	800311c <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e1a1      	b.n	8004a96 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004752:	4b72      	ldr	r3, [pc, #456]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800475a:	2b00      	cmp	r3, #0
 800475c:	d0f0      	beq.n	8004740 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800475e:	4b6f      	ldr	r3, [pc, #444]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	496c      	ldr	r1, [pc, #432]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 800476c:	4313      	orrs	r3, r2
 800476e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004770:	4b6a      	ldr	r3, [pc, #424]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	061b      	lsls	r3, r3, #24
 800477e:	4967      	ldr	r1, [pc, #412]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 8004780:	4313      	orrs	r3, r2
 8004782:	604b      	str	r3, [r1, #4]
 8004784:	e015      	b.n	80047b2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004786:	4b69      	ldr	r3, [pc, #420]	@ (800492c <HAL_RCC_OscConfig+0x4e4>)
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478c:	f7fe fcc6 	bl	800311c <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004794:	f7fe fcc2 	bl	800311c <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e177      	b.n	8004a96 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80047a6:	4b5d      	ldr	r3, [pc, #372]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1f0      	bne.n	8004794 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d030      	beq.n	8004820 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d016      	beq.n	80047f4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047c6:	4b5a      	ldr	r3, [pc, #360]	@ (8004930 <HAL_RCC_OscConfig+0x4e8>)
 80047c8:	2201      	movs	r2, #1
 80047ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047cc:	f7fe fca6 	bl	800311c <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047d4:	f7fe fca2 	bl	800311c <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e157      	b.n	8004a96 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047e6:	4b4d      	ldr	r3, [pc, #308]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 80047e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0f0      	beq.n	80047d4 <HAL_RCC_OscConfig+0x38c>
 80047f2:	e015      	b.n	8004820 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047f4:	4b4e      	ldr	r3, [pc, #312]	@ (8004930 <HAL_RCC_OscConfig+0x4e8>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047fa:	f7fe fc8f 	bl	800311c <HAL_GetTick>
 80047fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004800:	e008      	b.n	8004814 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004802:	f7fe fc8b 	bl	800311c <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e140      	b.n	8004a96 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004814:	4b41      	ldr	r3, [pc, #260]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 8004816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1f0      	bne.n	8004802 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 80b5 	beq.w	8004998 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800482e:	2300      	movs	r3, #0
 8004830:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004832:	4b3a      	ldr	r3, [pc, #232]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 8004834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10d      	bne.n	800485a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800483e:	4b37      	ldr	r3, [pc, #220]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 8004840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004842:	4a36      	ldr	r2, [pc, #216]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 8004844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004848:	6253      	str	r3, [r2, #36]	@ 0x24
 800484a:	4b34      	ldr	r3, [pc, #208]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 800484c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004852:	60bb      	str	r3, [r7, #8]
 8004854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004856:	2301      	movs	r3, #1
 8004858:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800485a:	4b36      	ldr	r3, [pc, #216]	@ (8004934 <HAL_RCC_OscConfig+0x4ec>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004862:	2b00      	cmp	r3, #0
 8004864:	d118      	bne.n	8004898 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004866:	4b33      	ldr	r3, [pc, #204]	@ (8004934 <HAL_RCC_OscConfig+0x4ec>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a32      	ldr	r2, [pc, #200]	@ (8004934 <HAL_RCC_OscConfig+0x4ec>)
 800486c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004870:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004872:	f7fe fc53 	bl	800311c <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800487a:	f7fe fc4f 	bl	800311c <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b64      	cmp	r3, #100	@ 0x64
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e104      	b.n	8004a96 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800488c:	4b29      	ldr	r3, [pc, #164]	@ (8004934 <HAL_RCC_OscConfig+0x4ec>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0f0      	beq.n	800487a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d106      	bne.n	80048ae <HAL_RCC_OscConfig+0x466>
 80048a0:	4b1e      	ldr	r3, [pc, #120]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 80048a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048a4:	4a1d      	ldr	r2, [pc, #116]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 80048a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048aa:	6353      	str	r3, [r2, #52]	@ 0x34
 80048ac:	e02d      	b.n	800490a <HAL_RCC_OscConfig+0x4c2>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10c      	bne.n	80048d0 <HAL_RCC_OscConfig+0x488>
 80048b6:	4b19      	ldr	r3, [pc, #100]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 80048b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ba:	4a18      	ldr	r2, [pc, #96]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 80048bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048c0:	6353      	str	r3, [r2, #52]	@ 0x34
 80048c2:	4b16      	ldr	r3, [pc, #88]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 80048c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048c6:	4a15      	ldr	r2, [pc, #84]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 80048c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048cc:	6353      	str	r3, [r2, #52]	@ 0x34
 80048ce:	e01c      	b.n	800490a <HAL_RCC_OscConfig+0x4c2>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	2b05      	cmp	r3, #5
 80048d6:	d10c      	bne.n	80048f2 <HAL_RCC_OscConfig+0x4aa>
 80048d8:	4b10      	ldr	r3, [pc, #64]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 80048da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048dc:	4a0f      	ldr	r2, [pc, #60]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 80048de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80048e2:	6353      	str	r3, [r2, #52]	@ 0x34
 80048e4:	4b0d      	ldr	r3, [pc, #52]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 80048e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048e8:	4a0c      	ldr	r2, [pc, #48]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 80048ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048ee:	6353      	str	r3, [r2, #52]	@ 0x34
 80048f0:	e00b      	b.n	800490a <HAL_RCC_OscConfig+0x4c2>
 80048f2:	4b0a      	ldr	r3, [pc, #40]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 80048f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048f6:	4a09      	ldr	r2, [pc, #36]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 80048f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048fc:	6353      	str	r3, [r2, #52]	@ 0x34
 80048fe:	4b07      	ldr	r3, [pc, #28]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 8004900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004902:	4a06      	ldr	r2, [pc, #24]	@ (800491c <HAL_RCC_OscConfig+0x4d4>)
 8004904:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004908:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d024      	beq.n	800495c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004912:	f7fe fc03 	bl	800311c <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004918:	e019      	b.n	800494e <HAL_RCC_OscConfig+0x506>
 800491a:	bf00      	nop
 800491c:	40023800 	.word	0x40023800
 8004920:	0800965c 	.word	0x0800965c
 8004924:	20000004 	.word	0x20000004
 8004928:	20000008 	.word	0x20000008
 800492c:	42470020 	.word	0x42470020
 8004930:	42470680 	.word	0x42470680
 8004934:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004938:	f7fe fbf0 	bl	800311c <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004946:	4293      	cmp	r3, r2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e0a3      	b.n	8004a96 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800494e:	4b54      	ldr	r3, [pc, #336]	@ (8004aa0 <HAL_RCC_OscConfig+0x658>)
 8004950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004952:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0ee      	beq.n	8004938 <HAL_RCC_OscConfig+0x4f0>
 800495a:	e014      	b.n	8004986 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800495c:	f7fe fbde 	bl	800311c <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004962:	e00a      	b.n	800497a <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004964:	f7fe fbda 	bl	800311c <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004972:	4293      	cmp	r3, r2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e08d      	b.n	8004a96 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800497a:	4b49      	ldr	r3, [pc, #292]	@ (8004aa0 <HAL_RCC_OscConfig+0x658>)
 800497c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800497e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1ee      	bne.n	8004964 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004986:	7ffb      	ldrb	r3, [r7, #31]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d105      	bne.n	8004998 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800498c:	4b44      	ldr	r3, [pc, #272]	@ (8004aa0 <HAL_RCC_OscConfig+0x658>)
 800498e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004990:	4a43      	ldr	r2, [pc, #268]	@ (8004aa0 <HAL_RCC_OscConfig+0x658>)
 8004992:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004996:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499c:	2b00      	cmp	r3, #0
 800499e:	d079      	beq.n	8004a94 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	2b0c      	cmp	r3, #12
 80049a4:	d056      	beq.n	8004a54 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d13b      	bne.n	8004a26 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ae:	4b3d      	ldr	r3, [pc, #244]	@ (8004aa4 <HAL_RCC_OscConfig+0x65c>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b4:	f7fe fbb2 	bl	800311c <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049bc:	f7fe fbae 	bl	800311c <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e063      	b.n	8004a96 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049ce:	4b34      	ldr	r3, [pc, #208]	@ (8004aa0 <HAL_RCC_OscConfig+0x658>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f0      	bne.n	80049bc <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049da:	4b31      	ldr	r3, [pc, #196]	@ (8004aa0 <HAL_RCC_OscConfig+0x658>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ea:	4319      	orrs	r1, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f0:	430b      	orrs	r3, r1
 80049f2:	492b      	ldr	r1, [pc, #172]	@ (8004aa0 <HAL_RCC_OscConfig+0x658>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049f8:	4b2a      	ldr	r3, [pc, #168]	@ (8004aa4 <HAL_RCC_OscConfig+0x65c>)
 80049fa:	2201      	movs	r2, #1
 80049fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049fe:	f7fe fb8d 	bl	800311c <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a04:	e008      	b.n	8004a18 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a06:	f7fe fb89 	bl	800311c <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e03e      	b.n	8004a96 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a18:	4b21      	ldr	r3, [pc, #132]	@ (8004aa0 <HAL_RCC_OscConfig+0x658>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0f0      	beq.n	8004a06 <HAL_RCC_OscConfig+0x5be>
 8004a24:	e036      	b.n	8004a94 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a26:	4b1f      	ldr	r3, [pc, #124]	@ (8004aa4 <HAL_RCC_OscConfig+0x65c>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a2c:	f7fe fb76 	bl	800311c <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a34:	f7fe fb72 	bl	800311c <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e027      	b.n	8004a96 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a46:	4b16      	ldr	r3, [pc, #88]	@ (8004aa0 <HAL_RCC_OscConfig+0x658>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1f0      	bne.n	8004a34 <HAL_RCC_OscConfig+0x5ec>
 8004a52:	e01f      	b.n	8004a94 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e01a      	b.n	8004a96 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a60:	4b0f      	ldr	r3, [pc, #60]	@ (8004aa0 <HAL_RCC_OscConfig+0x658>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d10d      	bne.n	8004a90 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d106      	bne.n	8004a90 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d001      	beq.n	8004a94 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e000      	b.n	8004a96 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3720      	adds	r7, #32
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	42470060 	.word	0x42470060

08004aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e11a      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004abc:	4b8f      	ldr	r3, [pc, #572]	@ (8004cfc <HAL_RCC_ClockConfig+0x254>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d919      	bls.n	8004afe <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d105      	bne.n	8004adc <HAL_RCC_ClockConfig+0x34>
 8004ad0:	4b8a      	ldr	r3, [pc, #552]	@ (8004cfc <HAL_RCC_ClockConfig+0x254>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a89      	ldr	r2, [pc, #548]	@ (8004cfc <HAL_RCC_ClockConfig+0x254>)
 8004ad6:	f043 0304 	orr.w	r3, r3, #4
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	4b87      	ldr	r3, [pc, #540]	@ (8004cfc <HAL_RCC_ClockConfig+0x254>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f023 0201 	bic.w	r2, r3, #1
 8004ae4:	4985      	ldr	r1, [pc, #532]	@ (8004cfc <HAL_RCC_ClockConfig+0x254>)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aec:	4b83      	ldr	r3, [pc, #524]	@ (8004cfc <HAL_RCC_ClockConfig+0x254>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d001      	beq.n	8004afe <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e0f9      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d008      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b0a:	4b7d      	ldr	r3, [pc, #500]	@ (8004d00 <HAL_RCC_ClockConfig+0x258>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	497a      	ldr	r1, [pc, #488]	@ (8004d00 <HAL_RCC_ClockConfig+0x258>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 808e 	beq.w	8004c46 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d107      	bne.n	8004b42 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b32:	4b73      	ldr	r3, [pc, #460]	@ (8004d00 <HAL_RCC_ClockConfig+0x258>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d121      	bne.n	8004b82 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e0d7      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	2b03      	cmp	r3, #3
 8004b48:	d107      	bne.n	8004b5a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b4a:	4b6d      	ldr	r3, [pc, #436]	@ (8004d00 <HAL_RCC_ClockConfig+0x258>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d115      	bne.n	8004b82 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e0cb      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d107      	bne.n	8004b72 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b62:	4b67      	ldr	r3, [pc, #412]	@ (8004d00 <HAL_RCC_ClockConfig+0x258>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d109      	bne.n	8004b82 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e0bf      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004b72:	4b63      	ldr	r3, [pc, #396]	@ (8004d00 <HAL_RCC_ClockConfig+0x258>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e0b7      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b82:	4b5f      	ldr	r3, [pc, #380]	@ (8004d00 <HAL_RCC_ClockConfig+0x258>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f023 0203 	bic.w	r2, r3, #3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	495c      	ldr	r1, [pc, #368]	@ (8004d00 <HAL_RCC_ClockConfig+0x258>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b94:	f7fe fac2 	bl	800311c <HAL_GetTick>
 8004b98:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d112      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ba2:	e00a      	b.n	8004bba <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ba4:	f7fe faba 	bl	800311c <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e09b      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bba:	4b51      	ldr	r3, [pc, #324]	@ (8004d00 <HAL_RCC_ClockConfig+0x258>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 030c 	and.w	r3, r3, #12
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d1ee      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0xfc>
 8004bc6:	e03e      	b.n	8004c46 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	2b03      	cmp	r3, #3
 8004bce:	d112      	bne.n	8004bf6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bd0:	e00a      	b.n	8004be8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bd2:	f7fe faa3 	bl	800311c <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e084      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004be8:	4b45      	ldr	r3, [pc, #276]	@ (8004d00 <HAL_RCC_ClockConfig+0x258>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 030c 	and.w	r3, r3, #12
 8004bf0:	2b0c      	cmp	r3, #12
 8004bf2:	d1ee      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0x12a>
 8004bf4:	e027      	b.n	8004c46 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d11d      	bne.n	8004c3a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bfe:	e00a      	b.n	8004c16 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c00:	f7fe fa8c 	bl	800311c <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e06d      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c16:	4b3a      	ldr	r3, [pc, #232]	@ (8004d00 <HAL_RCC_ClockConfig+0x258>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 030c 	and.w	r3, r3, #12
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	d1ee      	bne.n	8004c00 <HAL_RCC_ClockConfig+0x158>
 8004c22:	e010      	b.n	8004c46 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c24:	f7fe fa7a 	bl	800311c <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e05b      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004c3a:	4b31      	ldr	r3, [pc, #196]	@ (8004d00 <HAL_RCC_ClockConfig+0x258>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f003 030c 	and.w	r3, r3, #12
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1ee      	bne.n	8004c24 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c46:	4b2d      	ldr	r3, [pc, #180]	@ (8004cfc <HAL_RCC_ClockConfig+0x254>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d219      	bcs.n	8004c88 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d105      	bne.n	8004c66 <HAL_RCC_ClockConfig+0x1be>
 8004c5a:	4b28      	ldr	r3, [pc, #160]	@ (8004cfc <HAL_RCC_ClockConfig+0x254>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a27      	ldr	r2, [pc, #156]	@ (8004cfc <HAL_RCC_ClockConfig+0x254>)
 8004c60:	f043 0304 	orr.w	r3, r3, #4
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	4b25      	ldr	r3, [pc, #148]	@ (8004cfc <HAL_RCC_ClockConfig+0x254>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f023 0201 	bic.w	r2, r3, #1
 8004c6e:	4923      	ldr	r1, [pc, #140]	@ (8004cfc <HAL_RCC_ClockConfig+0x254>)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c76:	4b21      	ldr	r3, [pc, #132]	@ (8004cfc <HAL_RCC_ClockConfig+0x254>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d001      	beq.n	8004c88 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e034      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d008      	beq.n	8004ca6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c94:	4b1a      	ldr	r3, [pc, #104]	@ (8004d00 <HAL_RCC_ClockConfig+0x258>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	4917      	ldr	r1, [pc, #92]	@ (8004d00 <HAL_RCC_ClockConfig+0x258>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0308 	and.w	r3, r3, #8
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d009      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cb2:	4b13      	ldr	r3, [pc, #76]	@ (8004d00 <HAL_RCC_ClockConfig+0x258>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	490f      	ldr	r1, [pc, #60]	@ (8004d00 <HAL_RCC_ClockConfig+0x258>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cc6:	f000 f823 	bl	8004d10 <HAL_RCC_GetSysClockFreq>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8004d00 <HAL_RCC_ClockConfig+0x258>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	091b      	lsrs	r3, r3, #4
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	490b      	ldr	r1, [pc, #44]	@ (8004d04 <HAL_RCC_ClockConfig+0x25c>)
 8004cd8:	5ccb      	ldrb	r3, [r1, r3]
 8004cda:	fa22 f303 	lsr.w	r3, r2, r3
 8004cde:	4a0a      	ldr	r2, [pc, #40]	@ (8004d08 <HAL_RCC_ClockConfig+0x260>)
 8004ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8004d0c <HAL_RCC_ClockConfig+0x264>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fe f9cc 	bl	8003084 <HAL_InitTick>
 8004cec:	4603      	mov	r3, r0
 8004cee:	72fb      	strb	r3, [r7, #11]

  return status;
 8004cf0:	7afb      	ldrb	r3, [r7, #11]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	40023c00 	.word	0x40023c00
 8004d00:	40023800 	.word	0x40023800
 8004d04:	0800965c 	.word	0x0800965c
 8004d08:	20000004 	.word	0x20000004
 8004d0c:	20000008 	.word	0x20000008

08004d10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d14:	b092      	sub	sp, #72	@ 0x48
 8004d16:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004d18:	4b79      	ldr	r3, [pc, #484]	@ (8004f00 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d20:	f003 030c 	and.w	r3, r3, #12
 8004d24:	2b0c      	cmp	r3, #12
 8004d26:	d00d      	beq.n	8004d44 <HAL_RCC_GetSysClockFreq+0x34>
 8004d28:	2b0c      	cmp	r3, #12
 8004d2a:	f200 80d5 	bhi.w	8004ed8 <HAL_RCC_GetSysClockFreq+0x1c8>
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d002      	beq.n	8004d38 <HAL_RCC_GetSysClockFreq+0x28>
 8004d32:	2b08      	cmp	r3, #8
 8004d34:	d003      	beq.n	8004d3e <HAL_RCC_GetSysClockFreq+0x2e>
 8004d36:	e0cf      	b.n	8004ed8 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d38:	4b72      	ldr	r3, [pc, #456]	@ (8004f04 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004d3a:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004d3c:	e0da      	b.n	8004ef4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d3e:	4b72      	ldr	r3, [pc, #456]	@ (8004f08 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004d40:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004d42:	e0d7      	b.n	8004ef4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d46:	0c9b      	lsrs	r3, r3, #18
 8004d48:	f003 020f 	and.w	r2, r3, #15
 8004d4c:	4b6f      	ldr	r3, [pc, #444]	@ (8004f0c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004d4e:	5c9b      	ldrb	r3, [r3, r2]
 8004d50:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d54:	0d9b      	lsrs	r3, r3, #22
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d5e:	4b68      	ldr	r3, [pc, #416]	@ (8004f00 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d05d      	beq.n	8004e26 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	4618      	mov	r0, r3
 8004d70:	4611      	mov	r1, r2
 8004d72:	4604      	mov	r4, r0
 8004d74:	460d      	mov	r5, r1
 8004d76:	4622      	mov	r2, r4
 8004d78:	462b      	mov	r3, r5
 8004d7a:	f04f 0000 	mov.w	r0, #0
 8004d7e:	f04f 0100 	mov.w	r1, #0
 8004d82:	0159      	lsls	r1, r3, #5
 8004d84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d88:	0150      	lsls	r0, r2, #5
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	4621      	mov	r1, r4
 8004d90:	1a51      	subs	r1, r2, r1
 8004d92:	6139      	str	r1, [r7, #16]
 8004d94:	4629      	mov	r1, r5
 8004d96:	eb63 0301 	sbc.w	r3, r3, r1
 8004d9a:	617b      	str	r3, [r7, #20]
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	f04f 0300 	mov.w	r3, #0
 8004da4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004da8:	4659      	mov	r1, fp
 8004daa:	018b      	lsls	r3, r1, #6
 8004dac:	4651      	mov	r1, sl
 8004dae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004db2:	4651      	mov	r1, sl
 8004db4:	018a      	lsls	r2, r1, #6
 8004db6:	46d4      	mov	ip, sl
 8004db8:	ebb2 080c 	subs.w	r8, r2, ip
 8004dbc:	4659      	mov	r1, fp
 8004dbe:	eb63 0901 	sbc.w	r9, r3, r1
 8004dc2:	f04f 0200 	mov.w	r2, #0
 8004dc6:	f04f 0300 	mov.w	r3, #0
 8004dca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dd6:	4690      	mov	r8, r2
 8004dd8:	4699      	mov	r9, r3
 8004dda:	4623      	mov	r3, r4
 8004ddc:	eb18 0303 	adds.w	r3, r8, r3
 8004de0:	60bb      	str	r3, [r7, #8]
 8004de2:	462b      	mov	r3, r5
 8004de4:	eb49 0303 	adc.w	r3, r9, r3
 8004de8:	60fb      	str	r3, [r7, #12]
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	f04f 0300 	mov.w	r3, #0
 8004df2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004df6:	4629      	mov	r1, r5
 8004df8:	024b      	lsls	r3, r1, #9
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	4629      	mov	r1, r5
 8004dfe:	4604      	mov	r4, r0
 8004e00:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004e04:	4601      	mov	r1, r0
 8004e06:	024a      	lsls	r2, r1, #9
 8004e08:	4610      	mov	r0, r2
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e0e:	2200      	movs	r2, #0
 8004e10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e18:	f7fc f998 	bl	800114c <__aeabi_uldivmod>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4613      	mov	r3, r2
 8004e22:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e24:	e055      	b.n	8004ed2 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e28:	2200      	movs	r2, #0
 8004e2a:	623b      	str	r3, [r7, #32]
 8004e2c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e2e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e32:	4642      	mov	r2, r8
 8004e34:	464b      	mov	r3, r9
 8004e36:	f04f 0000 	mov.w	r0, #0
 8004e3a:	f04f 0100 	mov.w	r1, #0
 8004e3e:	0159      	lsls	r1, r3, #5
 8004e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e44:	0150      	lsls	r0, r2, #5
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	46c4      	mov	ip, r8
 8004e4c:	ebb2 0a0c 	subs.w	sl, r2, ip
 8004e50:	4640      	mov	r0, r8
 8004e52:	4649      	mov	r1, r9
 8004e54:	468c      	mov	ip, r1
 8004e56:	eb63 0b0c 	sbc.w	fp, r3, ip
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e66:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e6a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e6e:	ebb2 040a 	subs.w	r4, r2, sl
 8004e72:	eb63 050b 	sbc.w	r5, r3, fp
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	f04f 0300 	mov.w	r3, #0
 8004e7e:	00eb      	lsls	r3, r5, #3
 8004e80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e84:	00e2      	lsls	r2, r4, #3
 8004e86:	4614      	mov	r4, r2
 8004e88:	461d      	mov	r5, r3
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	18e3      	adds	r3, r4, r3
 8004e8e:	603b      	str	r3, [r7, #0]
 8004e90:	460b      	mov	r3, r1
 8004e92:	eb45 0303 	adc.w	r3, r5, r3
 8004e96:	607b      	str	r3, [r7, #4]
 8004e98:	f04f 0200 	mov.w	r2, #0
 8004e9c:	f04f 0300 	mov.w	r3, #0
 8004ea0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ea4:	4629      	mov	r1, r5
 8004ea6:	028b      	lsls	r3, r1, #10
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	4629      	mov	r1, r5
 8004eac:	4604      	mov	r4, r0
 8004eae:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004eb2:	4601      	mov	r1, r0
 8004eb4:	028a      	lsls	r2, r1, #10
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	4619      	mov	r1, r3
 8004eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	61bb      	str	r3, [r7, #24]
 8004ec0:	61fa      	str	r2, [r7, #28]
 8004ec2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ec6:	f7fc f941 	bl	800114c <__aeabi_uldivmod>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4613      	mov	r3, r2
 8004ed0:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 8004ed2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ed4:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004ed6:	e00d      	b.n	8004ef4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004ed8:	4b09      	ldr	r3, [pc, #36]	@ (8004f00 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	0b5b      	lsrs	r3, r3, #13
 8004ede:	f003 0307 	and.w	r3, r3, #7
 8004ee2:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004eec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef0:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004ef2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ef4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3748      	adds	r7, #72	@ 0x48
 8004efa:	46bd      	mov	sp, r7
 8004efc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f00:	40023800 	.word	0x40023800
 8004f04:	00f42400 	.word	0x00f42400
 8004f08:	007a1200 	.word	0x007a1200
 8004f0c:	08009650 	.word	0x08009650

08004f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f14:	4b02      	ldr	r3, [pc, #8]	@ (8004f20 <HAL_RCC_GetHCLKFreq+0x10>)
 8004f16:	681b      	ldr	r3, [r3, #0]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc80      	pop	{r7}
 8004f1e:	4770      	bx	lr
 8004f20:	20000004 	.word	0x20000004

08004f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f28:	f7ff fff2 	bl	8004f10 <HAL_RCC_GetHCLKFreq>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	4b05      	ldr	r3, [pc, #20]	@ (8004f44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	0a1b      	lsrs	r3, r3, #8
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	4903      	ldr	r1, [pc, #12]	@ (8004f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f3a:	5ccb      	ldrb	r3, [r1, r3]
 8004f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40023800 	.word	0x40023800
 8004f48:	0800966c 	.word	0x0800966c

08004f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f50:	f7ff ffde 	bl	8004f10 <HAL_RCC_GetHCLKFreq>
 8004f54:	4602      	mov	r2, r0
 8004f56:	4b05      	ldr	r3, [pc, #20]	@ (8004f6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	0adb      	lsrs	r3, r3, #11
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	4903      	ldr	r1, [pc, #12]	@ (8004f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f62:	5ccb      	ldrb	r3, [r1, r3]
 8004f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	0800966c 	.word	0x0800966c

08004f74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004f80:	4b29      	ldr	r3, [pc, #164]	@ (8005028 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d12c      	bne.n	8004fe6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f8c:	4b26      	ldr	r3, [pc, #152]	@ (8005028 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d005      	beq.n	8004fa4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004f98:	4b24      	ldr	r3, [pc, #144]	@ (800502c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8004fa0:	617b      	str	r3, [r7, #20]
 8004fa2:	e016      	b.n	8004fd2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fa4:	4b20      	ldr	r3, [pc, #128]	@ (8005028 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa8:	4a1f      	ldr	r2, [pc, #124]	@ (8005028 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004faa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fae:	6253      	str	r3, [r2, #36]	@ 0x24
 8004fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8005028 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800502c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8004fc4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fc6:	4b18      	ldr	r3, [pc, #96]	@ (8005028 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fca:	4a17      	ldr	r2, [pc, #92]	@ (8005028 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004fcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fd0:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8004fd8:	d105      	bne.n	8004fe6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004fe0:	d101      	bne.n	8004fe6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d105      	bne.n	8004ff8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004fec:	4b10      	ldr	r3, [pc, #64]	@ (8005030 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a0f      	ldr	r2, [pc, #60]	@ (8005030 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ff2:	f043 0304 	orr.w	r3, r3, #4
 8004ff6:	6013      	str	r3, [r2, #0]
 8004ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8005030 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f023 0201 	bic.w	r2, r3, #1
 8005000:	490b      	ldr	r1, [pc, #44]	@ (8005030 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	4313      	orrs	r3, r2
 8005006:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005008:	4b09      	ldr	r3, [pc, #36]	@ (8005030 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	429a      	cmp	r2, r3
 8005014:	d001      	beq.n	800501a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e000      	b.n	800501c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	371c      	adds	r7, #28
 8005020:	46bd      	mov	sp, r7
 8005022:	bc80      	pop	{r7}
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	40023800 	.word	0x40023800
 800502c:	40007000 	.word	0x40007000
 8005030:	40023c00 	.word	0x40023c00

08005034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e031      	b.n	80050aa <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d106      	bne.n	8005060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7fd feca 	bl	8002df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3304      	adds	r3, #4
 8005070:	4619      	mov	r1, r3
 8005072:	4610      	mov	r0, r2
 8005074:	f000 fbd8 	bl	8005828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
	...

080050b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d001      	beq.n	80050cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e03a      	b.n	8005142 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0201 	orr.w	r2, r2, #1
 80050e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ec:	d00e      	beq.n	800510c <HAL_TIM_Base_Start_IT+0x58>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a16      	ldr	r2, [pc, #88]	@ (800514c <HAL_TIM_Base_Start_IT+0x98>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d009      	beq.n	800510c <HAL_TIM_Base_Start_IT+0x58>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a14      	ldr	r2, [pc, #80]	@ (8005150 <HAL_TIM_Base_Start_IT+0x9c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d004      	beq.n	800510c <HAL_TIM_Base_Start_IT+0x58>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a13      	ldr	r2, [pc, #76]	@ (8005154 <HAL_TIM_Base_Start_IT+0xa0>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d111      	bne.n	8005130 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2b06      	cmp	r3, #6
 800511c:	d010      	beq.n	8005140 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f042 0201 	orr.w	r2, r2, #1
 800512c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800512e:	e007      	b.n	8005140 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0201 	orr.w	r2, r2, #1
 800513e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	bc80      	pop	{r7}
 800514a:	4770      	bx	lr
 800514c:	40000400 	.word	0x40000400
 8005150:	40000800 	.word	0x40000800
 8005154:	40010800 	.word	0x40010800

08005158 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e031      	b.n	80051ce <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d106      	bne.n	8005184 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f829 	bl	80051d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3304      	adds	r3, #4
 8005194:	4619      	mov	r1, r3
 8005196:	4610      	mov	r0, r2
 8005198:	f000 fb46 	bl	8005828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bc80      	pop	{r7}
 80051e6:	4770      	bx	lr

080051e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d109      	bne.n	800520c <HAL_TIM_PWM_Start+0x24>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b01      	cmp	r3, #1
 8005202:	bf14      	ite	ne
 8005204:	2301      	movne	r3, #1
 8005206:	2300      	moveq	r3, #0
 8005208:	b2db      	uxtb	r3, r3
 800520a:	e022      	b.n	8005252 <HAL_TIM_PWM_Start+0x6a>
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	2b04      	cmp	r3, #4
 8005210:	d109      	bne.n	8005226 <HAL_TIM_PWM_Start+0x3e>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b01      	cmp	r3, #1
 800521c:	bf14      	ite	ne
 800521e:	2301      	movne	r3, #1
 8005220:	2300      	moveq	r3, #0
 8005222:	b2db      	uxtb	r3, r3
 8005224:	e015      	b.n	8005252 <HAL_TIM_PWM_Start+0x6a>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b08      	cmp	r3, #8
 800522a:	d109      	bne.n	8005240 <HAL_TIM_PWM_Start+0x58>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b01      	cmp	r3, #1
 8005236:	bf14      	ite	ne
 8005238:	2301      	movne	r3, #1
 800523a:	2300      	moveq	r3, #0
 800523c:	b2db      	uxtb	r3, r3
 800523e:	e008      	b.n	8005252 <HAL_TIM_PWM_Start+0x6a>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b01      	cmp	r3, #1
 800524a:	bf14      	ite	ne
 800524c:	2301      	movne	r3, #1
 800524e:	2300      	moveq	r3, #0
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e051      	b.n	80052fe <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d104      	bne.n	800526a <HAL_TIM_PWM_Start+0x82>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8005268:	e013      	b.n	8005292 <HAL_TIM_PWM_Start+0xaa>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b04      	cmp	r3, #4
 800526e:	d104      	bne.n	800527a <HAL_TIM_PWM_Start+0x92>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2202      	movs	r2, #2
 8005274:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8005278:	e00b      	b.n	8005292 <HAL_TIM_PWM_Start+0xaa>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b08      	cmp	r3, #8
 800527e:	d104      	bne.n	800528a <HAL_TIM_PWM_Start+0xa2>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005288:	e003      	b.n	8005292 <HAL_TIM_PWM_Start+0xaa>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2202      	movs	r2, #2
 800528e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2201      	movs	r2, #1
 8005298:	6839      	ldr	r1, [r7, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f000 fcbf 	bl	8005c1e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052a8:	d00e      	beq.n	80052c8 <HAL_TIM_PWM_Start+0xe0>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a16      	ldr	r2, [pc, #88]	@ (8005308 <HAL_TIM_PWM_Start+0x120>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d009      	beq.n	80052c8 <HAL_TIM_PWM_Start+0xe0>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a14      	ldr	r2, [pc, #80]	@ (800530c <HAL_TIM_PWM_Start+0x124>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d004      	beq.n	80052c8 <HAL_TIM_PWM_Start+0xe0>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a13      	ldr	r2, [pc, #76]	@ (8005310 <HAL_TIM_PWM_Start+0x128>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d111      	bne.n	80052ec <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2b06      	cmp	r3, #6
 80052d8:	d010      	beq.n	80052fc <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f042 0201 	orr.w	r2, r2, #1
 80052e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ea:	e007      	b.n	80052fc <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f042 0201 	orr.w	r2, r2, #1
 80052fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	40000400 	.word	0x40000400
 800530c:	40000800 	.word	0x40000800
 8005310:	40010800 	.word	0x40010800

08005314 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	2b02      	cmp	r3, #2
 8005328:	d122      	bne.n	8005370 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b02      	cmp	r3, #2
 8005336:	d11b      	bne.n	8005370 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0202 	mvn.w	r2, #2
 8005340:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	f003 0303 	and.w	r3, r3, #3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fa4a 	bl	80057f0 <HAL_TIM_IC_CaptureCallback>
 800535c:	e005      	b.n	800536a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fa3d 	bl	80057de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 fa4c 	bl	8005802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f003 0304 	and.w	r3, r3, #4
 800537a:	2b04      	cmp	r3, #4
 800537c:	d122      	bne.n	80053c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b04      	cmp	r3, #4
 800538a:	d11b      	bne.n	80053c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0204 	mvn.w	r2, #4
 8005394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2202      	movs	r2, #2
 800539a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fa20 	bl	80057f0 <HAL_TIM_IC_CaptureCallback>
 80053b0:	e005      	b.n	80053be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fa13 	bl	80057de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 fa22 	bl	8005802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	f003 0308 	and.w	r3, r3, #8
 80053ce:	2b08      	cmp	r3, #8
 80053d0:	d122      	bne.n	8005418 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f003 0308 	and.w	r3, r3, #8
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d11b      	bne.n	8005418 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f06f 0208 	mvn.w	r2, #8
 80053e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2204      	movs	r2, #4
 80053ee:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	f003 0303 	and.w	r3, r3, #3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f9f6 	bl	80057f0 <HAL_TIM_IC_CaptureCallback>
 8005404:	e005      	b.n	8005412 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f9e9 	bl	80057de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 f9f8 	bl	8005802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f003 0310 	and.w	r3, r3, #16
 8005422:	2b10      	cmp	r3, #16
 8005424:	d122      	bne.n	800546c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f003 0310 	and.w	r3, r3, #16
 8005430:	2b10      	cmp	r3, #16
 8005432:	d11b      	bne.n	800546c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f06f 0210 	mvn.w	r2, #16
 800543c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2208      	movs	r2, #8
 8005442:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f9cc 	bl	80057f0 <HAL_TIM_IC_CaptureCallback>
 8005458:	e005      	b.n	8005466 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f9bf 	bl	80057de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f9ce 	bl	8005802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b01      	cmp	r3, #1
 8005478:	d10e      	bne.n	8005498 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b01      	cmp	r3, #1
 8005486:	d107      	bne.n	8005498 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f06f 0201 	mvn.w	r2, #1
 8005490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7fd f8d4 	bl	8002640 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a2:	2b40      	cmp	r3, #64	@ 0x40
 80054a4:	d10e      	bne.n	80054c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b0:	2b40      	cmp	r3, #64	@ 0x40
 80054b2:	d107      	bne.n	80054c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80054bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f9a8 	bl	8005814 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054c4:	bf00      	nop
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054d8:	2300      	movs	r3, #0
 80054da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d101      	bne.n	80054ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054e6:	2302      	movs	r3, #2
 80054e8:	e0ae      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  switch (Channel)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b0c      	cmp	r3, #12
 80054f6:	f200 809f 	bhi.w	8005638 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80054fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005500 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005500:	08005535 	.word	0x08005535
 8005504:	08005639 	.word	0x08005639
 8005508:	08005639 	.word	0x08005639
 800550c:	08005639 	.word	0x08005639
 8005510:	08005575 	.word	0x08005575
 8005514:	08005639 	.word	0x08005639
 8005518:	08005639 	.word	0x08005639
 800551c:	08005639 	.word	0x08005639
 8005520:	080055b7 	.word	0x080055b7
 8005524:	08005639 	.word	0x08005639
 8005528:	08005639 	.word	0x08005639
 800552c:	08005639 	.word	0x08005639
 8005530:	080055f7 	.word	0x080055f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68b9      	ldr	r1, [r7, #8]
 800553a:	4618      	mov	r0, r3
 800553c:	f000 f9e4 	bl	8005908 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	699a      	ldr	r2, [r3, #24]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0208 	orr.w	r2, r2, #8
 800554e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699a      	ldr	r2, [r3, #24]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0204 	bic.w	r2, r2, #4
 800555e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6999      	ldr	r1, [r3, #24]
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	619a      	str	r2, [r3, #24]
      break;
 8005572:	e064      	b.n	800563e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68b9      	ldr	r1, [r7, #8]
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fa00 	bl	8005980 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	699a      	ldr	r2, [r3, #24]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800558e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	699a      	ldr	r2, [r3, #24]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800559e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6999      	ldr	r1, [r3, #24]
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	021a      	lsls	r2, r3, #8
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	430a      	orrs	r2, r1
 80055b2:	619a      	str	r2, [r3, #24]
      break;
 80055b4:	e043      	b.n	800563e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68b9      	ldr	r1, [r7, #8]
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 fa1d 	bl	80059fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	69da      	ldr	r2, [r3, #28]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f042 0208 	orr.w	r2, r2, #8
 80055d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	69da      	ldr	r2, [r3, #28]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 0204 	bic.w	r2, r2, #4
 80055e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	69d9      	ldr	r1, [r3, #28]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	430a      	orrs	r2, r1
 80055f2:	61da      	str	r2, [r3, #28]
      break;
 80055f4:	e023      	b.n	800563e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68b9      	ldr	r1, [r7, #8]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 fa3a 	bl	8005a76 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69da      	ldr	r2, [r3, #28]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005610:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69da      	ldr	r2, [r3, #28]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005620:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	69d9      	ldr	r1, [r3, #28]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	021a      	lsls	r2, r3, #8
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	61da      	str	r2, [r3, #28]
      break;
 8005636:	e002      	b.n	800563e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	75fb      	strb	r3, [r7, #23]
      break;
 800563c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8005646:	7dfb      	ldrb	r3, [r7, #23]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3718      	adds	r7, #24
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800565a:	2300      	movs	r3, #0
 800565c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005664:	2b01      	cmp	r3, #1
 8005666:	d101      	bne.n	800566c <HAL_TIM_ConfigClockSource+0x1c>
 8005668:	2302      	movs	r3, #2
 800566a:	e0b4      	b.n	80057d6 <HAL_TIM_ConfigClockSource+0x186>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800568a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005692:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056a4:	d03e      	beq.n	8005724 <HAL_TIM_ConfigClockSource+0xd4>
 80056a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056aa:	f200 8087 	bhi.w	80057bc <HAL_TIM_ConfigClockSource+0x16c>
 80056ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056b2:	f000 8086 	beq.w	80057c2 <HAL_TIM_ConfigClockSource+0x172>
 80056b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056ba:	d87f      	bhi.n	80057bc <HAL_TIM_ConfigClockSource+0x16c>
 80056bc:	2b70      	cmp	r3, #112	@ 0x70
 80056be:	d01a      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0xa6>
 80056c0:	2b70      	cmp	r3, #112	@ 0x70
 80056c2:	d87b      	bhi.n	80057bc <HAL_TIM_ConfigClockSource+0x16c>
 80056c4:	2b60      	cmp	r3, #96	@ 0x60
 80056c6:	d050      	beq.n	800576a <HAL_TIM_ConfigClockSource+0x11a>
 80056c8:	2b60      	cmp	r3, #96	@ 0x60
 80056ca:	d877      	bhi.n	80057bc <HAL_TIM_ConfigClockSource+0x16c>
 80056cc:	2b50      	cmp	r3, #80	@ 0x50
 80056ce:	d03c      	beq.n	800574a <HAL_TIM_ConfigClockSource+0xfa>
 80056d0:	2b50      	cmp	r3, #80	@ 0x50
 80056d2:	d873      	bhi.n	80057bc <HAL_TIM_ConfigClockSource+0x16c>
 80056d4:	2b40      	cmp	r3, #64	@ 0x40
 80056d6:	d058      	beq.n	800578a <HAL_TIM_ConfigClockSource+0x13a>
 80056d8:	2b40      	cmp	r3, #64	@ 0x40
 80056da:	d86f      	bhi.n	80057bc <HAL_TIM_ConfigClockSource+0x16c>
 80056dc:	2b30      	cmp	r3, #48	@ 0x30
 80056de:	d064      	beq.n	80057aa <HAL_TIM_ConfigClockSource+0x15a>
 80056e0:	2b30      	cmp	r3, #48	@ 0x30
 80056e2:	d86b      	bhi.n	80057bc <HAL_TIM_ConfigClockSource+0x16c>
 80056e4:	2b20      	cmp	r3, #32
 80056e6:	d060      	beq.n	80057aa <HAL_TIM_ConfigClockSource+0x15a>
 80056e8:	2b20      	cmp	r3, #32
 80056ea:	d867      	bhi.n	80057bc <HAL_TIM_ConfigClockSource+0x16c>
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d05c      	beq.n	80057aa <HAL_TIM_ConfigClockSource+0x15a>
 80056f0:	2b10      	cmp	r3, #16
 80056f2:	d05a      	beq.n	80057aa <HAL_TIM_ConfigClockSource+0x15a>
 80056f4:	e062      	b.n	80057bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005706:	f000 fa6b 	bl	8005be0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005718:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	609a      	str	r2, [r3, #8]
      break;
 8005722:	e04f      	b.n	80057c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005734:	f000 fa54 	bl	8005be0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689a      	ldr	r2, [r3, #8]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005746:	609a      	str	r2, [r3, #8]
      break;
 8005748:	e03c      	b.n	80057c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005756:	461a      	mov	r2, r3
 8005758:	f000 f9cb 	bl	8005af2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2150      	movs	r1, #80	@ 0x50
 8005762:	4618      	mov	r0, r3
 8005764:	f000 fa22 	bl	8005bac <TIM_ITRx_SetConfig>
      break;
 8005768:	e02c      	b.n	80057c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005776:	461a      	mov	r2, r3
 8005778:	f000 f9e9 	bl	8005b4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2160      	movs	r1, #96	@ 0x60
 8005782:	4618      	mov	r0, r3
 8005784:	f000 fa12 	bl	8005bac <TIM_ITRx_SetConfig>
      break;
 8005788:	e01c      	b.n	80057c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005796:	461a      	mov	r2, r3
 8005798:	f000 f9ab 	bl	8005af2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2140      	movs	r1, #64	@ 0x40
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 fa02 	bl	8005bac <TIM_ITRx_SetConfig>
      break;
 80057a8:	e00c      	b.n	80057c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4619      	mov	r1, r3
 80057b4:	4610      	mov	r0, r2
 80057b6:	f000 f9f9 	bl	8005bac <TIM_ITRx_SetConfig>
      break;
 80057ba:	e003      	b.n	80057c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	73fb      	strb	r3, [r7, #15]
      break;
 80057c0:	e000      	b.n	80057c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057e6:	bf00      	nop
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bc80      	pop	{r7}
 80057ee:	4770      	bx	lr

080057f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bc80      	pop	{r7}
 8005800:	4770      	bx	lr

08005802 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr

08005814 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	bc80      	pop	{r7}
 8005824:	4770      	bx	lr
	...

08005828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800583e:	d00f      	beq.n	8005860 <TIM_Base_SetConfig+0x38>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a2b      	ldr	r2, [pc, #172]	@ (80058f0 <TIM_Base_SetConfig+0xc8>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d00b      	beq.n	8005860 <TIM_Base_SetConfig+0x38>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a2a      	ldr	r2, [pc, #168]	@ (80058f4 <TIM_Base_SetConfig+0xcc>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d007      	beq.n	8005860 <TIM_Base_SetConfig+0x38>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a29      	ldr	r2, [pc, #164]	@ (80058f8 <TIM_Base_SetConfig+0xd0>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d003      	beq.n	8005860 <TIM_Base_SetConfig+0x38>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a28      	ldr	r2, [pc, #160]	@ (80058fc <TIM_Base_SetConfig+0xd4>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d108      	bne.n	8005872 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005878:	d017      	beq.n	80058aa <TIM_Base_SetConfig+0x82>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a1c      	ldr	r2, [pc, #112]	@ (80058f0 <TIM_Base_SetConfig+0xc8>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d013      	beq.n	80058aa <TIM_Base_SetConfig+0x82>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a1b      	ldr	r2, [pc, #108]	@ (80058f4 <TIM_Base_SetConfig+0xcc>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d00f      	beq.n	80058aa <TIM_Base_SetConfig+0x82>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a1a      	ldr	r2, [pc, #104]	@ (80058f8 <TIM_Base_SetConfig+0xd0>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d00b      	beq.n	80058aa <TIM_Base_SetConfig+0x82>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a19      	ldr	r2, [pc, #100]	@ (80058fc <TIM_Base_SetConfig+0xd4>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d007      	beq.n	80058aa <TIM_Base_SetConfig+0x82>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a18      	ldr	r2, [pc, #96]	@ (8005900 <TIM_Base_SetConfig+0xd8>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d003      	beq.n	80058aa <TIM_Base_SetConfig+0x82>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a17      	ldr	r2, [pc, #92]	@ (8005904 <TIM_Base_SetConfig+0xdc>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d108      	bne.n	80058bc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	615a      	str	r2, [r3, #20]
}
 80058e6:	bf00      	nop
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bc80      	pop	{r7}
 80058ee:	4770      	bx	lr
 80058f0:	40000400 	.word	0x40000400
 80058f4:	40000800 	.word	0x40000800
 80058f8:	40000c00 	.word	0x40000c00
 80058fc:	40010800 	.word	0x40010800
 8005900:	40010c00 	.word	0x40010c00
 8005904:	40011000 	.word	0x40011000

08005908 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	f023 0201 	bic.w	r2, r3, #1
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 0303 	bic.w	r3, r3, #3
 800593e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	4313      	orrs	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f023 0302 	bic.w	r3, r3, #2
 8005950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	621a      	str	r2, [r3, #32]
}
 8005976:	bf00      	nop
 8005978:	371c      	adds	r7, #28
 800597a:	46bd      	mov	sp, r7
 800597c:	bc80      	pop	{r7}
 800597e:	4770      	bx	lr

08005980 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	f023 0210 	bic.w	r2, r3, #16
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	021b      	lsls	r3, r3, #8
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f023 0320 	bic.w	r3, r3, #32
 80059ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	011b      	lsls	r3, r3, #4
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	621a      	str	r2, [r3, #32]
}
 80059f2:	bf00      	nop
 80059f4:	371c      	adds	r7, #28
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bc80      	pop	{r7}
 80059fa:	4770      	bx	lr

080059fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0303 	bic.w	r3, r3, #3
 8005a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	021b      	lsls	r3, r3, #8
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	621a      	str	r2, [r3, #32]
}
 8005a6c:	bf00      	nop
 8005a6e:	371c      	adds	r7, #28
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bc80      	pop	{r7}
 8005a74:	4770      	bx	lr

08005a76 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b087      	sub	sp, #28
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	69db      	ldr	r3, [r3, #28]
 8005a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aa4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	021b      	lsls	r3, r3, #8
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	031b      	lsls	r3, r3, #12
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	621a      	str	r2, [r3, #32]
}
 8005ae8:	bf00      	nop
 8005aea:	371c      	adds	r7, #28
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bc80      	pop	{r7}
 8005af0:	4770      	bx	lr

08005af2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b087      	sub	sp, #28
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	60f8      	str	r0, [r7, #12]
 8005afa:	60b9      	str	r1, [r7, #8]
 8005afc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6a1b      	ldr	r3, [r3, #32]
 8005b08:	f023 0201 	bic.w	r2, r3, #1
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	011b      	lsls	r3, r3, #4
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f023 030a 	bic.w	r3, r3, #10
 8005b2e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	621a      	str	r2, [r3, #32]
}
 8005b44:	bf00      	nop
 8005b46:	371c      	adds	r7, #28
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bc80      	pop	{r7}
 8005b4c:	4770      	bx	lr

08005b4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b087      	sub	sp, #28
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	60f8      	str	r0, [r7, #12]
 8005b56:	60b9      	str	r1, [r7, #8]
 8005b58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	f023 0210 	bic.w	r2, r3, #16
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	031b      	lsls	r3, r3, #12
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005b8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	011b      	lsls	r3, r3, #4
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	621a      	str	r2, [r3, #32]
}
 8005ba2:	bf00      	nop
 8005ba4:	371c      	adds	r7, #28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bc80      	pop	{r7}
 8005baa:	4770      	bx	lr

08005bac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bc2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	f043 0307 	orr.w	r3, r3, #7
 8005bce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	609a      	str	r2, [r3, #8]
}
 8005bd6:	bf00      	nop
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bc80      	pop	{r7}
 8005bde:	4770      	bx	lr

08005be0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
 8005bec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	021a      	lsls	r2, r3, #8
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	431a      	orrs	r2, r3
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	609a      	str	r2, [r3, #8]
}
 8005c14:	bf00      	nop
 8005c16:	371c      	adds	r7, #28
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bc80      	pop	{r7}
 8005c1c:	4770      	bx	lr

08005c1e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b087      	sub	sp, #28
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	60f8      	str	r0, [r7, #12]
 8005c26:	60b9      	str	r1, [r7, #8]
 8005c28:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	f003 031f 	and.w	r3, r3, #31
 8005c30:	2201      	movs	r2, #1
 8005c32:	fa02 f303 	lsl.w	r3, r2, r3
 8005c36:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6a1a      	ldr	r2, [r3, #32]
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	43db      	mvns	r3, r3
 8005c40:	401a      	ands	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6a1a      	ldr	r2, [r3, #32]
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	f003 031f 	and.w	r3, r3, #31
 8005c50:	6879      	ldr	r1, [r7, #4]
 8005c52:	fa01 f303 	lsl.w	r3, r1, r3
 8005c56:	431a      	orrs	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	621a      	str	r2, [r3, #32]
}
 8005c5c:	bf00      	nop
 8005c5e:	371c      	adds	r7, #28
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bc80      	pop	{r7}
 8005c64:	4770      	bx	lr
	...

08005c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	e046      	b.n	8005d0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ca6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cc2:	d00e      	beq.n	8005ce2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a13      	ldr	r2, [pc, #76]	@ (8005d18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d009      	beq.n	8005ce2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a12      	ldr	r2, [pc, #72]	@ (8005d1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d004      	beq.n	8005ce2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a10      	ldr	r2, [pc, #64]	@ (8005d20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d10c      	bne.n	8005cfc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ce8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bc80      	pop	{r7}
 8005d16:	4770      	bx	lr
 8005d18:	40000400 	.word	0x40000400
 8005d1c:	40000800 	.word	0x40000800
 8005d20:	40010800 	.word	0x40010800

08005d24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e042      	b.n	8005dbc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d106      	bne.n	8005d50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7fd f918 	bl	8002f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2224      	movs	r2, #36	@ 0x24
 8005d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68da      	ldr	r2, [r3, #12]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 fd09 	bl	8006780 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	691a      	ldr	r2, [r3, #16]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	695a      	ldr	r2, [r3, #20]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68da      	ldr	r2, [r3, #12]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2220      	movs	r2, #32
 8005da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2220      	movs	r2, #32
 8005db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3708      	adds	r7, #8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b20      	cmp	r3, #32
 8005ddc:	d121      	bne.n	8005e22 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <HAL_UART_Transmit_IT+0x26>
 8005de4:	88fb      	ldrh	r3, [r7, #6]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e01a      	b.n	8005e24 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	88fa      	ldrh	r2, [r7, #6]
 8005df8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	88fa      	ldrh	r2, [r7, #6]
 8005dfe:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2221      	movs	r2, #33	@ 0x21
 8005e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005e1c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	e000      	b.n	8005e24 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8005e22:	2302      	movs	r3, #2
  }
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bc80      	pop	{r7}
 8005e2c:	4770      	bx	lr

08005e2e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b084      	sub	sp, #16
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	60f8      	str	r0, [r7, #12]
 8005e36:	60b9      	str	r1, [r7, #8]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b20      	cmp	r3, #32
 8005e46:	d112      	bne.n	8005e6e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d002      	beq.n	8005e54 <HAL_UART_Receive_IT+0x26>
 8005e4e:	88fb      	ldrh	r3, [r7, #6]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e00b      	b.n	8005e70 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e5e:	88fb      	ldrh	r3, [r7, #6]
 8005e60:	461a      	mov	r2, r3
 8005e62:	68b9      	ldr	r1, [r7, #8]
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f000 fab6 	bl	80063d6 <UART_Start_Receive_IT>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	e000      	b.n	8005e70 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005e6e:	2302      	movs	r3, #2
  }
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b0ba      	sub	sp, #232	@ 0xe8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eae:	f003 030f 	and.w	r3, r3, #15
 8005eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005eb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10f      	bne.n	8005ede <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d009      	beq.n	8005ede <HAL_UART_IRQHandler+0x66>
 8005eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fb93 	bl	8006602 <UART_Receive_IT>
      return;
 8005edc:	e25b      	b.n	8006396 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005ede:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 80de 	beq.w	80060a4 <HAL_UART_IRQHandler+0x22c>
 8005ee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d106      	bne.n	8005f02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ef8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 80d1 	beq.w	80060a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00b      	beq.n	8005f26 <HAL_UART_IRQHandler+0xae>
 8005f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d005      	beq.n	8005f26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1e:	f043 0201 	orr.w	r2, r3, #1
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f2a:	f003 0304 	and.w	r3, r3, #4
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00b      	beq.n	8005f4a <HAL_UART_IRQHandler+0xd2>
 8005f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d005      	beq.n	8005f4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f42:	f043 0202 	orr.w	r2, r3, #2
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00b      	beq.n	8005f6e <HAL_UART_IRQHandler+0xf6>
 8005f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d005      	beq.n	8005f6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f66:	f043 0204 	orr.w	r2, r3, #4
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d011      	beq.n	8005f9e <HAL_UART_IRQHandler+0x126>
 8005f7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f7e:	f003 0320 	and.w	r3, r3, #32
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d105      	bne.n	8005f92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d005      	beq.n	8005f9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f96:	f043 0208 	orr.w	r2, r3, #8
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f000 81f2 	beq.w	800638c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fac:	f003 0320 	and.w	r3, r3, #32
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d008      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x14e>
 8005fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fb8:	f003 0320 	and.w	r3, r3, #32
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d002      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 fb1e 	bl	8006602 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	695b      	ldr	r3, [r3, #20]
 8005fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd0:	2b40      	cmp	r3, #64	@ 0x40
 8005fd2:	bf0c      	ite	eq
 8005fd4:	2301      	moveq	r3, #1
 8005fd6:	2300      	movne	r3, #0
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fe2:	f003 0308 	and.w	r3, r3, #8
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d103      	bne.n	8005ff2 <HAL_UART_IRQHandler+0x17a>
 8005fea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d04f      	beq.n	8006092 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fa28 	bl	8006448 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006002:	2b40      	cmp	r3, #64	@ 0x40
 8006004:	d141      	bne.n	800608a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3314      	adds	r3, #20
 800600c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006010:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006014:	e853 3f00 	ldrex	r3, [r3]
 8006018:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800601c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006020:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006024:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3314      	adds	r3, #20
 800602e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006032:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006036:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800603e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006042:	e841 2300 	strex	r3, r2, [r1]
 8006046:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800604a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1d9      	bne.n	8006006 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006056:	2b00      	cmp	r3, #0
 8006058:	d013      	beq.n	8006082 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800605e:	4a7e      	ldr	r2, [pc, #504]	@ (8006258 <HAL_UART_IRQHandler+0x3e0>)
 8006060:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006066:	4618      	mov	r0, r3
 8006068:	f7fd f9ac 	bl	80033c4 <HAL_DMA_Abort_IT>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d016      	beq.n	80060a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800607c:	4610      	mov	r0, r2
 800607e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006080:	e00e      	b.n	80060a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f993 	bl	80063ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006088:	e00a      	b.n	80060a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f98f 	bl	80063ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006090:	e006      	b.n	80060a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f98b 	bl	80063ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800609e:	e175      	b.n	800638c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060a0:	bf00      	nop
    return;
 80060a2:	e173      	b.n	800638c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	f040 814f 	bne.w	800634c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80060ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060b2:	f003 0310 	and.w	r3, r3, #16
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f000 8148 	beq.w	800634c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80060bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060c0:	f003 0310 	and.w	r3, r3, #16
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 8141 	beq.w	800634c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060ca:	2300      	movs	r3, #0
 80060cc:	60bb      	str	r3, [r7, #8]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	60bb      	str	r3, [r7, #8]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	60bb      	str	r3, [r7, #8]
 80060de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ea:	2b40      	cmp	r3, #64	@ 0x40
 80060ec:	f040 80b6 	bne.w	800625c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 8145 	beq.w	8006390 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800610a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800610e:	429a      	cmp	r2, r3
 8006110:	f080 813e 	bcs.w	8006390 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800611a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	2b20      	cmp	r3, #32
 8006124:	f000 8088 	beq.w	8006238 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	330c      	adds	r3, #12
 800612e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006136:	e853 3f00 	ldrex	r3, [r3]
 800613a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800613e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006142:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006146:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	330c      	adds	r3, #12
 8006150:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006154:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006158:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006160:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006164:	e841 2300 	strex	r3, r2, [r1]
 8006168:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800616c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1d9      	bne.n	8006128 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3314      	adds	r3, #20
 800617a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800617e:	e853 3f00 	ldrex	r3, [r3]
 8006182:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006184:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006186:	f023 0301 	bic.w	r3, r3, #1
 800618a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3314      	adds	r3, #20
 8006194:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006198:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800619c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80061a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80061a4:	e841 2300 	strex	r3, r2, [r1]
 80061a8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80061aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1e1      	bne.n	8006174 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	3314      	adds	r3, #20
 80061b6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061ba:	e853 3f00 	ldrex	r3, [r3]
 80061be:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80061c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3314      	adds	r3, #20
 80061d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80061d4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80061d6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80061da:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80061dc:	e841 2300 	strex	r3, r2, [r1]
 80061e0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80061e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1e3      	bne.n	80061b0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2220      	movs	r2, #32
 80061ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	330c      	adds	r3, #12
 80061fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006200:	e853 3f00 	ldrex	r3, [r3]
 8006204:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006206:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006208:	f023 0310 	bic.w	r3, r3, #16
 800620c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	330c      	adds	r3, #12
 8006216:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800621a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800621c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006220:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006222:	e841 2300 	strex	r3, r2, [r1]
 8006226:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006228:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1e3      	bne.n	80061f6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006232:	4618      	mov	r0, r3
 8006234:	f7fd f889 	bl	800334a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006246:	b29b      	uxth	r3, r3
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	b29b      	uxth	r3, r3
 800624c:	4619      	mov	r1, r3
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f8b6 	bl	80063c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006254:	e09c      	b.n	8006390 <HAL_UART_IRQHandler+0x518>
 8006256:	bf00      	nop
 8006258:	0800650d 	.word	0x0800650d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006264:	b29b      	uxth	r3, r3
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006270:	b29b      	uxth	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 808e 	beq.w	8006394 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006278:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 8089 	beq.w	8006394 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	330c      	adds	r3, #12
 8006288:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800628c:	e853 3f00 	ldrex	r3, [r3]
 8006290:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006294:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006298:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	330c      	adds	r3, #12
 80062a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80062a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80062a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062ae:	e841 2300 	strex	r3, r2, [r1]
 80062b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1e3      	bne.n	8006282 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	3314      	adds	r3, #20
 80062c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c4:	e853 3f00 	ldrex	r3, [r3]
 80062c8:	623b      	str	r3, [r7, #32]
   return(result);
 80062ca:	6a3b      	ldr	r3, [r7, #32]
 80062cc:	f023 0301 	bic.w	r3, r3, #1
 80062d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	3314      	adds	r3, #20
 80062da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80062de:	633a      	str	r2, [r7, #48]	@ 0x30
 80062e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062e6:	e841 2300 	strex	r3, r2, [r1]
 80062ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1e3      	bne.n	80062ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2220      	movs	r2, #32
 80062f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	330c      	adds	r3, #12
 8006306:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	e853 3f00 	ldrex	r3, [r3]
 800630e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 0310 	bic.w	r3, r3, #16
 8006316:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	330c      	adds	r3, #12
 8006320:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006324:	61fa      	str	r2, [r7, #28]
 8006326:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006328:	69b9      	ldr	r1, [r7, #24]
 800632a:	69fa      	ldr	r2, [r7, #28]
 800632c:	e841 2300 	strex	r3, r2, [r1]
 8006330:	617b      	str	r3, [r7, #20]
   return(result);
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1e3      	bne.n	8006300 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800633e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006342:	4619      	mov	r1, r3
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f83b 	bl	80063c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800634a:	e023      	b.n	8006394 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800634c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006354:	2b00      	cmp	r3, #0
 8006356:	d009      	beq.n	800636c <HAL_UART_IRQHandler+0x4f4>
 8006358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800635c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006360:	2b00      	cmp	r3, #0
 8006362:	d003      	beq.n	800636c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f8e5 	bl	8006534 <UART_Transmit_IT>
    return;
 800636a:	e014      	b.n	8006396 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800636c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00e      	beq.n	8006396 <HAL_UART_IRQHandler+0x51e>
 8006378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800637c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006380:	2b00      	cmp	r3, #0
 8006382:	d008      	beq.n	8006396 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f924 	bl	80065d2 <UART_EndTransmit_IT>
    return;
 800638a:	e004      	b.n	8006396 <HAL_UART_IRQHandler+0x51e>
    return;
 800638c:	bf00      	nop
 800638e:	e002      	b.n	8006396 <HAL_UART_IRQHandler+0x51e>
      return;
 8006390:	bf00      	nop
 8006392:	e000      	b.n	8006396 <HAL_UART_IRQHandler+0x51e>
      return;
 8006394:	bf00      	nop
  }
}
 8006396:	37e8      	adds	r7, #232	@ 0xe8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bc80      	pop	{r7}
 80063ac:	4770      	bx	lr

080063ae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b083      	sub	sp, #12
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bc80      	pop	{r7}
 80063be:	4770      	bx	lr

080063c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	460b      	mov	r3, r1
 80063ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bc80      	pop	{r7}
 80063d4:	4770      	bx	lr

080063d6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b085      	sub	sp, #20
 80063da:	af00      	add	r7, sp, #0
 80063dc:	60f8      	str	r0, [r7, #12]
 80063de:	60b9      	str	r1, [r7, #8]
 80063e0:	4613      	mov	r3, r2
 80063e2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	68ba      	ldr	r2, [r7, #8]
 80063e8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	88fa      	ldrh	r2, [r7, #6]
 80063ee:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	88fa      	ldrh	r2, [r7, #6]
 80063f4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2222      	movs	r2, #34	@ 0x22
 8006400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d007      	beq.n	800641c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68da      	ldr	r2, [r3, #12]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800641a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	695a      	ldr	r2, [r3, #20]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f042 0201 	orr.w	r2, r2, #1
 800642a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68da      	ldr	r2, [r3, #12]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f042 0220 	orr.w	r2, r2, #32
 800643a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	bc80      	pop	{r7}
 8006446:	4770      	bx	lr

08006448 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006448:	b480      	push	{r7}
 800644a:	b095      	sub	sp, #84	@ 0x54
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	330c      	adds	r3, #12
 8006456:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800645a:	e853 3f00 	ldrex	r3, [r3]
 800645e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006462:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006466:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	330c      	adds	r3, #12
 800646e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006470:	643a      	str	r2, [r7, #64]	@ 0x40
 8006472:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006474:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006476:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006478:	e841 2300 	strex	r3, r2, [r1]
 800647c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800647e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1e5      	bne.n	8006450 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	3314      	adds	r3, #20
 800648a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	e853 3f00 	ldrex	r3, [r3]
 8006492:	61fb      	str	r3, [r7, #28]
   return(result);
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	f023 0301 	bic.w	r3, r3, #1
 800649a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3314      	adds	r3, #20
 80064a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064ac:	e841 2300 	strex	r3, r2, [r1]
 80064b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1e5      	bne.n	8006484 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d119      	bne.n	80064f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	330c      	adds	r3, #12
 80064c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	e853 3f00 	ldrex	r3, [r3]
 80064ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	f023 0310 	bic.w	r3, r3, #16
 80064d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	330c      	adds	r3, #12
 80064de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064e0:	61ba      	str	r2, [r7, #24]
 80064e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e4:	6979      	ldr	r1, [r7, #20]
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	e841 2300 	strex	r3, r2, [r1]
 80064ec:	613b      	str	r3, [r7, #16]
   return(result);
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1e5      	bne.n	80064c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2220      	movs	r2, #32
 80064f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006502:	bf00      	nop
 8006504:	3754      	adds	r7, #84	@ 0x54
 8006506:	46bd      	mov	sp, r7
 8006508:	bc80      	pop	{r7}
 800650a:	4770      	bx	lr

0800650c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006518:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f7ff ff41 	bl	80063ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800652c:	bf00      	nop
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b21      	cmp	r3, #33	@ 0x21
 8006546:	d13e      	bne.n	80065c6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006550:	d114      	bne.n	800657c <UART_Transmit_IT+0x48>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d110      	bne.n	800657c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	881b      	ldrh	r3, [r3, #0]
 8006564:	461a      	mov	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800656e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	1c9a      	adds	r2, r3, #2
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	621a      	str	r2, [r3, #32]
 800657a:	e008      	b.n	800658e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	1c59      	adds	r1, r3, #1
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	6211      	str	r1, [r2, #32]
 8006586:	781a      	ldrb	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006592:	b29b      	uxth	r3, r3
 8006594:	3b01      	subs	r3, #1
 8006596:	b29b      	uxth	r3, r3
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	4619      	mov	r1, r3
 800659c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10f      	bne.n	80065c2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68da      	ldr	r2, [r3, #12]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68da      	ldr	r2, [r3, #12]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	e000      	b.n	80065c8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80065c6:	2302      	movs	r3, #2
  }
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3714      	adds	r7, #20
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bc80      	pop	{r7}
 80065d0:	4770      	bx	lr

080065d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b082      	sub	sp, #8
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68da      	ldr	r2, [r3, #12]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7ff fed2 	bl	800639c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b08c      	sub	sp, #48	@ 0x30
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b22      	cmp	r3, #34	@ 0x22
 8006614:	f040 80ae 	bne.w	8006774 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006620:	d117      	bne.n	8006652 <UART_Receive_IT+0x50>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d113      	bne.n	8006652 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800662a:	2300      	movs	r3, #0
 800662c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006632:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	b29b      	uxth	r3, r3
 800663c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006640:	b29a      	uxth	r2, r3
 8006642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006644:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800664a:	1c9a      	adds	r2, r3, #2
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006650:	e026      	b.n	80066a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006656:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006658:	2300      	movs	r3, #0
 800665a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006664:	d007      	beq.n	8006676 <UART_Receive_IT+0x74>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10a      	bne.n	8006684 <UART_Receive_IT+0x82>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d106      	bne.n	8006684 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	b2da      	uxtb	r2, r3
 800667e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006680:	701a      	strb	r2, [r3, #0]
 8006682:	e008      	b.n	8006696 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	b2db      	uxtb	r3, r3
 800668c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006690:	b2da      	uxtb	r2, r3
 8006692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006694:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669a:	1c5a      	adds	r2, r3, #1
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	3b01      	subs	r3, #1
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	4619      	mov	r1, r3
 80066ae:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d15d      	bne.n	8006770 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0220 	bic.w	r2, r2, #32
 80066c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68da      	ldr	r2, [r3, #12]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80066d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	695a      	ldr	r2, [r3, #20]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f022 0201 	bic.w	r2, r2, #1
 80066e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2220      	movs	r2, #32
 80066e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d135      	bne.n	8006766 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	330c      	adds	r3, #12
 8006706:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	e853 3f00 	ldrex	r3, [r3]
 800670e:	613b      	str	r3, [r7, #16]
   return(result);
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	f023 0310 	bic.w	r3, r3, #16
 8006716:	627b      	str	r3, [r7, #36]	@ 0x24
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	330c      	adds	r3, #12
 800671e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006720:	623a      	str	r2, [r7, #32]
 8006722:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006724:	69f9      	ldr	r1, [r7, #28]
 8006726:	6a3a      	ldr	r2, [r7, #32]
 8006728:	e841 2300 	strex	r3, r2, [r1]
 800672c:	61bb      	str	r3, [r7, #24]
   return(result);
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1e5      	bne.n	8006700 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0310 	and.w	r3, r3, #16
 800673e:	2b10      	cmp	r3, #16
 8006740:	d10a      	bne.n	8006758 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006742:	2300      	movs	r3, #0
 8006744:	60fb      	str	r3, [r7, #12]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	60fb      	str	r3, [r7, #12]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	60fb      	str	r3, [r7, #12]
 8006756:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800675c:	4619      	mov	r1, r3
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7ff fe2e 	bl	80063c0 <HAL_UARTEx_RxEventCallback>
 8006764:	e002      	b.n	800676c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f7fc f8a2 	bl	80028b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800676c:	2300      	movs	r3, #0
 800676e:	e002      	b.n	8006776 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006770:	2300      	movs	r3, #0
 8006772:	e000      	b.n	8006776 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006774:	2302      	movs	r3, #2
  }
}
 8006776:	4618      	mov	r0, r3
 8006778:	3730      	adds	r7, #48	@ 0x30
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
	...

08006780 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68da      	ldr	r2, [r3, #12]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	689a      	ldr	r2, [r3, #8]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	431a      	orrs	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	431a      	orrs	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80067c0:	f023 030c 	bic.w	r3, r3, #12
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	6812      	ldr	r2, [r2, #0]
 80067c8:	68b9      	ldr	r1, [r7, #8]
 80067ca:	430b      	orrs	r3, r1
 80067cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	695b      	ldr	r3, [r3, #20]
 80067d4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	699a      	ldr	r2, [r3, #24]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a55      	ldr	r2, [pc, #340]	@ (8006940 <UART_SetConfig+0x1c0>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d103      	bne.n	80067f6 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80067ee:	f7fe fbad 	bl	8004f4c <HAL_RCC_GetPCLK2Freq>
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	e002      	b.n	80067fc <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80067f6:	f7fe fb95 	bl	8004f24 <HAL_RCC_GetPCLK1Freq>
 80067fa:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006804:	d14c      	bne.n	80068a0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	4613      	mov	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4413      	add	r3, r2
 800680e:	009a      	lsls	r2, r3, #2
 8006810:	441a      	add	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	005b      	lsls	r3, r3, #1
 8006818:	fbb2 f3f3 	udiv	r3, r2, r3
 800681c:	4a49      	ldr	r2, [pc, #292]	@ (8006944 <UART_SetConfig+0x1c4>)
 800681e:	fba2 2303 	umull	r2, r3, r2, r3
 8006822:	095b      	lsrs	r3, r3, #5
 8006824:	0119      	lsls	r1, r3, #4
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	4613      	mov	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	009a      	lsls	r2, r3, #2
 8006830:	441a      	add	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	005b      	lsls	r3, r3, #1
 8006838:	fbb2 f2f3 	udiv	r2, r2, r3
 800683c:	4b41      	ldr	r3, [pc, #260]	@ (8006944 <UART_SetConfig+0x1c4>)
 800683e:	fba3 0302 	umull	r0, r3, r3, r2
 8006842:	095b      	lsrs	r3, r3, #5
 8006844:	2064      	movs	r0, #100	@ 0x64
 8006846:	fb00 f303 	mul.w	r3, r0, r3
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	00db      	lsls	r3, r3, #3
 800684e:	3332      	adds	r3, #50	@ 0x32
 8006850:	4a3c      	ldr	r2, [pc, #240]	@ (8006944 <UART_SetConfig+0x1c4>)
 8006852:	fba2 2303 	umull	r2, r3, r2, r3
 8006856:	095b      	lsrs	r3, r3, #5
 8006858:	005b      	lsls	r3, r3, #1
 800685a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800685e:	4419      	add	r1, r3
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	4613      	mov	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	009a      	lsls	r2, r3, #2
 800686a:	441a      	add	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	005b      	lsls	r3, r3, #1
 8006872:	fbb2 f2f3 	udiv	r2, r2, r3
 8006876:	4b33      	ldr	r3, [pc, #204]	@ (8006944 <UART_SetConfig+0x1c4>)
 8006878:	fba3 0302 	umull	r0, r3, r3, r2
 800687c:	095b      	lsrs	r3, r3, #5
 800687e:	2064      	movs	r0, #100	@ 0x64
 8006880:	fb00 f303 	mul.w	r3, r0, r3
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	00db      	lsls	r3, r3, #3
 8006888:	3332      	adds	r3, #50	@ 0x32
 800688a:	4a2e      	ldr	r2, [pc, #184]	@ (8006944 <UART_SetConfig+0x1c4>)
 800688c:	fba2 2303 	umull	r2, r3, r2, r3
 8006890:	095b      	lsrs	r3, r3, #5
 8006892:	f003 0207 	and.w	r2, r3, #7
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	440a      	add	r2, r1
 800689c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800689e:	e04a      	b.n	8006936 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	4613      	mov	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	009a      	lsls	r2, r3, #2
 80068aa:	441a      	add	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b6:	4a23      	ldr	r2, [pc, #140]	@ (8006944 <UART_SetConfig+0x1c4>)
 80068b8:	fba2 2303 	umull	r2, r3, r2, r3
 80068bc:	095b      	lsrs	r3, r3, #5
 80068be:	0119      	lsls	r1, r3, #4
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	4613      	mov	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	009a      	lsls	r2, r3, #2
 80068ca:	441a      	add	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80068d6:	4b1b      	ldr	r3, [pc, #108]	@ (8006944 <UART_SetConfig+0x1c4>)
 80068d8:	fba3 0302 	umull	r0, r3, r3, r2
 80068dc:	095b      	lsrs	r3, r3, #5
 80068de:	2064      	movs	r0, #100	@ 0x64
 80068e0:	fb00 f303 	mul.w	r3, r0, r3
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	011b      	lsls	r3, r3, #4
 80068e8:	3332      	adds	r3, #50	@ 0x32
 80068ea:	4a16      	ldr	r2, [pc, #88]	@ (8006944 <UART_SetConfig+0x1c4>)
 80068ec:	fba2 2303 	umull	r2, r3, r2, r3
 80068f0:	095b      	lsrs	r3, r3, #5
 80068f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80068f6:	4419      	add	r1, r3
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	4613      	mov	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	009a      	lsls	r2, r3, #2
 8006902:	441a      	add	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	fbb2 f2f3 	udiv	r2, r2, r3
 800690e:	4b0d      	ldr	r3, [pc, #52]	@ (8006944 <UART_SetConfig+0x1c4>)
 8006910:	fba3 0302 	umull	r0, r3, r3, r2
 8006914:	095b      	lsrs	r3, r3, #5
 8006916:	2064      	movs	r0, #100	@ 0x64
 8006918:	fb00 f303 	mul.w	r3, r0, r3
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	011b      	lsls	r3, r3, #4
 8006920:	3332      	adds	r3, #50	@ 0x32
 8006922:	4a08      	ldr	r2, [pc, #32]	@ (8006944 <UART_SetConfig+0x1c4>)
 8006924:	fba2 2303 	umull	r2, r3, r2, r3
 8006928:	095b      	lsrs	r3, r3, #5
 800692a:	f003 020f 	and.w	r2, r3, #15
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	440a      	add	r2, r1
 8006934:	609a      	str	r2, [r3, #8]
}
 8006936:	bf00      	nop
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	40013800 	.word	0x40013800
 8006944:	51eb851f 	.word	0x51eb851f

08006948 <__cvt>:
 8006948:	2b00      	cmp	r3, #0
 800694a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800694e:	461d      	mov	r5, r3
 8006950:	bfbb      	ittet	lt
 8006952:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006956:	461d      	movlt	r5, r3
 8006958:	2300      	movge	r3, #0
 800695a:	232d      	movlt	r3, #45	@ 0x2d
 800695c:	b088      	sub	sp, #32
 800695e:	4614      	mov	r4, r2
 8006960:	bfb8      	it	lt
 8006962:	4614      	movlt	r4, r2
 8006964:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006966:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006968:	7013      	strb	r3, [r2, #0]
 800696a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800696c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006970:	f023 0820 	bic.w	r8, r3, #32
 8006974:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006978:	d005      	beq.n	8006986 <__cvt+0x3e>
 800697a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800697e:	d100      	bne.n	8006982 <__cvt+0x3a>
 8006980:	3601      	adds	r6, #1
 8006982:	2302      	movs	r3, #2
 8006984:	e000      	b.n	8006988 <__cvt+0x40>
 8006986:	2303      	movs	r3, #3
 8006988:	aa07      	add	r2, sp, #28
 800698a:	9204      	str	r2, [sp, #16]
 800698c:	aa06      	add	r2, sp, #24
 800698e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006992:	e9cd 3600 	strd	r3, r6, [sp]
 8006996:	4622      	mov	r2, r4
 8006998:	462b      	mov	r3, r5
 800699a:	f000 fe6d 	bl	8007678 <_dtoa_r>
 800699e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80069a2:	4607      	mov	r7, r0
 80069a4:	d119      	bne.n	80069da <__cvt+0x92>
 80069a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80069a8:	07db      	lsls	r3, r3, #31
 80069aa:	d50e      	bpl.n	80069ca <__cvt+0x82>
 80069ac:	eb00 0906 	add.w	r9, r0, r6
 80069b0:	2200      	movs	r2, #0
 80069b2:	2300      	movs	r3, #0
 80069b4:	4620      	mov	r0, r4
 80069b6:	4629      	mov	r1, r5
 80069b8:	f7fa f80e 	bl	80009d8 <__aeabi_dcmpeq>
 80069bc:	b108      	cbz	r0, 80069c2 <__cvt+0x7a>
 80069be:	f8cd 901c 	str.w	r9, [sp, #28]
 80069c2:	2230      	movs	r2, #48	@ 0x30
 80069c4:	9b07      	ldr	r3, [sp, #28]
 80069c6:	454b      	cmp	r3, r9
 80069c8:	d31e      	bcc.n	8006a08 <__cvt+0xc0>
 80069ca:	4638      	mov	r0, r7
 80069cc:	9b07      	ldr	r3, [sp, #28]
 80069ce:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80069d0:	1bdb      	subs	r3, r3, r7
 80069d2:	6013      	str	r3, [r2, #0]
 80069d4:	b008      	add	sp, #32
 80069d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069da:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80069de:	eb00 0906 	add.w	r9, r0, r6
 80069e2:	d1e5      	bne.n	80069b0 <__cvt+0x68>
 80069e4:	7803      	ldrb	r3, [r0, #0]
 80069e6:	2b30      	cmp	r3, #48	@ 0x30
 80069e8:	d10a      	bne.n	8006a00 <__cvt+0xb8>
 80069ea:	2200      	movs	r2, #0
 80069ec:	2300      	movs	r3, #0
 80069ee:	4620      	mov	r0, r4
 80069f0:	4629      	mov	r1, r5
 80069f2:	f7f9 fff1 	bl	80009d8 <__aeabi_dcmpeq>
 80069f6:	b918      	cbnz	r0, 8006a00 <__cvt+0xb8>
 80069f8:	f1c6 0601 	rsb	r6, r6, #1
 80069fc:	f8ca 6000 	str.w	r6, [sl]
 8006a00:	f8da 3000 	ldr.w	r3, [sl]
 8006a04:	4499      	add	r9, r3
 8006a06:	e7d3      	b.n	80069b0 <__cvt+0x68>
 8006a08:	1c59      	adds	r1, r3, #1
 8006a0a:	9107      	str	r1, [sp, #28]
 8006a0c:	701a      	strb	r2, [r3, #0]
 8006a0e:	e7d9      	b.n	80069c4 <__cvt+0x7c>

08006a10 <__exponent>:
 8006a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a12:	2900      	cmp	r1, #0
 8006a14:	bfb6      	itet	lt
 8006a16:	232d      	movlt	r3, #45	@ 0x2d
 8006a18:	232b      	movge	r3, #43	@ 0x2b
 8006a1a:	4249      	neglt	r1, r1
 8006a1c:	2909      	cmp	r1, #9
 8006a1e:	7002      	strb	r2, [r0, #0]
 8006a20:	7043      	strb	r3, [r0, #1]
 8006a22:	dd29      	ble.n	8006a78 <__exponent+0x68>
 8006a24:	f10d 0307 	add.w	r3, sp, #7
 8006a28:	461d      	mov	r5, r3
 8006a2a:	270a      	movs	r7, #10
 8006a2c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006a30:	461a      	mov	r2, r3
 8006a32:	fb07 1416 	mls	r4, r7, r6, r1
 8006a36:	3430      	adds	r4, #48	@ 0x30
 8006a38:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006a3c:	460c      	mov	r4, r1
 8006a3e:	2c63      	cmp	r4, #99	@ 0x63
 8006a40:	4631      	mov	r1, r6
 8006a42:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a46:	dcf1      	bgt.n	8006a2c <__exponent+0x1c>
 8006a48:	3130      	adds	r1, #48	@ 0x30
 8006a4a:	1e94      	subs	r4, r2, #2
 8006a4c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006a50:	4623      	mov	r3, r4
 8006a52:	1c41      	adds	r1, r0, #1
 8006a54:	42ab      	cmp	r3, r5
 8006a56:	d30a      	bcc.n	8006a6e <__exponent+0x5e>
 8006a58:	f10d 0309 	add.w	r3, sp, #9
 8006a5c:	1a9b      	subs	r3, r3, r2
 8006a5e:	42ac      	cmp	r4, r5
 8006a60:	bf88      	it	hi
 8006a62:	2300      	movhi	r3, #0
 8006a64:	3302      	adds	r3, #2
 8006a66:	4403      	add	r3, r0
 8006a68:	1a18      	subs	r0, r3, r0
 8006a6a:	b003      	add	sp, #12
 8006a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a6e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006a72:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006a76:	e7ed      	b.n	8006a54 <__exponent+0x44>
 8006a78:	2330      	movs	r3, #48	@ 0x30
 8006a7a:	3130      	adds	r1, #48	@ 0x30
 8006a7c:	7083      	strb	r3, [r0, #2]
 8006a7e:	70c1      	strb	r1, [r0, #3]
 8006a80:	1d03      	adds	r3, r0, #4
 8006a82:	e7f1      	b.n	8006a68 <__exponent+0x58>

08006a84 <_printf_float>:
 8006a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a88:	b091      	sub	sp, #68	@ 0x44
 8006a8a:	460c      	mov	r4, r1
 8006a8c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006a90:	4616      	mov	r6, r2
 8006a92:	461f      	mov	r7, r3
 8006a94:	4605      	mov	r5, r0
 8006a96:	f000 fce1 	bl	800745c <_localeconv_r>
 8006a9a:	6803      	ldr	r3, [r0, #0]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	9308      	str	r3, [sp, #32]
 8006aa0:	f7f9 fb6e 	bl	8000180 <strlen>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	930e      	str	r3, [sp, #56]	@ 0x38
 8006aa8:	f8d8 3000 	ldr.w	r3, [r8]
 8006aac:	9009      	str	r0, [sp, #36]	@ 0x24
 8006aae:	3307      	adds	r3, #7
 8006ab0:	f023 0307 	bic.w	r3, r3, #7
 8006ab4:	f103 0208 	add.w	r2, r3, #8
 8006ab8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006abc:	f8d4 b000 	ldr.w	fp, [r4]
 8006ac0:	f8c8 2000 	str.w	r2, [r8]
 8006ac4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ac8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006acc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ace:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006ada:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006ade:	4b9c      	ldr	r3, [pc, #624]	@ (8006d50 <_printf_float+0x2cc>)
 8006ae0:	f7f9 ffac 	bl	8000a3c <__aeabi_dcmpun>
 8006ae4:	bb70      	cbnz	r0, 8006b44 <_printf_float+0xc0>
 8006ae6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006aea:	f04f 32ff 	mov.w	r2, #4294967295
 8006aee:	4b98      	ldr	r3, [pc, #608]	@ (8006d50 <_printf_float+0x2cc>)
 8006af0:	f7f9 ff86 	bl	8000a00 <__aeabi_dcmple>
 8006af4:	bb30      	cbnz	r0, 8006b44 <_printf_float+0xc0>
 8006af6:	2200      	movs	r2, #0
 8006af8:	2300      	movs	r3, #0
 8006afa:	4640      	mov	r0, r8
 8006afc:	4649      	mov	r1, r9
 8006afe:	f7f9 ff75 	bl	80009ec <__aeabi_dcmplt>
 8006b02:	b110      	cbz	r0, 8006b0a <_printf_float+0x86>
 8006b04:	232d      	movs	r3, #45	@ 0x2d
 8006b06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b0a:	4a92      	ldr	r2, [pc, #584]	@ (8006d54 <_printf_float+0x2d0>)
 8006b0c:	4b92      	ldr	r3, [pc, #584]	@ (8006d58 <_printf_float+0x2d4>)
 8006b0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006b12:	bf94      	ite	ls
 8006b14:	4690      	movls	r8, r2
 8006b16:	4698      	movhi	r8, r3
 8006b18:	2303      	movs	r3, #3
 8006b1a:	f04f 0900 	mov.w	r9, #0
 8006b1e:	6123      	str	r3, [r4, #16]
 8006b20:	f02b 0304 	bic.w	r3, fp, #4
 8006b24:	6023      	str	r3, [r4, #0]
 8006b26:	4633      	mov	r3, r6
 8006b28:	4621      	mov	r1, r4
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	9700      	str	r7, [sp, #0]
 8006b2e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006b30:	f000 f9d4 	bl	8006edc <_printf_common>
 8006b34:	3001      	adds	r0, #1
 8006b36:	f040 8090 	bne.w	8006c5a <_printf_float+0x1d6>
 8006b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3e:	b011      	add	sp, #68	@ 0x44
 8006b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b44:	4642      	mov	r2, r8
 8006b46:	464b      	mov	r3, r9
 8006b48:	4640      	mov	r0, r8
 8006b4a:	4649      	mov	r1, r9
 8006b4c:	f7f9 ff76 	bl	8000a3c <__aeabi_dcmpun>
 8006b50:	b148      	cbz	r0, 8006b66 <_printf_float+0xe2>
 8006b52:	464b      	mov	r3, r9
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	bfb8      	it	lt
 8006b58:	232d      	movlt	r3, #45	@ 0x2d
 8006b5a:	4a80      	ldr	r2, [pc, #512]	@ (8006d5c <_printf_float+0x2d8>)
 8006b5c:	bfb8      	it	lt
 8006b5e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006b62:	4b7f      	ldr	r3, [pc, #508]	@ (8006d60 <_printf_float+0x2dc>)
 8006b64:	e7d3      	b.n	8006b0e <_printf_float+0x8a>
 8006b66:	6863      	ldr	r3, [r4, #4]
 8006b68:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006b6c:	1c5a      	adds	r2, r3, #1
 8006b6e:	d13f      	bne.n	8006bf0 <_printf_float+0x16c>
 8006b70:	2306      	movs	r3, #6
 8006b72:	6063      	str	r3, [r4, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006b7a:	6023      	str	r3, [r4, #0]
 8006b7c:	9206      	str	r2, [sp, #24]
 8006b7e:	aa0e      	add	r2, sp, #56	@ 0x38
 8006b80:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006b84:	aa0d      	add	r2, sp, #52	@ 0x34
 8006b86:	9203      	str	r2, [sp, #12]
 8006b88:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006b8c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006b90:	6863      	ldr	r3, [r4, #4]
 8006b92:	4642      	mov	r2, r8
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	4628      	mov	r0, r5
 8006b98:	464b      	mov	r3, r9
 8006b9a:	910a      	str	r1, [sp, #40]	@ 0x28
 8006b9c:	f7ff fed4 	bl	8006948 <__cvt>
 8006ba0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ba2:	4680      	mov	r8, r0
 8006ba4:	2947      	cmp	r1, #71	@ 0x47
 8006ba6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006ba8:	d128      	bne.n	8006bfc <_printf_float+0x178>
 8006baa:	1cc8      	adds	r0, r1, #3
 8006bac:	db02      	blt.n	8006bb4 <_printf_float+0x130>
 8006bae:	6863      	ldr	r3, [r4, #4]
 8006bb0:	4299      	cmp	r1, r3
 8006bb2:	dd40      	ble.n	8006c36 <_printf_float+0x1b2>
 8006bb4:	f1aa 0a02 	sub.w	sl, sl, #2
 8006bb8:	fa5f fa8a 	uxtb.w	sl, sl
 8006bbc:	4652      	mov	r2, sl
 8006bbe:	3901      	subs	r1, #1
 8006bc0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006bc4:	910d      	str	r1, [sp, #52]	@ 0x34
 8006bc6:	f7ff ff23 	bl	8006a10 <__exponent>
 8006bca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006bcc:	4681      	mov	r9, r0
 8006bce:	1813      	adds	r3, r2, r0
 8006bd0:	2a01      	cmp	r2, #1
 8006bd2:	6123      	str	r3, [r4, #16]
 8006bd4:	dc02      	bgt.n	8006bdc <_printf_float+0x158>
 8006bd6:	6822      	ldr	r2, [r4, #0]
 8006bd8:	07d2      	lsls	r2, r2, #31
 8006bda:	d501      	bpl.n	8006be0 <_printf_float+0x15c>
 8006bdc:	3301      	adds	r3, #1
 8006bde:	6123      	str	r3, [r4, #16]
 8006be0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d09e      	beq.n	8006b26 <_printf_float+0xa2>
 8006be8:	232d      	movs	r3, #45	@ 0x2d
 8006bea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bee:	e79a      	b.n	8006b26 <_printf_float+0xa2>
 8006bf0:	2947      	cmp	r1, #71	@ 0x47
 8006bf2:	d1bf      	bne.n	8006b74 <_printf_float+0xf0>
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1bd      	bne.n	8006b74 <_printf_float+0xf0>
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e7ba      	b.n	8006b72 <_printf_float+0xee>
 8006bfc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c00:	d9dc      	bls.n	8006bbc <_printf_float+0x138>
 8006c02:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006c06:	d118      	bne.n	8006c3a <_printf_float+0x1b6>
 8006c08:	2900      	cmp	r1, #0
 8006c0a:	6863      	ldr	r3, [r4, #4]
 8006c0c:	dd0b      	ble.n	8006c26 <_printf_float+0x1a2>
 8006c0e:	6121      	str	r1, [r4, #16]
 8006c10:	b913      	cbnz	r3, 8006c18 <_printf_float+0x194>
 8006c12:	6822      	ldr	r2, [r4, #0]
 8006c14:	07d0      	lsls	r0, r2, #31
 8006c16:	d502      	bpl.n	8006c1e <_printf_float+0x19a>
 8006c18:	3301      	adds	r3, #1
 8006c1a:	440b      	add	r3, r1
 8006c1c:	6123      	str	r3, [r4, #16]
 8006c1e:	f04f 0900 	mov.w	r9, #0
 8006c22:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006c24:	e7dc      	b.n	8006be0 <_printf_float+0x15c>
 8006c26:	b913      	cbnz	r3, 8006c2e <_printf_float+0x1aa>
 8006c28:	6822      	ldr	r2, [r4, #0]
 8006c2a:	07d2      	lsls	r2, r2, #31
 8006c2c:	d501      	bpl.n	8006c32 <_printf_float+0x1ae>
 8006c2e:	3302      	adds	r3, #2
 8006c30:	e7f4      	b.n	8006c1c <_printf_float+0x198>
 8006c32:	2301      	movs	r3, #1
 8006c34:	e7f2      	b.n	8006c1c <_printf_float+0x198>
 8006c36:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006c3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c3c:	4299      	cmp	r1, r3
 8006c3e:	db05      	blt.n	8006c4c <_printf_float+0x1c8>
 8006c40:	6823      	ldr	r3, [r4, #0]
 8006c42:	6121      	str	r1, [r4, #16]
 8006c44:	07d8      	lsls	r0, r3, #31
 8006c46:	d5ea      	bpl.n	8006c1e <_printf_float+0x19a>
 8006c48:	1c4b      	adds	r3, r1, #1
 8006c4a:	e7e7      	b.n	8006c1c <_printf_float+0x198>
 8006c4c:	2900      	cmp	r1, #0
 8006c4e:	bfcc      	ite	gt
 8006c50:	2201      	movgt	r2, #1
 8006c52:	f1c1 0202 	rsble	r2, r1, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	e7e0      	b.n	8006c1c <_printf_float+0x198>
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	055a      	lsls	r2, r3, #21
 8006c5e:	d407      	bmi.n	8006c70 <_printf_float+0x1ec>
 8006c60:	6923      	ldr	r3, [r4, #16]
 8006c62:	4642      	mov	r2, r8
 8006c64:	4631      	mov	r1, r6
 8006c66:	4628      	mov	r0, r5
 8006c68:	47b8      	blx	r7
 8006c6a:	3001      	adds	r0, #1
 8006c6c:	d12b      	bne.n	8006cc6 <_printf_float+0x242>
 8006c6e:	e764      	b.n	8006b3a <_printf_float+0xb6>
 8006c70:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c74:	f240 80dc 	bls.w	8006e30 <_printf_float+0x3ac>
 8006c78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	2300      	movs	r3, #0
 8006c80:	f7f9 feaa 	bl	80009d8 <__aeabi_dcmpeq>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d033      	beq.n	8006cf0 <_printf_float+0x26c>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	4631      	mov	r1, r6
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	4a35      	ldr	r2, [pc, #212]	@ (8006d64 <_printf_float+0x2e0>)
 8006c90:	47b8      	blx	r7
 8006c92:	3001      	adds	r0, #1
 8006c94:	f43f af51 	beq.w	8006b3a <_printf_float+0xb6>
 8006c98:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006c9c:	4543      	cmp	r3, r8
 8006c9e:	db02      	blt.n	8006ca6 <_printf_float+0x222>
 8006ca0:	6823      	ldr	r3, [r4, #0]
 8006ca2:	07d8      	lsls	r0, r3, #31
 8006ca4:	d50f      	bpl.n	8006cc6 <_printf_float+0x242>
 8006ca6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006caa:	4631      	mov	r1, r6
 8006cac:	4628      	mov	r0, r5
 8006cae:	47b8      	blx	r7
 8006cb0:	3001      	adds	r0, #1
 8006cb2:	f43f af42 	beq.w	8006b3a <_printf_float+0xb6>
 8006cb6:	f04f 0900 	mov.w	r9, #0
 8006cba:	f108 38ff 	add.w	r8, r8, #4294967295
 8006cbe:	f104 0a1a 	add.w	sl, r4, #26
 8006cc2:	45c8      	cmp	r8, r9
 8006cc4:	dc09      	bgt.n	8006cda <_printf_float+0x256>
 8006cc6:	6823      	ldr	r3, [r4, #0]
 8006cc8:	079b      	lsls	r3, r3, #30
 8006cca:	f100 8102 	bmi.w	8006ed2 <_printf_float+0x44e>
 8006cce:	68e0      	ldr	r0, [r4, #12]
 8006cd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cd2:	4298      	cmp	r0, r3
 8006cd4:	bfb8      	it	lt
 8006cd6:	4618      	movlt	r0, r3
 8006cd8:	e731      	b.n	8006b3e <_printf_float+0xba>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	4652      	mov	r2, sl
 8006cde:	4631      	mov	r1, r6
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	47b8      	blx	r7
 8006ce4:	3001      	adds	r0, #1
 8006ce6:	f43f af28 	beq.w	8006b3a <_printf_float+0xb6>
 8006cea:	f109 0901 	add.w	r9, r9, #1
 8006cee:	e7e8      	b.n	8006cc2 <_printf_float+0x23e>
 8006cf0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	dc38      	bgt.n	8006d68 <_printf_float+0x2e4>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	4631      	mov	r1, r6
 8006cfa:	4628      	mov	r0, r5
 8006cfc:	4a19      	ldr	r2, [pc, #100]	@ (8006d64 <_printf_float+0x2e0>)
 8006cfe:	47b8      	blx	r7
 8006d00:	3001      	adds	r0, #1
 8006d02:	f43f af1a 	beq.w	8006b3a <_printf_float+0xb6>
 8006d06:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006d0a:	ea59 0303 	orrs.w	r3, r9, r3
 8006d0e:	d102      	bne.n	8006d16 <_printf_float+0x292>
 8006d10:	6823      	ldr	r3, [r4, #0]
 8006d12:	07d9      	lsls	r1, r3, #31
 8006d14:	d5d7      	bpl.n	8006cc6 <_printf_float+0x242>
 8006d16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d1a:	4631      	mov	r1, r6
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	47b8      	blx	r7
 8006d20:	3001      	adds	r0, #1
 8006d22:	f43f af0a 	beq.w	8006b3a <_printf_float+0xb6>
 8006d26:	f04f 0a00 	mov.w	sl, #0
 8006d2a:	f104 0b1a 	add.w	fp, r4, #26
 8006d2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d30:	425b      	negs	r3, r3
 8006d32:	4553      	cmp	r3, sl
 8006d34:	dc01      	bgt.n	8006d3a <_printf_float+0x2b6>
 8006d36:	464b      	mov	r3, r9
 8006d38:	e793      	b.n	8006c62 <_printf_float+0x1de>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	465a      	mov	r2, fp
 8006d3e:	4631      	mov	r1, r6
 8006d40:	4628      	mov	r0, r5
 8006d42:	47b8      	blx	r7
 8006d44:	3001      	adds	r0, #1
 8006d46:	f43f aef8 	beq.w	8006b3a <_printf_float+0xb6>
 8006d4a:	f10a 0a01 	add.w	sl, sl, #1
 8006d4e:	e7ee      	b.n	8006d2e <_printf_float+0x2aa>
 8006d50:	7fefffff 	.word	0x7fefffff
 8006d54:	08009674 	.word	0x08009674
 8006d58:	08009678 	.word	0x08009678
 8006d5c:	0800967c 	.word	0x0800967c
 8006d60:	08009680 	.word	0x08009680
 8006d64:	08009684 	.word	0x08009684
 8006d68:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d6a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006d6e:	4553      	cmp	r3, sl
 8006d70:	bfa8      	it	ge
 8006d72:	4653      	movge	r3, sl
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	4699      	mov	r9, r3
 8006d78:	dc36      	bgt.n	8006de8 <_printf_float+0x364>
 8006d7a:	f04f 0b00 	mov.w	fp, #0
 8006d7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d82:	f104 021a 	add.w	r2, r4, #26
 8006d86:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d88:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d8a:	eba3 0309 	sub.w	r3, r3, r9
 8006d8e:	455b      	cmp	r3, fp
 8006d90:	dc31      	bgt.n	8006df6 <_printf_float+0x372>
 8006d92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d94:	459a      	cmp	sl, r3
 8006d96:	dc3a      	bgt.n	8006e0e <_printf_float+0x38a>
 8006d98:	6823      	ldr	r3, [r4, #0]
 8006d9a:	07da      	lsls	r2, r3, #31
 8006d9c:	d437      	bmi.n	8006e0e <_printf_float+0x38a>
 8006d9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006da0:	ebaa 0903 	sub.w	r9, sl, r3
 8006da4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006da6:	ebaa 0303 	sub.w	r3, sl, r3
 8006daa:	4599      	cmp	r9, r3
 8006dac:	bfa8      	it	ge
 8006dae:	4699      	movge	r9, r3
 8006db0:	f1b9 0f00 	cmp.w	r9, #0
 8006db4:	dc33      	bgt.n	8006e1e <_printf_float+0x39a>
 8006db6:	f04f 0800 	mov.w	r8, #0
 8006dba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006dbe:	f104 0b1a 	add.w	fp, r4, #26
 8006dc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006dc4:	ebaa 0303 	sub.w	r3, sl, r3
 8006dc8:	eba3 0309 	sub.w	r3, r3, r9
 8006dcc:	4543      	cmp	r3, r8
 8006dce:	f77f af7a 	ble.w	8006cc6 <_printf_float+0x242>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	465a      	mov	r2, fp
 8006dd6:	4631      	mov	r1, r6
 8006dd8:	4628      	mov	r0, r5
 8006dda:	47b8      	blx	r7
 8006ddc:	3001      	adds	r0, #1
 8006dde:	f43f aeac 	beq.w	8006b3a <_printf_float+0xb6>
 8006de2:	f108 0801 	add.w	r8, r8, #1
 8006de6:	e7ec      	b.n	8006dc2 <_printf_float+0x33e>
 8006de8:	4642      	mov	r2, r8
 8006dea:	4631      	mov	r1, r6
 8006dec:	4628      	mov	r0, r5
 8006dee:	47b8      	blx	r7
 8006df0:	3001      	adds	r0, #1
 8006df2:	d1c2      	bne.n	8006d7a <_printf_float+0x2f6>
 8006df4:	e6a1      	b.n	8006b3a <_printf_float+0xb6>
 8006df6:	2301      	movs	r3, #1
 8006df8:	4631      	mov	r1, r6
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	920a      	str	r2, [sp, #40]	@ 0x28
 8006dfe:	47b8      	blx	r7
 8006e00:	3001      	adds	r0, #1
 8006e02:	f43f ae9a 	beq.w	8006b3a <_printf_float+0xb6>
 8006e06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e08:	f10b 0b01 	add.w	fp, fp, #1
 8006e0c:	e7bb      	b.n	8006d86 <_printf_float+0x302>
 8006e0e:	4631      	mov	r1, r6
 8006e10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006e14:	4628      	mov	r0, r5
 8006e16:	47b8      	blx	r7
 8006e18:	3001      	adds	r0, #1
 8006e1a:	d1c0      	bne.n	8006d9e <_printf_float+0x31a>
 8006e1c:	e68d      	b.n	8006b3a <_printf_float+0xb6>
 8006e1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e20:	464b      	mov	r3, r9
 8006e22:	4631      	mov	r1, r6
 8006e24:	4628      	mov	r0, r5
 8006e26:	4442      	add	r2, r8
 8006e28:	47b8      	blx	r7
 8006e2a:	3001      	adds	r0, #1
 8006e2c:	d1c3      	bne.n	8006db6 <_printf_float+0x332>
 8006e2e:	e684      	b.n	8006b3a <_printf_float+0xb6>
 8006e30:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006e34:	f1ba 0f01 	cmp.w	sl, #1
 8006e38:	dc01      	bgt.n	8006e3e <_printf_float+0x3ba>
 8006e3a:	07db      	lsls	r3, r3, #31
 8006e3c:	d536      	bpl.n	8006eac <_printf_float+0x428>
 8006e3e:	2301      	movs	r3, #1
 8006e40:	4642      	mov	r2, r8
 8006e42:	4631      	mov	r1, r6
 8006e44:	4628      	mov	r0, r5
 8006e46:	47b8      	blx	r7
 8006e48:	3001      	adds	r0, #1
 8006e4a:	f43f ae76 	beq.w	8006b3a <_printf_float+0xb6>
 8006e4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006e52:	4631      	mov	r1, r6
 8006e54:	4628      	mov	r0, r5
 8006e56:	47b8      	blx	r7
 8006e58:	3001      	adds	r0, #1
 8006e5a:	f43f ae6e 	beq.w	8006b3a <_printf_float+0xb6>
 8006e5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006e62:	2200      	movs	r2, #0
 8006e64:	2300      	movs	r3, #0
 8006e66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e6a:	f7f9 fdb5 	bl	80009d8 <__aeabi_dcmpeq>
 8006e6e:	b9c0      	cbnz	r0, 8006ea2 <_printf_float+0x41e>
 8006e70:	4653      	mov	r3, sl
 8006e72:	f108 0201 	add.w	r2, r8, #1
 8006e76:	4631      	mov	r1, r6
 8006e78:	4628      	mov	r0, r5
 8006e7a:	47b8      	blx	r7
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	d10c      	bne.n	8006e9a <_printf_float+0x416>
 8006e80:	e65b      	b.n	8006b3a <_printf_float+0xb6>
 8006e82:	2301      	movs	r3, #1
 8006e84:	465a      	mov	r2, fp
 8006e86:	4631      	mov	r1, r6
 8006e88:	4628      	mov	r0, r5
 8006e8a:	47b8      	blx	r7
 8006e8c:	3001      	adds	r0, #1
 8006e8e:	f43f ae54 	beq.w	8006b3a <_printf_float+0xb6>
 8006e92:	f108 0801 	add.w	r8, r8, #1
 8006e96:	45d0      	cmp	r8, sl
 8006e98:	dbf3      	blt.n	8006e82 <_printf_float+0x3fe>
 8006e9a:	464b      	mov	r3, r9
 8006e9c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006ea0:	e6e0      	b.n	8006c64 <_printf_float+0x1e0>
 8006ea2:	f04f 0800 	mov.w	r8, #0
 8006ea6:	f104 0b1a 	add.w	fp, r4, #26
 8006eaa:	e7f4      	b.n	8006e96 <_printf_float+0x412>
 8006eac:	2301      	movs	r3, #1
 8006eae:	4642      	mov	r2, r8
 8006eb0:	e7e1      	b.n	8006e76 <_printf_float+0x3f2>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	464a      	mov	r2, r9
 8006eb6:	4631      	mov	r1, r6
 8006eb8:	4628      	mov	r0, r5
 8006eba:	47b8      	blx	r7
 8006ebc:	3001      	adds	r0, #1
 8006ebe:	f43f ae3c 	beq.w	8006b3a <_printf_float+0xb6>
 8006ec2:	f108 0801 	add.w	r8, r8, #1
 8006ec6:	68e3      	ldr	r3, [r4, #12]
 8006ec8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006eca:	1a5b      	subs	r3, r3, r1
 8006ecc:	4543      	cmp	r3, r8
 8006ece:	dcf0      	bgt.n	8006eb2 <_printf_float+0x42e>
 8006ed0:	e6fd      	b.n	8006cce <_printf_float+0x24a>
 8006ed2:	f04f 0800 	mov.w	r8, #0
 8006ed6:	f104 0919 	add.w	r9, r4, #25
 8006eda:	e7f4      	b.n	8006ec6 <_printf_float+0x442>

08006edc <_printf_common>:
 8006edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ee0:	4616      	mov	r6, r2
 8006ee2:	4698      	mov	r8, r3
 8006ee4:	688a      	ldr	r2, [r1, #8]
 8006ee6:	690b      	ldr	r3, [r1, #16]
 8006ee8:	4607      	mov	r7, r0
 8006eea:	4293      	cmp	r3, r2
 8006eec:	bfb8      	it	lt
 8006eee:	4613      	movlt	r3, r2
 8006ef0:	6033      	str	r3, [r6, #0]
 8006ef2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ef6:	460c      	mov	r4, r1
 8006ef8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006efc:	b10a      	cbz	r2, 8006f02 <_printf_common+0x26>
 8006efe:	3301      	adds	r3, #1
 8006f00:	6033      	str	r3, [r6, #0]
 8006f02:	6823      	ldr	r3, [r4, #0]
 8006f04:	0699      	lsls	r1, r3, #26
 8006f06:	bf42      	ittt	mi
 8006f08:	6833      	ldrmi	r3, [r6, #0]
 8006f0a:	3302      	addmi	r3, #2
 8006f0c:	6033      	strmi	r3, [r6, #0]
 8006f0e:	6825      	ldr	r5, [r4, #0]
 8006f10:	f015 0506 	ands.w	r5, r5, #6
 8006f14:	d106      	bne.n	8006f24 <_printf_common+0x48>
 8006f16:	f104 0a19 	add.w	sl, r4, #25
 8006f1a:	68e3      	ldr	r3, [r4, #12]
 8006f1c:	6832      	ldr	r2, [r6, #0]
 8006f1e:	1a9b      	subs	r3, r3, r2
 8006f20:	42ab      	cmp	r3, r5
 8006f22:	dc2b      	bgt.n	8006f7c <_printf_common+0xa0>
 8006f24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f28:	6822      	ldr	r2, [r4, #0]
 8006f2a:	3b00      	subs	r3, #0
 8006f2c:	bf18      	it	ne
 8006f2e:	2301      	movne	r3, #1
 8006f30:	0692      	lsls	r2, r2, #26
 8006f32:	d430      	bmi.n	8006f96 <_printf_common+0xba>
 8006f34:	4641      	mov	r1, r8
 8006f36:	4638      	mov	r0, r7
 8006f38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f3c:	47c8      	blx	r9
 8006f3e:	3001      	adds	r0, #1
 8006f40:	d023      	beq.n	8006f8a <_printf_common+0xae>
 8006f42:	6823      	ldr	r3, [r4, #0]
 8006f44:	6922      	ldr	r2, [r4, #16]
 8006f46:	f003 0306 	and.w	r3, r3, #6
 8006f4a:	2b04      	cmp	r3, #4
 8006f4c:	bf14      	ite	ne
 8006f4e:	2500      	movne	r5, #0
 8006f50:	6833      	ldreq	r3, [r6, #0]
 8006f52:	f04f 0600 	mov.w	r6, #0
 8006f56:	bf08      	it	eq
 8006f58:	68e5      	ldreq	r5, [r4, #12]
 8006f5a:	f104 041a 	add.w	r4, r4, #26
 8006f5e:	bf08      	it	eq
 8006f60:	1aed      	subeq	r5, r5, r3
 8006f62:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006f66:	bf08      	it	eq
 8006f68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	bfc4      	itt	gt
 8006f70:	1a9b      	subgt	r3, r3, r2
 8006f72:	18ed      	addgt	r5, r5, r3
 8006f74:	42b5      	cmp	r5, r6
 8006f76:	d11a      	bne.n	8006fae <_printf_common+0xd2>
 8006f78:	2000      	movs	r0, #0
 8006f7a:	e008      	b.n	8006f8e <_printf_common+0xb2>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	4652      	mov	r2, sl
 8006f80:	4641      	mov	r1, r8
 8006f82:	4638      	mov	r0, r7
 8006f84:	47c8      	blx	r9
 8006f86:	3001      	adds	r0, #1
 8006f88:	d103      	bne.n	8006f92 <_printf_common+0xb6>
 8006f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f92:	3501      	adds	r5, #1
 8006f94:	e7c1      	b.n	8006f1a <_printf_common+0x3e>
 8006f96:	2030      	movs	r0, #48	@ 0x30
 8006f98:	18e1      	adds	r1, r4, r3
 8006f9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f9e:	1c5a      	adds	r2, r3, #1
 8006fa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006fa4:	4422      	add	r2, r4
 8006fa6:	3302      	adds	r3, #2
 8006fa8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006fac:	e7c2      	b.n	8006f34 <_printf_common+0x58>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	4622      	mov	r2, r4
 8006fb2:	4641      	mov	r1, r8
 8006fb4:	4638      	mov	r0, r7
 8006fb6:	47c8      	blx	r9
 8006fb8:	3001      	adds	r0, #1
 8006fba:	d0e6      	beq.n	8006f8a <_printf_common+0xae>
 8006fbc:	3601      	adds	r6, #1
 8006fbe:	e7d9      	b.n	8006f74 <_printf_common+0x98>

08006fc0 <_printf_i>:
 8006fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fc4:	7e0f      	ldrb	r7, [r1, #24]
 8006fc6:	4691      	mov	r9, r2
 8006fc8:	2f78      	cmp	r7, #120	@ 0x78
 8006fca:	4680      	mov	r8, r0
 8006fcc:	460c      	mov	r4, r1
 8006fce:	469a      	mov	sl, r3
 8006fd0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006fd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006fd6:	d807      	bhi.n	8006fe8 <_printf_i+0x28>
 8006fd8:	2f62      	cmp	r7, #98	@ 0x62
 8006fda:	d80a      	bhi.n	8006ff2 <_printf_i+0x32>
 8006fdc:	2f00      	cmp	r7, #0
 8006fde:	f000 80d3 	beq.w	8007188 <_printf_i+0x1c8>
 8006fe2:	2f58      	cmp	r7, #88	@ 0x58
 8006fe4:	f000 80ba 	beq.w	800715c <_printf_i+0x19c>
 8006fe8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ff0:	e03a      	b.n	8007068 <_printf_i+0xa8>
 8006ff2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006ff6:	2b15      	cmp	r3, #21
 8006ff8:	d8f6      	bhi.n	8006fe8 <_printf_i+0x28>
 8006ffa:	a101      	add	r1, pc, #4	@ (adr r1, 8007000 <_printf_i+0x40>)
 8006ffc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007000:	08007059 	.word	0x08007059
 8007004:	0800706d 	.word	0x0800706d
 8007008:	08006fe9 	.word	0x08006fe9
 800700c:	08006fe9 	.word	0x08006fe9
 8007010:	08006fe9 	.word	0x08006fe9
 8007014:	08006fe9 	.word	0x08006fe9
 8007018:	0800706d 	.word	0x0800706d
 800701c:	08006fe9 	.word	0x08006fe9
 8007020:	08006fe9 	.word	0x08006fe9
 8007024:	08006fe9 	.word	0x08006fe9
 8007028:	08006fe9 	.word	0x08006fe9
 800702c:	0800716f 	.word	0x0800716f
 8007030:	08007097 	.word	0x08007097
 8007034:	08007129 	.word	0x08007129
 8007038:	08006fe9 	.word	0x08006fe9
 800703c:	08006fe9 	.word	0x08006fe9
 8007040:	08007191 	.word	0x08007191
 8007044:	08006fe9 	.word	0x08006fe9
 8007048:	08007097 	.word	0x08007097
 800704c:	08006fe9 	.word	0x08006fe9
 8007050:	08006fe9 	.word	0x08006fe9
 8007054:	08007131 	.word	0x08007131
 8007058:	6833      	ldr	r3, [r6, #0]
 800705a:	1d1a      	adds	r2, r3, #4
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	6032      	str	r2, [r6, #0]
 8007060:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007064:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007068:	2301      	movs	r3, #1
 800706a:	e09e      	b.n	80071aa <_printf_i+0x1ea>
 800706c:	6833      	ldr	r3, [r6, #0]
 800706e:	6820      	ldr	r0, [r4, #0]
 8007070:	1d19      	adds	r1, r3, #4
 8007072:	6031      	str	r1, [r6, #0]
 8007074:	0606      	lsls	r6, r0, #24
 8007076:	d501      	bpl.n	800707c <_printf_i+0xbc>
 8007078:	681d      	ldr	r5, [r3, #0]
 800707a:	e003      	b.n	8007084 <_printf_i+0xc4>
 800707c:	0645      	lsls	r5, r0, #25
 800707e:	d5fb      	bpl.n	8007078 <_printf_i+0xb8>
 8007080:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007084:	2d00      	cmp	r5, #0
 8007086:	da03      	bge.n	8007090 <_printf_i+0xd0>
 8007088:	232d      	movs	r3, #45	@ 0x2d
 800708a:	426d      	negs	r5, r5
 800708c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007090:	230a      	movs	r3, #10
 8007092:	4859      	ldr	r0, [pc, #356]	@ (80071f8 <_printf_i+0x238>)
 8007094:	e011      	b.n	80070ba <_printf_i+0xfa>
 8007096:	6821      	ldr	r1, [r4, #0]
 8007098:	6833      	ldr	r3, [r6, #0]
 800709a:	0608      	lsls	r0, r1, #24
 800709c:	f853 5b04 	ldr.w	r5, [r3], #4
 80070a0:	d402      	bmi.n	80070a8 <_printf_i+0xe8>
 80070a2:	0649      	lsls	r1, r1, #25
 80070a4:	bf48      	it	mi
 80070a6:	b2ad      	uxthmi	r5, r5
 80070a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80070aa:	6033      	str	r3, [r6, #0]
 80070ac:	bf14      	ite	ne
 80070ae:	230a      	movne	r3, #10
 80070b0:	2308      	moveq	r3, #8
 80070b2:	4851      	ldr	r0, [pc, #324]	@ (80071f8 <_printf_i+0x238>)
 80070b4:	2100      	movs	r1, #0
 80070b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80070ba:	6866      	ldr	r6, [r4, #4]
 80070bc:	2e00      	cmp	r6, #0
 80070be:	bfa8      	it	ge
 80070c0:	6821      	ldrge	r1, [r4, #0]
 80070c2:	60a6      	str	r6, [r4, #8]
 80070c4:	bfa4      	itt	ge
 80070c6:	f021 0104 	bicge.w	r1, r1, #4
 80070ca:	6021      	strge	r1, [r4, #0]
 80070cc:	b90d      	cbnz	r5, 80070d2 <_printf_i+0x112>
 80070ce:	2e00      	cmp	r6, #0
 80070d0:	d04b      	beq.n	800716a <_printf_i+0x1aa>
 80070d2:	4616      	mov	r6, r2
 80070d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80070d8:	fb03 5711 	mls	r7, r3, r1, r5
 80070dc:	5dc7      	ldrb	r7, [r0, r7]
 80070de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070e2:	462f      	mov	r7, r5
 80070e4:	42bb      	cmp	r3, r7
 80070e6:	460d      	mov	r5, r1
 80070e8:	d9f4      	bls.n	80070d4 <_printf_i+0x114>
 80070ea:	2b08      	cmp	r3, #8
 80070ec:	d10b      	bne.n	8007106 <_printf_i+0x146>
 80070ee:	6823      	ldr	r3, [r4, #0]
 80070f0:	07df      	lsls	r7, r3, #31
 80070f2:	d508      	bpl.n	8007106 <_printf_i+0x146>
 80070f4:	6923      	ldr	r3, [r4, #16]
 80070f6:	6861      	ldr	r1, [r4, #4]
 80070f8:	4299      	cmp	r1, r3
 80070fa:	bfde      	ittt	le
 80070fc:	2330      	movle	r3, #48	@ 0x30
 80070fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007102:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007106:	1b92      	subs	r2, r2, r6
 8007108:	6122      	str	r2, [r4, #16]
 800710a:	464b      	mov	r3, r9
 800710c:	4621      	mov	r1, r4
 800710e:	4640      	mov	r0, r8
 8007110:	f8cd a000 	str.w	sl, [sp]
 8007114:	aa03      	add	r2, sp, #12
 8007116:	f7ff fee1 	bl	8006edc <_printf_common>
 800711a:	3001      	adds	r0, #1
 800711c:	d14a      	bne.n	80071b4 <_printf_i+0x1f4>
 800711e:	f04f 30ff 	mov.w	r0, #4294967295
 8007122:	b004      	add	sp, #16
 8007124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	f043 0320 	orr.w	r3, r3, #32
 800712e:	6023      	str	r3, [r4, #0]
 8007130:	2778      	movs	r7, #120	@ 0x78
 8007132:	4832      	ldr	r0, [pc, #200]	@ (80071fc <_printf_i+0x23c>)
 8007134:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007138:	6823      	ldr	r3, [r4, #0]
 800713a:	6831      	ldr	r1, [r6, #0]
 800713c:	061f      	lsls	r7, r3, #24
 800713e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007142:	d402      	bmi.n	800714a <_printf_i+0x18a>
 8007144:	065f      	lsls	r7, r3, #25
 8007146:	bf48      	it	mi
 8007148:	b2ad      	uxthmi	r5, r5
 800714a:	6031      	str	r1, [r6, #0]
 800714c:	07d9      	lsls	r1, r3, #31
 800714e:	bf44      	itt	mi
 8007150:	f043 0320 	orrmi.w	r3, r3, #32
 8007154:	6023      	strmi	r3, [r4, #0]
 8007156:	b11d      	cbz	r5, 8007160 <_printf_i+0x1a0>
 8007158:	2310      	movs	r3, #16
 800715a:	e7ab      	b.n	80070b4 <_printf_i+0xf4>
 800715c:	4826      	ldr	r0, [pc, #152]	@ (80071f8 <_printf_i+0x238>)
 800715e:	e7e9      	b.n	8007134 <_printf_i+0x174>
 8007160:	6823      	ldr	r3, [r4, #0]
 8007162:	f023 0320 	bic.w	r3, r3, #32
 8007166:	6023      	str	r3, [r4, #0]
 8007168:	e7f6      	b.n	8007158 <_printf_i+0x198>
 800716a:	4616      	mov	r6, r2
 800716c:	e7bd      	b.n	80070ea <_printf_i+0x12a>
 800716e:	6833      	ldr	r3, [r6, #0]
 8007170:	6825      	ldr	r5, [r4, #0]
 8007172:	1d18      	adds	r0, r3, #4
 8007174:	6961      	ldr	r1, [r4, #20]
 8007176:	6030      	str	r0, [r6, #0]
 8007178:	062e      	lsls	r6, r5, #24
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	d501      	bpl.n	8007182 <_printf_i+0x1c2>
 800717e:	6019      	str	r1, [r3, #0]
 8007180:	e002      	b.n	8007188 <_printf_i+0x1c8>
 8007182:	0668      	lsls	r0, r5, #25
 8007184:	d5fb      	bpl.n	800717e <_printf_i+0x1be>
 8007186:	8019      	strh	r1, [r3, #0]
 8007188:	2300      	movs	r3, #0
 800718a:	4616      	mov	r6, r2
 800718c:	6123      	str	r3, [r4, #16]
 800718e:	e7bc      	b.n	800710a <_printf_i+0x14a>
 8007190:	6833      	ldr	r3, [r6, #0]
 8007192:	2100      	movs	r1, #0
 8007194:	1d1a      	adds	r2, r3, #4
 8007196:	6032      	str	r2, [r6, #0]
 8007198:	681e      	ldr	r6, [r3, #0]
 800719a:	6862      	ldr	r2, [r4, #4]
 800719c:	4630      	mov	r0, r6
 800719e:	f000 f9d4 	bl	800754a <memchr>
 80071a2:	b108      	cbz	r0, 80071a8 <_printf_i+0x1e8>
 80071a4:	1b80      	subs	r0, r0, r6
 80071a6:	6060      	str	r0, [r4, #4]
 80071a8:	6863      	ldr	r3, [r4, #4]
 80071aa:	6123      	str	r3, [r4, #16]
 80071ac:	2300      	movs	r3, #0
 80071ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071b2:	e7aa      	b.n	800710a <_printf_i+0x14a>
 80071b4:	4632      	mov	r2, r6
 80071b6:	4649      	mov	r1, r9
 80071b8:	4640      	mov	r0, r8
 80071ba:	6923      	ldr	r3, [r4, #16]
 80071bc:	47d0      	blx	sl
 80071be:	3001      	adds	r0, #1
 80071c0:	d0ad      	beq.n	800711e <_printf_i+0x15e>
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	079b      	lsls	r3, r3, #30
 80071c6:	d413      	bmi.n	80071f0 <_printf_i+0x230>
 80071c8:	68e0      	ldr	r0, [r4, #12]
 80071ca:	9b03      	ldr	r3, [sp, #12]
 80071cc:	4298      	cmp	r0, r3
 80071ce:	bfb8      	it	lt
 80071d0:	4618      	movlt	r0, r3
 80071d2:	e7a6      	b.n	8007122 <_printf_i+0x162>
 80071d4:	2301      	movs	r3, #1
 80071d6:	4632      	mov	r2, r6
 80071d8:	4649      	mov	r1, r9
 80071da:	4640      	mov	r0, r8
 80071dc:	47d0      	blx	sl
 80071de:	3001      	adds	r0, #1
 80071e0:	d09d      	beq.n	800711e <_printf_i+0x15e>
 80071e2:	3501      	adds	r5, #1
 80071e4:	68e3      	ldr	r3, [r4, #12]
 80071e6:	9903      	ldr	r1, [sp, #12]
 80071e8:	1a5b      	subs	r3, r3, r1
 80071ea:	42ab      	cmp	r3, r5
 80071ec:	dcf2      	bgt.n	80071d4 <_printf_i+0x214>
 80071ee:	e7eb      	b.n	80071c8 <_printf_i+0x208>
 80071f0:	2500      	movs	r5, #0
 80071f2:	f104 0619 	add.w	r6, r4, #25
 80071f6:	e7f5      	b.n	80071e4 <_printf_i+0x224>
 80071f8:	08009686 	.word	0x08009686
 80071fc:	08009697 	.word	0x08009697

08007200 <std>:
 8007200:	2300      	movs	r3, #0
 8007202:	b510      	push	{r4, lr}
 8007204:	4604      	mov	r4, r0
 8007206:	e9c0 3300 	strd	r3, r3, [r0]
 800720a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800720e:	6083      	str	r3, [r0, #8]
 8007210:	8181      	strh	r1, [r0, #12]
 8007212:	6643      	str	r3, [r0, #100]	@ 0x64
 8007214:	81c2      	strh	r2, [r0, #14]
 8007216:	6183      	str	r3, [r0, #24]
 8007218:	4619      	mov	r1, r3
 800721a:	2208      	movs	r2, #8
 800721c:	305c      	adds	r0, #92	@ 0x5c
 800721e:	f000 f914 	bl	800744a <memset>
 8007222:	4b0d      	ldr	r3, [pc, #52]	@ (8007258 <std+0x58>)
 8007224:	6224      	str	r4, [r4, #32]
 8007226:	6263      	str	r3, [r4, #36]	@ 0x24
 8007228:	4b0c      	ldr	r3, [pc, #48]	@ (800725c <std+0x5c>)
 800722a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800722c:	4b0c      	ldr	r3, [pc, #48]	@ (8007260 <std+0x60>)
 800722e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007230:	4b0c      	ldr	r3, [pc, #48]	@ (8007264 <std+0x64>)
 8007232:	6323      	str	r3, [r4, #48]	@ 0x30
 8007234:	4b0c      	ldr	r3, [pc, #48]	@ (8007268 <std+0x68>)
 8007236:	429c      	cmp	r4, r3
 8007238:	d006      	beq.n	8007248 <std+0x48>
 800723a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800723e:	4294      	cmp	r4, r2
 8007240:	d002      	beq.n	8007248 <std+0x48>
 8007242:	33d0      	adds	r3, #208	@ 0xd0
 8007244:	429c      	cmp	r4, r3
 8007246:	d105      	bne.n	8007254 <std+0x54>
 8007248:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800724c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007250:	f000 b978 	b.w	8007544 <__retarget_lock_init_recursive>
 8007254:	bd10      	pop	{r4, pc}
 8007256:	bf00      	nop
 8007258:	080073c5 	.word	0x080073c5
 800725c:	080073e7 	.word	0x080073e7
 8007260:	0800741f 	.word	0x0800741f
 8007264:	08007443 	.word	0x08007443
 8007268:	2000051c 	.word	0x2000051c

0800726c <stdio_exit_handler>:
 800726c:	4a02      	ldr	r2, [pc, #8]	@ (8007278 <stdio_exit_handler+0xc>)
 800726e:	4903      	ldr	r1, [pc, #12]	@ (800727c <stdio_exit_handler+0x10>)
 8007270:	4803      	ldr	r0, [pc, #12]	@ (8007280 <stdio_exit_handler+0x14>)
 8007272:	f000 b869 	b.w	8007348 <_fwalk_sglue>
 8007276:	bf00      	nop
 8007278:	20000010 	.word	0x20000010
 800727c:	08008eb5 	.word	0x08008eb5
 8007280:	20000020 	.word	0x20000020

08007284 <cleanup_stdio>:
 8007284:	6841      	ldr	r1, [r0, #4]
 8007286:	4b0c      	ldr	r3, [pc, #48]	@ (80072b8 <cleanup_stdio+0x34>)
 8007288:	b510      	push	{r4, lr}
 800728a:	4299      	cmp	r1, r3
 800728c:	4604      	mov	r4, r0
 800728e:	d001      	beq.n	8007294 <cleanup_stdio+0x10>
 8007290:	f001 fe10 	bl	8008eb4 <_fflush_r>
 8007294:	68a1      	ldr	r1, [r4, #8]
 8007296:	4b09      	ldr	r3, [pc, #36]	@ (80072bc <cleanup_stdio+0x38>)
 8007298:	4299      	cmp	r1, r3
 800729a:	d002      	beq.n	80072a2 <cleanup_stdio+0x1e>
 800729c:	4620      	mov	r0, r4
 800729e:	f001 fe09 	bl	8008eb4 <_fflush_r>
 80072a2:	68e1      	ldr	r1, [r4, #12]
 80072a4:	4b06      	ldr	r3, [pc, #24]	@ (80072c0 <cleanup_stdio+0x3c>)
 80072a6:	4299      	cmp	r1, r3
 80072a8:	d004      	beq.n	80072b4 <cleanup_stdio+0x30>
 80072aa:	4620      	mov	r0, r4
 80072ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072b0:	f001 be00 	b.w	8008eb4 <_fflush_r>
 80072b4:	bd10      	pop	{r4, pc}
 80072b6:	bf00      	nop
 80072b8:	2000051c 	.word	0x2000051c
 80072bc:	20000584 	.word	0x20000584
 80072c0:	200005ec 	.word	0x200005ec

080072c4 <global_stdio_init.part.0>:
 80072c4:	b510      	push	{r4, lr}
 80072c6:	4b0b      	ldr	r3, [pc, #44]	@ (80072f4 <global_stdio_init.part.0+0x30>)
 80072c8:	4c0b      	ldr	r4, [pc, #44]	@ (80072f8 <global_stdio_init.part.0+0x34>)
 80072ca:	4a0c      	ldr	r2, [pc, #48]	@ (80072fc <global_stdio_init.part.0+0x38>)
 80072cc:	4620      	mov	r0, r4
 80072ce:	601a      	str	r2, [r3, #0]
 80072d0:	2104      	movs	r1, #4
 80072d2:	2200      	movs	r2, #0
 80072d4:	f7ff ff94 	bl	8007200 <std>
 80072d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80072dc:	2201      	movs	r2, #1
 80072de:	2109      	movs	r1, #9
 80072e0:	f7ff ff8e 	bl	8007200 <std>
 80072e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80072e8:	2202      	movs	r2, #2
 80072ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072ee:	2112      	movs	r1, #18
 80072f0:	f7ff bf86 	b.w	8007200 <std>
 80072f4:	20000654 	.word	0x20000654
 80072f8:	2000051c 	.word	0x2000051c
 80072fc:	0800726d 	.word	0x0800726d

08007300 <__sfp_lock_acquire>:
 8007300:	4801      	ldr	r0, [pc, #4]	@ (8007308 <__sfp_lock_acquire+0x8>)
 8007302:	f000 b920 	b.w	8007546 <__retarget_lock_acquire_recursive>
 8007306:	bf00      	nop
 8007308:	2000065d 	.word	0x2000065d

0800730c <__sfp_lock_release>:
 800730c:	4801      	ldr	r0, [pc, #4]	@ (8007314 <__sfp_lock_release+0x8>)
 800730e:	f000 b91b 	b.w	8007548 <__retarget_lock_release_recursive>
 8007312:	bf00      	nop
 8007314:	2000065d 	.word	0x2000065d

08007318 <__sinit>:
 8007318:	b510      	push	{r4, lr}
 800731a:	4604      	mov	r4, r0
 800731c:	f7ff fff0 	bl	8007300 <__sfp_lock_acquire>
 8007320:	6a23      	ldr	r3, [r4, #32]
 8007322:	b11b      	cbz	r3, 800732c <__sinit+0x14>
 8007324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007328:	f7ff bff0 	b.w	800730c <__sfp_lock_release>
 800732c:	4b04      	ldr	r3, [pc, #16]	@ (8007340 <__sinit+0x28>)
 800732e:	6223      	str	r3, [r4, #32]
 8007330:	4b04      	ldr	r3, [pc, #16]	@ (8007344 <__sinit+0x2c>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1f5      	bne.n	8007324 <__sinit+0xc>
 8007338:	f7ff ffc4 	bl	80072c4 <global_stdio_init.part.0>
 800733c:	e7f2      	b.n	8007324 <__sinit+0xc>
 800733e:	bf00      	nop
 8007340:	08007285 	.word	0x08007285
 8007344:	20000654 	.word	0x20000654

08007348 <_fwalk_sglue>:
 8007348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800734c:	4607      	mov	r7, r0
 800734e:	4688      	mov	r8, r1
 8007350:	4614      	mov	r4, r2
 8007352:	2600      	movs	r6, #0
 8007354:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007358:	f1b9 0901 	subs.w	r9, r9, #1
 800735c:	d505      	bpl.n	800736a <_fwalk_sglue+0x22>
 800735e:	6824      	ldr	r4, [r4, #0]
 8007360:	2c00      	cmp	r4, #0
 8007362:	d1f7      	bne.n	8007354 <_fwalk_sglue+0xc>
 8007364:	4630      	mov	r0, r6
 8007366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800736a:	89ab      	ldrh	r3, [r5, #12]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d907      	bls.n	8007380 <_fwalk_sglue+0x38>
 8007370:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007374:	3301      	adds	r3, #1
 8007376:	d003      	beq.n	8007380 <_fwalk_sglue+0x38>
 8007378:	4629      	mov	r1, r5
 800737a:	4638      	mov	r0, r7
 800737c:	47c0      	blx	r8
 800737e:	4306      	orrs	r6, r0
 8007380:	3568      	adds	r5, #104	@ 0x68
 8007382:	e7e9      	b.n	8007358 <_fwalk_sglue+0x10>

08007384 <siprintf>:
 8007384:	b40e      	push	{r1, r2, r3}
 8007386:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800738a:	b500      	push	{lr}
 800738c:	b09c      	sub	sp, #112	@ 0x70
 800738e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007390:	9002      	str	r0, [sp, #8]
 8007392:	9006      	str	r0, [sp, #24]
 8007394:	9107      	str	r1, [sp, #28]
 8007396:	9104      	str	r1, [sp, #16]
 8007398:	4808      	ldr	r0, [pc, #32]	@ (80073bc <siprintf+0x38>)
 800739a:	4909      	ldr	r1, [pc, #36]	@ (80073c0 <siprintf+0x3c>)
 800739c:	f853 2b04 	ldr.w	r2, [r3], #4
 80073a0:	9105      	str	r1, [sp, #20]
 80073a2:	6800      	ldr	r0, [r0, #0]
 80073a4:	a902      	add	r1, sp, #8
 80073a6:	9301      	str	r3, [sp, #4]
 80073a8:	f001 fc08 	bl	8008bbc <_svfiprintf_r>
 80073ac:	2200      	movs	r2, #0
 80073ae:	9b02      	ldr	r3, [sp, #8]
 80073b0:	701a      	strb	r2, [r3, #0]
 80073b2:	b01c      	add	sp, #112	@ 0x70
 80073b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80073b8:	b003      	add	sp, #12
 80073ba:	4770      	bx	lr
 80073bc:	2000001c 	.word	0x2000001c
 80073c0:	ffff0208 	.word	0xffff0208

080073c4 <__sread>:
 80073c4:	b510      	push	{r4, lr}
 80073c6:	460c      	mov	r4, r1
 80073c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073cc:	f000 f86c 	bl	80074a8 <_read_r>
 80073d0:	2800      	cmp	r0, #0
 80073d2:	bfab      	itete	ge
 80073d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80073d6:	89a3      	ldrhlt	r3, [r4, #12]
 80073d8:	181b      	addge	r3, r3, r0
 80073da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80073de:	bfac      	ite	ge
 80073e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80073e2:	81a3      	strhlt	r3, [r4, #12]
 80073e4:	bd10      	pop	{r4, pc}

080073e6 <__swrite>:
 80073e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ea:	461f      	mov	r7, r3
 80073ec:	898b      	ldrh	r3, [r1, #12]
 80073ee:	4605      	mov	r5, r0
 80073f0:	05db      	lsls	r3, r3, #23
 80073f2:	460c      	mov	r4, r1
 80073f4:	4616      	mov	r6, r2
 80073f6:	d505      	bpl.n	8007404 <__swrite+0x1e>
 80073f8:	2302      	movs	r3, #2
 80073fa:	2200      	movs	r2, #0
 80073fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007400:	f000 f840 	bl	8007484 <_lseek_r>
 8007404:	89a3      	ldrh	r3, [r4, #12]
 8007406:	4632      	mov	r2, r6
 8007408:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800740c:	81a3      	strh	r3, [r4, #12]
 800740e:	4628      	mov	r0, r5
 8007410:	463b      	mov	r3, r7
 8007412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800741a:	f000 b857 	b.w	80074cc <_write_r>

0800741e <__sseek>:
 800741e:	b510      	push	{r4, lr}
 8007420:	460c      	mov	r4, r1
 8007422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007426:	f000 f82d 	bl	8007484 <_lseek_r>
 800742a:	1c43      	adds	r3, r0, #1
 800742c:	89a3      	ldrh	r3, [r4, #12]
 800742e:	bf15      	itete	ne
 8007430:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007432:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007436:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800743a:	81a3      	strheq	r3, [r4, #12]
 800743c:	bf18      	it	ne
 800743e:	81a3      	strhne	r3, [r4, #12]
 8007440:	bd10      	pop	{r4, pc}

08007442 <__sclose>:
 8007442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007446:	f000 b80d 	b.w	8007464 <_close_r>

0800744a <memset>:
 800744a:	4603      	mov	r3, r0
 800744c:	4402      	add	r2, r0
 800744e:	4293      	cmp	r3, r2
 8007450:	d100      	bne.n	8007454 <memset+0xa>
 8007452:	4770      	bx	lr
 8007454:	f803 1b01 	strb.w	r1, [r3], #1
 8007458:	e7f9      	b.n	800744e <memset+0x4>
	...

0800745c <_localeconv_r>:
 800745c:	4800      	ldr	r0, [pc, #0]	@ (8007460 <_localeconv_r+0x4>)
 800745e:	4770      	bx	lr
 8007460:	2000015c 	.word	0x2000015c

08007464 <_close_r>:
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	2300      	movs	r3, #0
 8007468:	4d05      	ldr	r5, [pc, #20]	@ (8007480 <_close_r+0x1c>)
 800746a:	4604      	mov	r4, r0
 800746c:	4608      	mov	r0, r1
 800746e:	602b      	str	r3, [r5, #0]
 8007470:	f7fb fb4b 	bl	8002b0a <_close>
 8007474:	1c43      	adds	r3, r0, #1
 8007476:	d102      	bne.n	800747e <_close_r+0x1a>
 8007478:	682b      	ldr	r3, [r5, #0]
 800747a:	b103      	cbz	r3, 800747e <_close_r+0x1a>
 800747c:	6023      	str	r3, [r4, #0]
 800747e:	bd38      	pop	{r3, r4, r5, pc}
 8007480:	20000658 	.word	0x20000658

08007484 <_lseek_r>:
 8007484:	b538      	push	{r3, r4, r5, lr}
 8007486:	4604      	mov	r4, r0
 8007488:	4608      	mov	r0, r1
 800748a:	4611      	mov	r1, r2
 800748c:	2200      	movs	r2, #0
 800748e:	4d05      	ldr	r5, [pc, #20]	@ (80074a4 <_lseek_r+0x20>)
 8007490:	602a      	str	r2, [r5, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	f7fb fb5d 	bl	8002b52 <_lseek>
 8007498:	1c43      	adds	r3, r0, #1
 800749a:	d102      	bne.n	80074a2 <_lseek_r+0x1e>
 800749c:	682b      	ldr	r3, [r5, #0]
 800749e:	b103      	cbz	r3, 80074a2 <_lseek_r+0x1e>
 80074a0:	6023      	str	r3, [r4, #0]
 80074a2:	bd38      	pop	{r3, r4, r5, pc}
 80074a4:	20000658 	.word	0x20000658

080074a8 <_read_r>:
 80074a8:	b538      	push	{r3, r4, r5, lr}
 80074aa:	4604      	mov	r4, r0
 80074ac:	4608      	mov	r0, r1
 80074ae:	4611      	mov	r1, r2
 80074b0:	2200      	movs	r2, #0
 80074b2:	4d05      	ldr	r5, [pc, #20]	@ (80074c8 <_read_r+0x20>)
 80074b4:	602a      	str	r2, [r5, #0]
 80074b6:	461a      	mov	r2, r3
 80074b8:	f7fb faee 	bl	8002a98 <_read>
 80074bc:	1c43      	adds	r3, r0, #1
 80074be:	d102      	bne.n	80074c6 <_read_r+0x1e>
 80074c0:	682b      	ldr	r3, [r5, #0]
 80074c2:	b103      	cbz	r3, 80074c6 <_read_r+0x1e>
 80074c4:	6023      	str	r3, [r4, #0]
 80074c6:	bd38      	pop	{r3, r4, r5, pc}
 80074c8:	20000658 	.word	0x20000658

080074cc <_write_r>:
 80074cc:	b538      	push	{r3, r4, r5, lr}
 80074ce:	4604      	mov	r4, r0
 80074d0:	4608      	mov	r0, r1
 80074d2:	4611      	mov	r1, r2
 80074d4:	2200      	movs	r2, #0
 80074d6:	4d05      	ldr	r5, [pc, #20]	@ (80074ec <_write_r+0x20>)
 80074d8:	602a      	str	r2, [r5, #0]
 80074da:	461a      	mov	r2, r3
 80074dc:	f7fb faf9 	bl	8002ad2 <_write>
 80074e0:	1c43      	adds	r3, r0, #1
 80074e2:	d102      	bne.n	80074ea <_write_r+0x1e>
 80074e4:	682b      	ldr	r3, [r5, #0]
 80074e6:	b103      	cbz	r3, 80074ea <_write_r+0x1e>
 80074e8:	6023      	str	r3, [r4, #0]
 80074ea:	bd38      	pop	{r3, r4, r5, pc}
 80074ec:	20000658 	.word	0x20000658

080074f0 <__errno>:
 80074f0:	4b01      	ldr	r3, [pc, #4]	@ (80074f8 <__errno+0x8>)
 80074f2:	6818      	ldr	r0, [r3, #0]
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	2000001c 	.word	0x2000001c

080074fc <__libc_init_array>:
 80074fc:	b570      	push	{r4, r5, r6, lr}
 80074fe:	2600      	movs	r6, #0
 8007500:	4d0c      	ldr	r5, [pc, #48]	@ (8007534 <__libc_init_array+0x38>)
 8007502:	4c0d      	ldr	r4, [pc, #52]	@ (8007538 <__libc_init_array+0x3c>)
 8007504:	1b64      	subs	r4, r4, r5
 8007506:	10a4      	asrs	r4, r4, #2
 8007508:	42a6      	cmp	r6, r4
 800750a:	d109      	bne.n	8007520 <__libc_init_array+0x24>
 800750c:	f002 f86e 	bl	80095ec <_init>
 8007510:	2600      	movs	r6, #0
 8007512:	4d0a      	ldr	r5, [pc, #40]	@ (800753c <__libc_init_array+0x40>)
 8007514:	4c0a      	ldr	r4, [pc, #40]	@ (8007540 <__libc_init_array+0x44>)
 8007516:	1b64      	subs	r4, r4, r5
 8007518:	10a4      	asrs	r4, r4, #2
 800751a:	42a6      	cmp	r6, r4
 800751c:	d105      	bne.n	800752a <__libc_init_array+0x2e>
 800751e:	bd70      	pop	{r4, r5, r6, pc}
 8007520:	f855 3b04 	ldr.w	r3, [r5], #4
 8007524:	4798      	blx	r3
 8007526:	3601      	adds	r6, #1
 8007528:	e7ee      	b.n	8007508 <__libc_init_array+0xc>
 800752a:	f855 3b04 	ldr.w	r3, [r5], #4
 800752e:	4798      	blx	r3
 8007530:	3601      	adds	r6, #1
 8007532:	e7f2      	b.n	800751a <__libc_init_array+0x1e>
 8007534:	080099f0 	.word	0x080099f0
 8007538:	080099f0 	.word	0x080099f0
 800753c:	080099f0 	.word	0x080099f0
 8007540:	080099f4 	.word	0x080099f4

08007544 <__retarget_lock_init_recursive>:
 8007544:	4770      	bx	lr

08007546 <__retarget_lock_acquire_recursive>:
 8007546:	4770      	bx	lr

08007548 <__retarget_lock_release_recursive>:
 8007548:	4770      	bx	lr

0800754a <memchr>:
 800754a:	4603      	mov	r3, r0
 800754c:	b510      	push	{r4, lr}
 800754e:	b2c9      	uxtb	r1, r1
 8007550:	4402      	add	r2, r0
 8007552:	4293      	cmp	r3, r2
 8007554:	4618      	mov	r0, r3
 8007556:	d101      	bne.n	800755c <memchr+0x12>
 8007558:	2000      	movs	r0, #0
 800755a:	e003      	b.n	8007564 <memchr+0x1a>
 800755c:	7804      	ldrb	r4, [r0, #0]
 800755e:	3301      	adds	r3, #1
 8007560:	428c      	cmp	r4, r1
 8007562:	d1f6      	bne.n	8007552 <memchr+0x8>
 8007564:	bd10      	pop	{r4, pc}

08007566 <quorem>:
 8007566:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800756a:	6903      	ldr	r3, [r0, #16]
 800756c:	690c      	ldr	r4, [r1, #16]
 800756e:	4607      	mov	r7, r0
 8007570:	42a3      	cmp	r3, r4
 8007572:	db7e      	blt.n	8007672 <quorem+0x10c>
 8007574:	3c01      	subs	r4, #1
 8007576:	00a3      	lsls	r3, r4, #2
 8007578:	f100 0514 	add.w	r5, r0, #20
 800757c:	f101 0814 	add.w	r8, r1, #20
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007586:	9301      	str	r3, [sp, #4]
 8007588:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800758c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007590:	3301      	adds	r3, #1
 8007592:	429a      	cmp	r2, r3
 8007594:	fbb2 f6f3 	udiv	r6, r2, r3
 8007598:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800759c:	d32e      	bcc.n	80075fc <quorem+0x96>
 800759e:	f04f 0a00 	mov.w	sl, #0
 80075a2:	46c4      	mov	ip, r8
 80075a4:	46ae      	mov	lr, r5
 80075a6:	46d3      	mov	fp, sl
 80075a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80075ac:	b298      	uxth	r0, r3
 80075ae:	fb06 a000 	mla	r0, r6, r0, sl
 80075b2:	0c1b      	lsrs	r3, r3, #16
 80075b4:	0c02      	lsrs	r2, r0, #16
 80075b6:	fb06 2303 	mla	r3, r6, r3, r2
 80075ba:	f8de 2000 	ldr.w	r2, [lr]
 80075be:	b280      	uxth	r0, r0
 80075c0:	b292      	uxth	r2, r2
 80075c2:	1a12      	subs	r2, r2, r0
 80075c4:	445a      	add	r2, fp
 80075c6:	f8de 0000 	ldr.w	r0, [lr]
 80075ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80075d4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80075d8:	b292      	uxth	r2, r2
 80075da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80075de:	45e1      	cmp	r9, ip
 80075e0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80075e4:	f84e 2b04 	str.w	r2, [lr], #4
 80075e8:	d2de      	bcs.n	80075a8 <quorem+0x42>
 80075ea:	9b00      	ldr	r3, [sp, #0]
 80075ec:	58eb      	ldr	r3, [r5, r3]
 80075ee:	b92b      	cbnz	r3, 80075fc <quorem+0x96>
 80075f0:	9b01      	ldr	r3, [sp, #4]
 80075f2:	3b04      	subs	r3, #4
 80075f4:	429d      	cmp	r5, r3
 80075f6:	461a      	mov	r2, r3
 80075f8:	d32f      	bcc.n	800765a <quorem+0xf4>
 80075fa:	613c      	str	r4, [r7, #16]
 80075fc:	4638      	mov	r0, r7
 80075fe:	f001 f979 	bl	80088f4 <__mcmp>
 8007602:	2800      	cmp	r0, #0
 8007604:	db25      	blt.n	8007652 <quorem+0xec>
 8007606:	4629      	mov	r1, r5
 8007608:	2000      	movs	r0, #0
 800760a:	f858 2b04 	ldr.w	r2, [r8], #4
 800760e:	f8d1 c000 	ldr.w	ip, [r1]
 8007612:	fa1f fe82 	uxth.w	lr, r2
 8007616:	fa1f f38c 	uxth.w	r3, ip
 800761a:	eba3 030e 	sub.w	r3, r3, lr
 800761e:	4403      	add	r3, r0
 8007620:	0c12      	lsrs	r2, r2, #16
 8007622:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007626:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800762a:	b29b      	uxth	r3, r3
 800762c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007630:	45c1      	cmp	r9, r8
 8007632:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007636:	f841 3b04 	str.w	r3, [r1], #4
 800763a:	d2e6      	bcs.n	800760a <quorem+0xa4>
 800763c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007640:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007644:	b922      	cbnz	r2, 8007650 <quorem+0xea>
 8007646:	3b04      	subs	r3, #4
 8007648:	429d      	cmp	r5, r3
 800764a:	461a      	mov	r2, r3
 800764c:	d30b      	bcc.n	8007666 <quorem+0x100>
 800764e:	613c      	str	r4, [r7, #16]
 8007650:	3601      	adds	r6, #1
 8007652:	4630      	mov	r0, r6
 8007654:	b003      	add	sp, #12
 8007656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800765a:	6812      	ldr	r2, [r2, #0]
 800765c:	3b04      	subs	r3, #4
 800765e:	2a00      	cmp	r2, #0
 8007660:	d1cb      	bne.n	80075fa <quorem+0x94>
 8007662:	3c01      	subs	r4, #1
 8007664:	e7c6      	b.n	80075f4 <quorem+0x8e>
 8007666:	6812      	ldr	r2, [r2, #0]
 8007668:	3b04      	subs	r3, #4
 800766a:	2a00      	cmp	r2, #0
 800766c:	d1ef      	bne.n	800764e <quorem+0xe8>
 800766e:	3c01      	subs	r4, #1
 8007670:	e7ea      	b.n	8007648 <quorem+0xe2>
 8007672:	2000      	movs	r0, #0
 8007674:	e7ee      	b.n	8007654 <quorem+0xee>
	...

08007678 <_dtoa_r>:
 8007678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800767c:	4614      	mov	r4, r2
 800767e:	461d      	mov	r5, r3
 8007680:	69c7      	ldr	r7, [r0, #28]
 8007682:	b097      	sub	sp, #92	@ 0x5c
 8007684:	4683      	mov	fp, r0
 8007686:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800768a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800768c:	b97f      	cbnz	r7, 80076ae <_dtoa_r+0x36>
 800768e:	2010      	movs	r0, #16
 8007690:	f000 fe02 	bl	8008298 <malloc>
 8007694:	4602      	mov	r2, r0
 8007696:	f8cb 001c 	str.w	r0, [fp, #28]
 800769a:	b920      	cbnz	r0, 80076a6 <_dtoa_r+0x2e>
 800769c:	21ef      	movs	r1, #239	@ 0xef
 800769e:	4ba8      	ldr	r3, [pc, #672]	@ (8007940 <_dtoa_r+0x2c8>)
 80076a0:	48a8      	ldr	r0, [pc, #672]	@ (8007944 <_dtoa_r+0x2cc>)
 80076a2:	f001 fc67 	bl	8008f74 <__assert_func>
 80076a6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80076aa:	6007      	str	r7, [r0, #0]
 80076ac:	60c7      	str	r7, [r0, #12]
 80076ae:	f8db 301c 	ldr.w	r3, [fp, #28]
 80076b2:	6819      	ldr	r1, [r3, #0]
 80076b4:	b159      	cbz	r1, 80076ce <_dtoa_r+0x56>
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	2301      	movs	r3, #1
 80076ba:	4093      	lsls	r3, r2
 80076bc:	604a      	str	r2, [r1, #4]
 80076be:	608b      	str	r3, [r1, #8]
 80076c0:	4658      	mov	r0, fp
 80076c2:	f000 fedf 	bl	8008484 <_Bfree>
 80076c6:	2200      	movs	r2, #0
 80076c8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80076cc:	601a      	str	r2, [r3, #0]
 80076ce:	1e2b      	subs	r3, r5, #0
 80076d0:	bfaf      	iteee	ge
 80076d2:	2300      	movge	r3, #0
 80076d4:	2201      	movlt	r2, #1
 80076d6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80076da:	9303      	strlt	r3, [sp, #12]
 80076dc:	bfa8      	it	ge
 80076de:	6033      	strge	r3, [r6, #0]
 80076e0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80076e4:	4b98      	ldr	r3, [pc, #608]	@ (8007948 <_dtoa_r+0x2d0>)
 80076e6:	bfb8      	it	lt
 80076e8:	6032      	strlt	r2, [r6, #0]
 80076ea:	ea33 0308 	bics.w	r3, r3, r8
 80076ee:	d112      	bne.n	8007716 <_dtoa_r+0x9e>
 80076f0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80076f4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80076f6:	6013      	str	r3, [r2, #0]
 80076f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80076fc:	4323      	orrs	r3, r4
 80076fe:	f000 8550 	beq.w	80081a2 <_dtoa_r+0xb2a>
 8007702:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007704:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800794c <_dtoa_r+0x2d4>
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 8552 	beq.w	80081b2 <_dtoa_r+0xb3a>
 800770e:	f10a 0303 	add.w	r3, sl, #3
 8007712:	f000 bd4c 	b.w	80081ae <_dtoa_r+0xb36>
 8007716:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800771a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800771e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007722:	2200      	movs	r2, #0
 8007724:	2300      	movs	r3, #0
 8007726:	f7f9 f957 	bl	80009d8 <__aeabi_dcmpeq>
 800772a:	4607      	mov	r7, r0
 800772c:	b158      	cbz	r0, 8007746 <_dtoa_r+0xce>
 800772e:	2301      	movs	r3, #1
 8007730:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007732:	6013      	str	r3, [r2, #0]
 8007734:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007736:	b113      	cbz	r3, 800773e <_dtoa_r+0xc6>
 8007738:	4b85      	ldr	r3, [pc, #532]	@ (8007950 <_dtoa_r+0x2d8>)
 800773a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800773c:	6013      	str	r3, [r2, #0]
 800773e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007954 <_dtoa_r+0x2dc>
 8007742:	f000 bd36 	b.w	80081b2 <_dtoa_r+0xb3a>
 8007746:	ab14      	add	r3, sp, #80	@ 0x50
 8007748:	9301      	str	r3, [sp, #4]
 800774a:	ab15      	add	r3, sp, #84	@ 0x54
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	4658      	mov	r0, fp
 8007750:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007754:	f001 f97e 	bl	8008a54 <__d2b>
 8007758:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800775c:	4681      	mov	r9, r0
 800775e:	2e00      	cmp	r6, #0
 8007760:	d077      	beq.n	8007852 <_dtoa_r+0x1da>
 8007762:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007766:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007768:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800776c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007770:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007774:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007778:	9712      	str	r7, [sp, #72]	@ 0x48
 800777a:	4619      	mov	r1, r3
 800777c:	2200      	movs	r2, #0
 800777e:	4b76      	ldr	r3, [pc, #472]	@ (8007958 <_dtoa_r+0x2e0>)
 8007780:	f7f8 fd0a 	bl	8000198 <__aeabi_dsub>
 8007784:	a368      	add	r3, pc, #416	@ (adr r3, 8007928 <_dtoa_r+0x2b0>)
 8007786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778a:	f7f8 febd 	bl	8000508 <__aeabi_dmul>
 800778e:	a368      	add	r3, pc, #416	@ (adr r3, 8007930 <_dtoa_r+0x2b8>)
 8007790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007794:	f7f8 fd02 	bl	800019c <__adddf3>
 8007798:	4604      	mov	r4, r0
 800779a:	4630      	mov	r0, r6
 800779c:	460d      	mov	r5, r1
 800779e:	f7f8 fe49 	bl	8000434 <__aeabi_i2d>
 80077a2:	a365      	add	r3, pc, #404	@ (adr r3, 8007938 <_dtoa_r+0x2c0>)
 80077a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a8:	f7f8 feae 	bl	8000508 <__aeabi_dmul>
 80077ac:	4602      	mov	r2, r0
 80077ae:	460b      	mov	r3, r1
 80077b0:	4620      	mov	r0, r4
 80077b2:	4629      	mov	r1, r5
 80077b4:	f7f8 fcf2 	bl	800019c <__adddf3>
 80077b8:	4604      	mov	r4, r0
 80077ba:	460d      	mov	r5, r1
 80077bc:	f7f9 f954 	bl	8000a68 <__aeabi_d2iz>
 80077c0:	2200      	movs	r2, #0
 80077c2:	4607      	mov	r7, r0
 80077c4:	2300      	movs	r3, #0
 80077c6:	4620      	mov	r0, r4
 80077c8:	4629      	mov	r1, r5
 80077ca:	f7f9 f90f 	bl	80009ec <__aeabi_dcmplt>
 80077ce:	b140      	cbz	r0, 80077e2 <_dtoa_r+0x16a>
 80077d0:	4638      	mov	r0, r7
 80077d2:	f7f8 fe2f 	bl	8000434 <__aeabi_i2d>
 80077d6:	4622      	mov	r2, r4
 80077d8:	462b      	mov	r3, r5
 80077da:	f7f9 f8fd 	bl	80009d8 <__aeabi_dcmpeq>
 80077de:	b900      	cbnz	r0, 80077e2 <_dtoa_r+0x16a>
 80077e0:	3f01      	subs	r7, #1
 80077e2:	2f16      	cmp	r7, #22
 80077e4:	d853      	bhi.n	800788e <_dtoa_r+0x216>
 80077e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077ea:	4b5c      	ldr	r3, [pc, #368]	@ (800795c <_dtoa_r+0x2e4>)
 80077ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80077f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f4:	f7f9 f8fa 	bl	80009ec <__aeabi_dcmplt>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	d04a      	beq.n	8007892 <_dtoa_r+0x21a>
 80077fc:	2300      	movs	r3, #0
 80077fe:	3f01      	subs	r7, #1
 8007800:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007802:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007804:	1b9b      	subs	r3, r3, r6
 8007806:	1e5a      	subs	r2, r3, #1
 8007808:	bf46      	itte	mi
 800780a:	f1c3 0801 	rsbmi	r8, r3, #1
 800780e:	2300      	movmi	r3, #0
 8007810:	f04f 0800 	movpl.w	r8, #0
 8007814:	9209      	str	r2, [sp, #36]	@ 0x24
 8007816:	bf48      	it	mi
 8007818:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800781a:	2f00      	cmp	r7, #0
 800781c:	db3b      	blt.n	8007896 <_dtoa_r+0x21e>
 800781e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007820:	970e      	str	r7, [sp, #56]	@ 0x38
 8007822:	443b      	add	r3, r7
 8007824:	9309      	str	r3, [sp, #36]	@ 0x24
 8007826:	2300      	movs	r3, #0
 8007828:	930a      	str	r3, [sp, #40]	@ 0x28
 800782a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800782c:	2b09      	cmp	r3, #9
 800782e:	d866      	bhi.n	80078fe <_dtoa_r+0x286>
 8007830:	2b05      	cmp	r3, #5
 8007832:	bfc4      	itt	gt
 8007834:	3b04      	subgt	r3, #4
 8007836:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007838:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800783a:	bfc8      	it	gt
 800783c:	2400      	movgt	r4, #0
 800783e:	f1a3 0302 	sub.w	r3, r3, #2
 8007842:	bfd8      	it	le
 8007844:	2401      	movle	r4, #1
 8007846:	2b03      	cmp	r3, #3
 8007848:	d864      	bhi.n	8007914 <_dtoa_r+0x29c>
 800784a:	e8df f003 	tbb	[pc, r3]
 800784e:	382b      	.short	0x382b
 8007850:	5636      	.short	0x5636
 8007852:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007856:	441e      	add	r6, r3
 8007858:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800785c:	2b20      	cmp	r3, #32
 800785e:	bfc1      	itttt	gt
 8007860:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007864:	fa08 f803 	lslgt.w	r8, r8, r3
 8007868:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800786c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007870:	bfd6      	itet	le
 8007872:	f1c3 0320 	rsble	r3, r3, #32
 8007876:	ea48 0003 	orrgt.w	r0, r8, r3
 800787a:	fa04 f003 	lslle.w	r0, r4, r3
 800787e:	f7f8 fdc9 	bl	8000414 <__aeabi_ui2d>
 8007882:	2201      	movs	r2, #1
 8007884:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007888:	3e01      	subs	r6, #1
 800788a:	9212      	str	r2, [sp, #72]	@ 0x48
 800788c:	e775      	b.n	800777a <_dtoa_r+0x102>
 800788e:	2301      	movs	r3, #1
 8007890:	e7b6      	b.n	8007800 <_dtoa_r+0x188>
 8007892:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007894:	e7b5      	b.n	8007802 <_dtoa_r+0x18a>
 8007896:	427b      	negs	r3, r7
 8007898:	930a      	str	r3, [sp, #40]	@ 0x28
 800789a:	2300      	movs	r3, #0
 800789c:	eba8 0807 	sub.w	r8, r8, r7
 80078a0:	930e      	str	r3, [sp, #56]	@ 0x38
 80078a2:	e7c2      	b.n	800782a <_dtoa_r+0x1b2>
 80078a4:	2300      	movs	r3, #0
 80078a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	dc35      	bgt.n	800791a <_dtoa_r+0x2a2>
 80078ae:	2301      	movs	r3, #1
 80078b0:	461a      	mov	r2, r3
 80078b2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80078b6:	9221      	str	r2, [sp, #132]	@ 0x84
 80078b8:	e00b      	b.n	80078d2 <_dtoa_r+0x25a>
 80078ba:	2301      	movs	r3, #1
 80078bc:	e7f3      	b.n	80078a6 <_dtoa_r+0x22e>
 80078be:	2300      	movs	r3, #0
 80078c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80078c4:	18fb      	adds	r3, r7, r3
 80078c6:	9308      	str	r3, [sp, #32]
 80078c8:	3301      	adds	r3, #1
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	9307      	str	r3, [sp, #28]
 80078ce:	bfb8      	it	lt
 80078d0:	2301      	movlt	r3, #1
 80078d2:	2100      	movs	r1, #0
 80078d4:	2204      	movs	r2, #4
 80078d6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80078da:	f102 0514 	add.w	r5, r2, #20
 80078de:	429d      	cmp	r5, r3
 80078e0:	d91f      	bls.n	8007922 <_dtoa_r+0x2aa>
 80078e2:	6041      	str	r1, [r0, #4]
 80078e4:	4658      	mov	r0, fp
 80078e6:	f000 fd8d 	bl	8008404 <_Balloc>
 80078ea:	4682      	mov	sl, r0
 80078ec:	2800      	cmp	r0, #0
 80078ee:	d139      	bne.n	8007964 <_dtoa_r+0x2ec>
 80078f0:	4602      	mov	r2, r0
 80078f2:	f240 11af 	movw	r1, #431	@ 0x1af
 80078f6:	4b1a      	ldr	r3, [pc, #104]	@ (8007960 <_dtoa_r+0x2e8>)
 80078f8:	e6d2      	b.n	80076a0 <_dtoa_r+0x28>
 80078fa:	2301      	movs	r3, #1
 80078fc:	e7e0      	b.n	80078c0 <_dtoa_r+0x248>
 80078fe:	2401      	movs	r4, #1
 8007900:	2300      	movs	r3, #0
 8007902:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007904:	9320      	str	r3, [sp, #128]	@ 0x80
 8007906:	f04f 33ff 	mov.w	r3, #4294967295
 800790a:	2200      	movs	r2, #0
 800790c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007910:	2312      	movs	r3, #18
 8007912:	e7d0      	b.n	80078b6 <_dtoa_r+0x23e>
 8007914:	2301      	movs	r3, #1
 8007916:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007918:	e7f5      	b.n	8007906 <_dtoa_r+0x28e>
 800791a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800791c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007920:	e7d7      	b.n	80078d2 <_dtoa_r+0x25a>
 8007922:	3101      	adds	r1, #1
 8007924:	0052      	lsls	r2, r2, #1
 8007926:	e7d8      	b.n	80078da <_dtoa_r+0x262>
 8007928:	636f4361 	.word	0x636f4361
 800792c:	3fd287a7 	.word	0x3fd287a7
 8007930:	8b60c8b3 	.word	0x8b60c8b3
 8007934:	3fc68a28 	.word	0x3fc68a28
 8007938:	509f79fb 	.word	0x509f79fb
 800793c:	3fd34413 	.word	0x3fd34413
 8007940:	080096b5 	.word	0x080096b5
 8007944:	080096cc 	.word	0x080096cc
 8007948:	7ff00000 	.word	0x7ff00000
 800794c:	080096b1 	.word	0x080096b1
 8007950:	08009685 	.word	0x08009685
 8007954:	08009684 	.word	0x08009684
 8007958:	3ff80000 	.word	0x3ff80000
 800795c:	080097c8 	.word	0x080097c8
 8007960:	08009724 	.word	0x08009724
 8007964:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007968:	6018      	str	r0, [r3, #0]
 800796a:	9b07      	ldr	r3, [sp, #28]
 800796c:	2b0e      	cmp	r3, #14
 800796e:	f200 80a4 	bhi.w	8007aba <_dtoa_r+0x442>
 8007972:	2c00      	cmp	r4, #0
 8007974:	f000 80a1 	beq.w	8007aba <_dtoa_r+0x442>
 8007978:	2f00      	cmp	r7, #0
 800797a:	dd33      	ble.n	80079e4 <_dtoa_r+0x36c>
 800797c:	4b86      	ldr	r3, [pc, #536]	@ (8007b98 <_dtoa_r+0x520>)
 800797e:	f007 020f 	and.w	r2, r7, #15
 8007982:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007986:	05f8      	lsls	r0, r7, #23
 8007988:	e9d3 3400 	ldrd	r3, r4, [r3]
 800798c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007990:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007994:	d516      	bpl.n	80079c4 <_dtoa_r+0x34c>
 8007996:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800799a:	4b80      	ldr	r3, [pc, #512]	@ (8007b9c <_dtoa_r+0x524>)
 800799c:	2603      	movs	r6, #3
 800799e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079a2:	f7f8 fedb 	bl	800075c <__aeabi_ddiv>
 80079a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079aa:	f004 040f 	and.w	r4, r4, #15
 80079ae:	4d7b      	ldr	r5, [pc, #492]	@ (8007b9c <_dtoa_r+0x524>)
 80079b0:	b954      	cbnz	r4, 80079c8 <_dtoa_r+0x350>
 80079b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079ba:	f7f8 fecf 	bl	800075c <__aeabi_ddiv>
 80079be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079c2:	e028      	b.n	8007a16 <_dtoa_r+0x39e>
 80079c4:	2602      	movs	r6, #2
 80079c6:	e7f2      	b.n	80079ae <_dtoa_r+0x336>
 80079c8:	07e1      	lsls	r1, r4, #31
 80079ca:	d508      	bpl.n	80079de <_dtoa_r+0x366>
 80079cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80079d4:	f7f8 fd98 	bl	8000508 <__aeabi_dmul>
 80079d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079dc:	3601      	adds	r6, #1
 80079de:	1064      	asrs	r4, r4, #1
 80079e0:	3508      	adds	r5, #8
 80079e2:	e7e5      	b.n	80079b0 <_dtoa_r+0x338>
 80079e4:	f000 80d2 	beq.w	8007b8c <_dtoa_r+0x514>
 80079e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079ec:	427c      	negs	r4, r7
 80079ee:	4b6a      	ldr	r3, [pc, #424]	@ (8007b98 <_dtoa_r+0x520>)
 80079f0:	f004 020f 	and.w	r2, r4, #15
 80079f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fc:	f7f8 fd84 	bl	8000508 <__aeabi_dmul>
 8007a00:	2602      	movs	r6, #2
 8007a02:	2300      	movs	r3, #0
 8007a04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a08:	4d64      	ldr	r5, [pc, #400]	@ (8007b9c <_dtoa_r+0x524>)
 8007a0a:	1124      	asrs	r4, r4, #4
 8007a0c:	2c00      	cmp	r4, #0
 8007a0e:	f040 80b2 	bne.w	8007b76 <_dtoa_r+0x4fe>
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1d3      	bne.n	80079be <_dtoa_r+0x346>
 8007a16:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007a1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f000 80b7 	beq.w	8007b90 <_dtoa_r+0x518>
 8007a22:	2200      	movs	r2, #0
 8007a24:	4620      	mov	r0, r4
 8007a26:	4629      	mov	r1, r5
 8007a28:	4b5d      	ldr	r3, [pc, #372]	@ (8007ba0 <_dtoa_r+0x528>)
 8007a2a:	f7f8 ffdf 	bl	80009ec <__aeabi_dcmplt>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	f000 80ae 	beq.w	8007b90 <_dtoa_r+0x518>
 8007a34:	9b07      	ldr	r3, [sp, #28]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f000 80aa 	beq.w	8007b90 <_dtoa_r+0x518>
 8007a3c:	9b08      	ldr	r3, [sp, #32]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	dd37      	ble.n	8007ab2 <_dtoa_r+0x43a>
 8007a42:	1e7b      	subs	r3, r7, #1
 8007a44:	4620      	mov	r0, r4
 8007a46:	9304      	str	r3, [sp, #16]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	4b55      	ldr	r3, [pc, #340]	@ (8007ba4 <_dtoa_r+0x52c>)
 8007a4e:	f7f8 fd5b 	bl	8000508 <__aeabi_dmul>
 8007a52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a56:	9c08      	ldr	r4, [sp, #32]
 8007a58:	3601      	adds	r6, #1
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	f7f8 fcea 	bl	8000434 <__aeabi_i2d>
 8007a60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a64:	f7f8 fd50 	bl	8000508 <__aeabi_dmul>
 8007a68:	2200      	movs	r2, #0
 8007a6a:	4b4f      	ldr	r3, [pc, #316]	@ (8007ba8 <_dtoa_r+0x530>)
 8007a6c:	f7f8 fb96 	bl	800019c <__adddf3>
 8007a70:	4605      	mov	r5, r0
 8007a72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007a76:	2c00      	cmp	r4, #0
 8007a78:	f040 809a 	bne.w	8007bb0 <_dtoa_r+0x538>
 8007a7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a80:	2200      	movs	r2, #0
 8007a82:	4b4a      	ldr	r3, [pc, #296]	@ (8007bac <_dtoa_r+0x534>)
 8007a84:	f7f8 fb88 	bl	8000198 <__aeabi_dsub>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a90:	462a      	mov	r2, r5
 8007a92:	4633      	mov	r3, r6
 8007a94:	f7f8 ffc8 	bl	8000a28 <__aeabi_dcmpgt>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	f040 828e 	bne.w	8007fba <_dtoa_r+0x942>
 8007a9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007aa2:	462a      	mov	r2, r5
 8007aa4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007aa8:	f7f8 ffa0 	bl	80009ec <__aeabi_dcmplt>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	f040 8127 	bne.w	8007d00 <_dtoa_r+0x688>
 8007ab2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007ab6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007aba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f2c0 8163 	blt.w	8007d88 <_dtoa_r+0x710>
 8007ac2:	2f0e      	cmp	r7, #14
 8007ac4:	f300 8160 	bgt.w	8007d88 <_dtoa_r+0x710>
 8007ac8:	4b33      	ldr	r3, [pc, #204]	@ (8007b98 <_dtoa_r+0x520>)
 8007aca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ace:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007ad2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007ad6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	da03      	bge.n	8007ae4 <_dtoa_r+0x46c>
 8007adc:	9b07      	ldr	r3, [sp, #28]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f340 8100 	ble.w	8007ce4 <_dtoa_r+0x66c>
 8007ae4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007ae8:	4656      	mov	r6, sl
 8007aea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007aee:	4620      	mov	r0, r4
 8007af0:	4629      	mov	r1, r5
 8007af2:	f7f8 fe33 	bl	800075c <__aeabi_ddiv>
 8007af6:	f7f8 ffb7 	bl	8000a68 <__aeabi_d2iz>
 8007afa:	4680      	mov	r8, r0
 8007afc:	f7f8 fc9a 	bl	8000434 <__aeabi_i2d>
 8007b00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b04:	f7f8 fd00 	bl	8000508 <__aeabi_dmul>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	4629      	mov	r1, r5
 8007b10:	f7f8 fb42 	bl	8000198 <__aeabi_dsub>
 8007b14:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007b18:	9d07      	ldr	r5, [sp, #28]
 8007b1a:	f806 4b01 	strb.w	r4, [r6], #1
 8007b1e:	eba6 040a 	sub.w	r4, r6, sl
 8007b22:	42a5      	cmp	r5, r4
 8007b24:	4602      	mov	r2, r0
 8007b26:	460b      	mov	r3, r1
 8007b28:	f040 8116 	bne.w	8007d58 <_dtoa_r+0x6e0>
 8007b2c:	f7f8 fb36 	bl	800019c <__adddf3>
 8007b30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b34:	4604      	mov	r4, r0
 8007b36:	460d      	mov	r5, r1
 8007b38:	f7f8 ff76 	bl	8000a28 <__aeabi_dcmpgt>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	f040 80f8 	bne.w	8007d32 <_dtoa_r+0x6ba>
 8007b42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b46:	4620      	mov	r0, r4
 8007b48:	4629      	mov	r1, r5
 8007b4a:	f7f8 ff45 	bl	80009d8 <__aeabi_dcmpeq>
 8007b4e:	b118      	cbz	r0, 8007b58 <_dtoa_r+0x4e0>
 8007b50:	f018 0f01 	tst.w	r8, #1
 8007b54:	f040 80ed 	bne.w	8007d32 <_dtoa_r+0x6ba>
 8007b58:	4649      	mov	r1, r9
 8007b5a:	4658      	mov	r0, fp
 8007b5c:	f000 fc92 	bl	8008484 <_Bfree>
 8007b60:	2300      	movs	r3, #0
 8007b62:	7033      	strb	r3, [r6, #0]
 8007b64:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007b66:	3701      	adds	r7, #1
 8007b68:	601f      	str	r7, [r3, #0]
 8007b6a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 8320 	beq.w	80081b2 <_dtoa_r+0xb3a>
 8007b72:	601e      	str	r6, [r3, #0]
 8007b74:	e31d      	b.n	80081b2 <_dtoa_r+0xb3a>
 8007b76:	07e2      	lsls	r2, r4, #31
 8007b78:	d505      	bpl.n	8007b86 <_dtoa_r+0x50e>
 8007b7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b7e:	f7f8 fcc3 	bl	8000508 <__aeabi_dmul>
 8007b82:	2301      	movs	r3, #1
 8007b84:	3601      	adds	r6, #1
 8007b86:	1064      	asrs	r4, r4, #1
 8007b88:	3508      	adds	r5, #8
 8007b8a:	e73f      	b.n	8007a0c <_dtoa_r+0x394>
 8007b8c:	2602      	movs	r6, #2
 8007b8e:	e742      	b.n	8007a16 <_dtoa_r+0x39e>
 8007b90:	9c07      	ldr	r4, [sp, #28]
 8007b92:	9704      	str	r7, [sp, #16]
 8007b94:	e761      	b.n	8007a5a <_dtoa_r+0x3e2>
 8007b96:	bf00      	nop
 8007b98:	080097c8 	.word	0x080097c8
 8007b9c:	080097a0 	.word	0x080097a0
 8007ba0:	3ff00000 	.word	0x3ff00000
 8007ba4:	40240000 	.word	0x40240000
 8007ba8:	401c0000 	.word	0x401c0000
 8007bac:	40140000 	.word	0x40140000
 8007bb0:	4b70      	ldr	r3, [pc, #448]	@ (8007d74 <_dtoa_r+0x6fc>)
 8007bb2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007bb4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007bb8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007bbc:	4454      	add	r4, sl
 8007bbe:	2900      	cmp	r1, #0
 8007bc0:	d045      	beq.n	8007c4e <_dtoa_r+0x5d6>
 8007bc2:	2000      	movs	r0, #0
 8007bc4:	496c      	ldr	r1, [pc, #432]	@ (8007d78 <_dtoa_r+0x700>)
 8007bc6:	f7f8 fdc9 	bl	800075c <__aeabi_ddiv>
 8007bca:	4633      	mov	r3, r6
 8007bcc:	462a      	mov	r2, r5
 8007bce:	f7f8 fae3 	bl	8000198 <__aeabi_dsub>
 8007bd2:	4656      	mov	r6, sl
 8007bd4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007bd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bdc:	f7f8 ff44 	bl	8000a68 <__aeabi_d2iz>
 8007be0:	4605      	mov	r5, r0
 8007be2:	f7f8 fc27 	bl	8000434 <__aeabi_i2d>
 8007be6:	4602      	mov	r2, r0
 8007be8:	460b      	mov	r3, r1
 8007bea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bee:	f7f8 fad3 	bl	8000198 <__aeabi_dsub>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	3530      	adds	r5, #48	@ 0x30
 8007bf8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007bfc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c00:	f806 5b01 	strb.w	r5, [r6], #1
 8007c04:	f7f8 fef2 	bl	80009ec <__aeabi_dcmplt>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	d163      	bne.n	8007cd4 <_dtoa_r+0x65c>
 8007c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c10:	2000      	movs	r0, #0
 8007c12:	495a      	ldr	r1, [pc, #360]	@ (8007d7c <_dtoa_r+0x704>)
 8007c14:	f7f8 fac0 	bl	8000198 <__aeabi_dsub>
 8007c18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c1c:	f7f8 fee6 	bl	80009ec <__aeabi_dcmplt>
 8007c20:	2800      	cmp	r0, #0
 8007c22:	f040 8087 	bne.w	8007d34 <_dtoa_r+0x6bc>
 8007c26:	42a6      	cmp	r6, r4
 8007c28:	f43f af43 	beq.w	8007ab2 <_dtoa_r+0x43a>
 8007c2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007c30:	2200      	movs	r2, #0
 8007c32:	4b53      	ldr	r3, [pc, #332]	@ (8007d80 <_dtoa_r+0x708>)
 8007c34:	f7f8 fc68 	bl	8000508 <__aeabi_dmul>
 8007c38:	2200      	movs	r2, #0
 8007c3a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c42:	4b4f      	ldr	r3, [pc, #316]	@ (8007d80 <_dtoa_r+0x708>)
 8007c44:	f7f8 fc60 	bl	8000508 <__aeabi_dmul>
 8007c48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c4c:	e7c4      	b.n	8007bd8 <_dtoa_r+0x560>
 8007c4e:	4631      	mov	r1, r6
 8007c50:	4628      	mov	r0, r5
 8007c52:	f7f8 fc59 	bl	8000508 <__aeabi_dmul>
 8007c56:	4656      	mov	r6, sl
 8007c58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c5c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c62:	f7f8 ff01 	bl	8000a68 <__aeabi_d2iz>
 8007c66:	4605      	mov	r5, r0
 8007c68:	f7f8 fbe4 	bl	8000434 <__aeabi_i2d>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	460b      	mov	r3, r1
 8007c70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c74:	f7f8 fa90 	bl	8000198 <__aeabi_dsub>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	3530      	adds	r5, #48	@ 0x30
 8007c7e:	f806 5b01 	strb.w	r5, [r6], #1
 8007c82:	42a6      	cmp	r6, r4
 8007c84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c88:	f04f 0200 	mov.w	r2, #0
 8007c8c:	d124      	bne.n	8007cd8 <_dtoa_r+0x660>
 8007c8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007c92:	4b39      	ldr	r3, [pc, #228]	@ (8007d78 <_dtoa_r+0x700>)
 8007c94:	f7f8 fa82 	bl	800019c <__adddf3>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ca0:	f7f8 fec2 	bl	8000a28 <__aeabi_dcmpgt>
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	d145      	bne.n	8007d34 <_dtoa_r+0x6bc>
 8007ca8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007cac:	2000      	movs	r0, #0
 8007cae:	4932      	ldr	r1, [pc, #200]	@ (8007d78 <_dtoa_r+0x700>)
 8007cb0:	f7f8 fa72 	bl	8000198 <__aeabi_dsub>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cbc:	f7f8 fe96 	bl	80009ec <__aeabi_dcmplt>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	f43f aef6 	beq.w	8007ab2 <_dtoa_r+0x43a>
 8007cc6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007cc8:	1e73      	subs	r3, r6, #1
 8007cca:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007ccc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007cd0:	2b30      	cmp	r3, #48	@ 0x30
 8007cd2:	d0f8      	beq.n	8007cc6 <_dtoa_r+0x64e>
 8007cd4:	9f04      	ldr	r7, [sp, #16]
 8007cd6:	e73f      	b.n	8007b58 <_dtoa_r+0x4e0>
 8007cd8:	4b29      	ldr	r3, [pc, #164]	@ (8007d80 <_dtoa_r+0x708>)
 8007cda:	f7f8 fc15 	bl	8000508 <__aeabi_dmul>
 8007cde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ce2:	e7bc      	b.n	8007c5e <_dtoa_r+0x5e6>
 8007ce4:	d10c      	bne.n	8007d00 <_dtoa_r+0x688>
 8007ce6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cea:	2200      	movs	r2, #0
 8007cec:	4b25      	ldr	r3, [pc, #148]	@ (8007d84 <_dtoa_r+0x70c>)
 8007cee:	f7f8 fc0b 	bl	8000508 <__aeabi_dmul>
 8007cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cf6:	f7f8 fe8d 	bl	8000a14 <__aeabi_dcmpge>
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	f000 815b 	beq.w	8007fb6 <_dtoa_r+0x93e>
 8007d00:	2400      	movs	r4, #0
 8007d02:	4625      	mov	r5, r4
 8007d04:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d06:	4656      	mov	r6, sl
 8007d08:	43db      	mvns	r3, r3
 8007d0a:	9304      	str	r3, [sp, #16]
 8007d0c:	2700      	movs	r7, #0
 8007d0e:	4621      	mov	r1, r4
 8007d10:	4658      	mov	r0, fp
 8007d12:	f000 fbb7 	bl	8008484 <_Bfree>
 8007d16:	2d00      	cmp	r5, #0
 8007d18:	d0dc      	beq.n	8007cd4 <_dtoa_r+0x65c>
 8007d1a:	b12f      	cbz	r7, 8007d28 <_dtoa_r+0x6b0>
 8007d1c:	42af      	cmp	r7, r5
 8007d1e:	d003      	beq.n	8007d28 <_dtoa_r+0x6b0>
 8007d20:	4639      	mov	r1, r7
 8007d22:	4658      	mov	r0, fp
 8007d24:	f000 fbae 	bl	8008484 <_Bfree>
 8007d28:	4629      	mov	r1, r5
 8007d2a:	4658      	mov	r0, fp
 8007d2c:	f000 fbaa 	bl	8008484 <_Bfree>
 8007d30:	e7d0      	b.n	8007cd4 <_dtoa_r+0x65c>
 8007d32:	9704      	str	r7, [sp, #16]
 8007d34:	4633      	mov	r3, r6
 8007d36:	461e      	mov	r6, r3
 8007d38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d3c:	2a39      	cmp	r2, #57	@ 0x39
 8007d3e:	d107      	bne.n	8007d50 <_dtoa_r+0x6d8>
 8007d40:	459a      	cmp	sl, r3
 8007d42:	d1f8      	bne.n	8007d36 <_dtoa_r+0x6be>
 8007d44:	9a04      	ldr	r2, [sp, #16]
 8007d46:	3201      	adds	r2, #1
 8007d48:	9204      	str	r2, [sp, #16]
 8007d4a:	2230      	movs	r2, #48	@ 0x30
 8007d4c:	f88a 2000 	strb.w	r2, [sl]
 8007d50:	781a      	ldrb	r2, [r3, #0]
 8007d52:	3201      	adds	r2, #1
 8007d54:	701a      	strb	r2, [r3, #0]
 8007d56:	e7bd      	b.n	8007cd4 <_dtoa_r+0x65c>
 8007d58:	2200      	movs	r2, #0
 8007d5a:	4b09      	ldr	r3, [pc, #36]	@ (8007d80 <_dtoa_r+0x708>)
 8007d5c:	f7f8 fbd4 	bl	8000508 <__aeabi_dmul>
 8007d60:	2200      	movs	r2, #0
 8007d62:	2300      	movs	r3, #0
 8007d64:	4604      	mov	r4, r0
 8007d66:	460d      	mov	r5, r1
 8007d68:	f7f8 fe36 	bl	80009d8 <__aeabi_dcmpeq>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	f43f aebc 	beq.w	8007aea <_dtoa_r+0x472>
 8007d72:	e6f1      	b.n	8007b58 <_dtoa_r+0x4e0>
 8007d74:	080097c8 	.word	0x080097c8
 8007d78:	3fe00000 	.word	0x3fe00000
 8007d7c:	3ff00000 	.word	0x3ff00000
 8007d80:	40240000 	.word	0x40240000
 8007d84:	40140000 	.word	0x40140000
 8007d88:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007d8a:	2a00      	cmp	r2, #0
 8007d8c:	f000 80db 	beq.w	8007f46 <_dtoa_r+0x8ce>
 8007d90:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007d92:	2a01      	cmp	r2, #1
 8007d94:	f300 80bf 	bgt.w	8007f16 <_dtoa_r+0x89e>
 8007d98:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007d9a:	2a00      	cmp	r2, #0
 8007d9c:	f000 80b7 	beq.w	8007f0e <_dtoa_r+0x896>
 8007da0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007da4:	4646      	mov	r6, r8
 8007da6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007da8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007daa:	2101      	movs	r1, #1
 8007dac:	441a      	add	r2, r3
 8007dae:	4658      	mov	r0, fp
 8007db0:	4498      	add	r8, r3
 8007db2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007db4:	f000 fc1a 	bl	80085ec <__i2b>
 8007db8:	4605      	mov	r5, r0
 8007dba:	b15e      	cbz	r6, 8007dd4 <_dtoa_r+0x75c>
 8007dbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	dd08      	ble.n	8007dd4 <_dtoa_r+0x75c>
 8007dc2:	42b3      	cmp	r3, r6
 8007dc4:	bfa8      	it	ge
 8007dc6:	4633      	movge	r3, r6
 8007dc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dca:	eba8 0803 	sub.w	r8, r8, r3
 8007dce:	1af6      	subs	r6, r6, r3
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dd6:	b1f3      	cbz	r3, 8007e16 <_dtoa_r+0x79e>
 8007dd8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f000 80b7 	beq.w	8007f4e <_dtoa_r+0x8d6>
 8007de0:	b18c      	cbz	r4, 8007e06 <_dtoa_r+0x78e>
 8007de2:	4629      	mov	r1, r5
 8007de4:	4622      	mov	r2, r4
 8007de6:	4658      	mov	r0, fp
 8007de8:	f000 fcbe 	bl	8008768 <__pow5mult>
 8007dec:	464a      	mov	r2, r9
 8007dee:	4601      	mov	r1, r0
 8007df0:	4605      	mov	r5, r0
 8007df2:	4658      	mov	r0, fp
 8007df4:	f000 fc10 	bl	8008618 <__multiply>
 8007df8:	4649      	mov	r1, r9
 8007dfa:	9004      	str	r0, [sp, #16]
 8007dfc:	4658      	mov	r0, fp
 8007dfe:	f000 fb41 	bl	8008484 <_Bfree>
 8007e02:	9b04      	ldr	r3, [sp, #16]
 8007e04:	4699      	mov	r9, r3
 8007e06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e08:	1b1a      	subs	r2, r3, r4
 8007e0a:	d004      	beq.n	8007e16 <_dtoa_r+0x79e>
 8007e0c:	4649      	mov	r1, r9
 8007e0e:	4658      	mov	r0, fp
 8007e10:	f000 fcaa 	bl	8008768 <__pow5mult>
 8007e14:	4681      	mov	r9, r0
 8007e16:	2101      	movs	r1, #1
 8007e18:	4658      	mov	r0, fp
 8007e1a:	f000 fbe7 	bl	80085ec <__i2b>
 8007e1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e20:	4604      	mov	r4, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 81c9 	beq.w	80081ba <_dtoa_r+0xb42>
 8007e28:	461a      	mov	r2, r3
 8007e2a:	4601      	mov	r1, r0
 8007e2c:	4658      	mov	r0, fp
 8007e2e:	f000 fc9b 	bl	8008768 <__pow5mult>
 8007e32:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007e34:	4604      	mov	r4, r0
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	f300 808f 	bgt.w	8007f5a <_dtoa_r+0x8e2>
 8007e3c:	9b02      	ldr	r3, [sp, #8]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f040 8087 	bne.w	8007f52 <_dtoa_r+0x8da>
 8007e44:	9b03      	ldr	r3, [sp, #12]
 8007e46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	f040 8083 	bne.w	8007f56 <_dtoa_r+0x8de>
 8007e50:	9b03      	ldr	r3, [sp, #12]
 8007e52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e56:	0d1b      	lsrs	r3, r3, #20
 8007e58:	051b      	lsls	r3, r3, #20
 8007e5a:	b12b      	cbz	r3, 8007e68 <_dtoa_r+0x7f0>
 8007e5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e5e:	f108 0801 	add.w	r8, r8, #1
 8007e62:	3301      	adds	r3, #1
 8007e64:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e66:	2301      	movs	r3, #1
 8007e68:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f000 81aa 	beq.w	80081c6 <_dtoa_r+0xb4e>
 8007e72:	6923      	ldr	r3, [r4, #16]
 8007e74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007e78:	6918      	ldr	r0, [r3, #16]
 8007e7a:	f000 fb6b 	bl	8008554 <__hi0bits>
 8007e7e:	f1c0 0020 	rsb	r0, r0, #32
 8007e82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e84:	4418      	add	r0, r3
 8007e86:	f010 001f 	ands.w	r0, r0, #31
 8007e8a:	d071      	beq.n	8007f70 <_dtoa_r+0x8f8>
 8007e8c:	f1c0 0320 	rsb	r3, r0, #32
 8007e90:	2b04      	cmp	r3, #4
 8007e92:	dd65      	ble.n	8007f60 <_dtoa_r+0x8e8>
 8007e94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e96:	f1c0 001c 	rsb	r0, r0, #28
 8007e9a:	4403      	add	r3, r0
 8007e9c:	4480      	add	r8, r0
 8007e9e:	4406      	add	r6, r0
 8007ea0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ea2:	f1b8 0f00 	cmp.w	r8, #0
 8007ea6:	dd05      	ble.n	8007eb4 <_dtoa_r+0x83c>
 8007ea8:	4649      	mov	r1, r9
 8007eaa:	4642      	mov	r2, r8
 8007eac:	4658      	mov	r0, fp
 8007eae:	f000 fcb5 	bl	800881c <__lshift>
 8007eb2:	4681      	mov	r9, r0
 8007eb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	dd05      	ble.n	8007ec6 <_dtoa_r+0x84e>
 8007eba:	4621      	mov	r1, r4
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	4658      	mov	r0, fp
 8007ec0:	f000 fcac 	bl	800881c <__lshift>
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d053      	beq.n	8007f74 <_dtoa_r+0x8fc>
 8007ecc:	4621      	mov	r1, r4
 8007ece:	4648      	mov	r0, r9
 8007ed0:	f000 fd10 	bl	80088f4 <__mcmp>
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	da4d      	bge.n	8007f74 <_dtoa_r+0x8fc>
 8007ed8:	1e7b      	subs	r3, r7, #1
 8007eda:	4649      	mov	r1, r9
 8007edc:	9304      	str	r3, [sp, #16]
 8007ede:	220a      	movs	r2, #10
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	4658      	mov	r0, fp
 8007ee4:	f000 faf0 	bl	80084c8 <__multadd>
 8007ee8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007eea:	4681      	mov	r9, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f000 816c 	beq.w	80081ca <_dtoa_r+0xb52>
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	4629      	mov	r1, r5
 8007ef6:	220a      	movs	r2, #10
 8007ef8:	4658      	mov	r0, fp
 8007efa:	f000 fae5 	bl	80084c8 <__multadd>
 8007efe:	9b08      	ldr	r3, [sp, #32]
 8007f00:	4605      	mov	r5, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	dc61      	bgt.n	8007fca <_dtoa_r+0x952>
 8007f06:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	dc3b      	bgt.n	8007f84 <_dtoa_r+0x90c>
 8007f0c:	e05d      	b.n	8007fca <_dtoa_r+0x952>
 8007f0e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007f10:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007f14:	e746      	b.n	8007da4 <_dtoa_r+0x72c>
 8007f16:	9b07      	ldr	r3, [sp, #28]
 8007f18:	1e5c      	subs	r4, r3, #1
 8007f1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f1c:	42a3      	cmp	r3, r4
 8007f1e:	bfbf      	itttt	lt
 8007f20:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007f22:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007f24:	1ae3      	sublt	r3, r4, r3
 8007f26:	18d2      	addlt	r2, r2, r3
 8007f28:	bfa8      	it	ge
 8007f2a:	1b1c      	subge	r4, r3, r4
 8007f2c:	9b07      	ldr	r3, [sp, #28]
 8007f2e:	bfbe      	ittt	lt
 8007f30:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007f32:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007f34:	2400      	movlt	r4, #0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	bfb5      	itete	lt
 8007f3a:	eba8 0603 	sublt.w	r6, r8, r3
 8007f3e:	4646      	movge	r6, r8
 8007f40:	2300      	movlt	r3, #0
 8007f42:	9b07      	ldrge	r3, [sp, #28]
 8007f44:	e730      	b.n	8007da8 <_dtoa_r+0x730>
 8007f46:	4646      	mov	r6, r8
 8007f48:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007f4a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007f4c:	e735      	b.n	8007dba <_dtoa_r+0x742>
 8007f4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007f50:	e75c      	b.n	8007e0c <_dtoa_r+0x794>
 8007f52:	2300      	movs	r3, #0
 8007f54:	e788      	b.n	8007e68 <_dtoa_r+0x7f0>
 8007f56:	9b02      	ldr	r3, [sp, #8]
 8007f58:	e786      	b.n	8007e68 <_dtoa_r+0x7f0>
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f5e:	e788      	b.n	8007e72 <_dtoa_r+0x7fa>
 8007f60:	d09f      	beq.n	8007ea2 <_dtoa_r+0x82a>
 8007f62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f64:	331c      	adds	r3, #28
 8007f66:	441a      	add	r2, r3
 8007f68:	4498      	add	r8, r3
 8007f6a:	441e      	add	r6, r3
 8007f6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f6e:	e798      	b.n	8007ea2 <_dtoa_r+0x82a>
 8007f70:	4603      	mov	r3, r0
 8007f72:	e7f6      	b.n	8007f62 <_dtoa_r+0x8ea>
 8007f74:	9b07      	ldr	r3, [sp, #28]
 8007f76:	9704      	str	r7, [sp, #16]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	dc20      	bgt.n	8007fbe <_dtoa_r+0x946>
 8007f7c:	9308      	str	r3, [sp, #32]
 8007f7e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	dd1e      	ble.n	8007fc2 <_dtoa_r+0x94a>
 8007f84:	9b08      	ldr	r3, [sp, #32]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f47f aebc 	bne.w	8007d04 <_dtoa_r+0x68c>
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	2205      	movs	r2, #5
 8007f90:	4658      	mov	r0, fp
 8007f92:	f000 fa99 	bl	80084c8 <__multadd>
 8007f96:	4601      	mov	r1, r0
 8007f98:	4604      	mov	r4, r0
 8007f9a:	4648      	mov	r0, r9
 8007f9c:	f000 fcaa 	bl	80088f4 <__mcmp>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	f77f aeaf 	ble.w	8007d04 <_dtoa_r+0x68c>
 8007fa6:	2331      	movs	r3, #49	@ 0x31
 8007fa8:	4656      	mov	r6, sl
 8007faa:	f806 3b01 	strb.w	r3, [r6], #1
 8007fae:	9b04      	ldr	r3, [sp, #16]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	9304      	str	r3, [sp, #16]
 8007fb4:	e6aa      	b.n	8007d0c <_dtoa_r+0x694>
 8007fb6:	9c07      	ldr	r4, [sp, #28]
 8007fb8:	9704      	str	r7, [sp, #16]
 8007fba:	4625      	mov	r5, r4
 8007fbc:	e7f3      	b.n	8007fa6 <_dtoa_r+0x92e>
 8007fbe:	9b07      	ldr	r3, [sp, #28]
 8007fc0:	9308      	str	r3, [sp, #32]
 8007fc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f000 8104 	beq.w	80081d2 <_dtoa_r+0xb5a>
 8007fca:	2e00      	cmp	r6, #0
 8007fcc:	dd05      	ble.n	8007fda <_dtoa_r+0x962>
 8007fce:	4629      	mov	r1, r5
 8007fd0:	4632      	mov	r2, r6
 8007fd2:	4658      	mov	r0, fp
 8007fd4:	f000 fc22 	bl	800881c <__lshift>
 8007fd8:	4605      	mov	r5, r0
 8007fda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d05a      	beq.n	8008096 <_dtoa_r+0xa1e>
 8007fe0:	4658      	mov	r0, fp
 8007fe2:	6869      	ldr	r1, [r5, #4]
 8007fe4:	f000 fa0e 	bl	8008404 <_Balloc>
 8007fe8:	4606      	mov	r6, r0
 8007fea:	b928      	cbnz	r0, 8007ff8 <_dtoa_r+0x980>
 8007fec:	4602      	mov	r2, r0
 8007fee:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007ff2:	4b83      	ldr	r3, [pc, #524]	@ (8008200 <_dtoa_r+0xb88>)
 8007ff4:	f7ff bb54 	b.w	80076a0 <_dtoa_r+0x28>
 8007ff8:	692a      	ldr	r2, [r5, #16]
 8007ffa:	f105 010c 	add.w	r1, r5, #12
 8007ffe:	3202      	adds	r2, #2
 8008000:	0092      	lsls	r2, r2, #2
 8008002:	300c      	adds	r0, #12
 8008004:	f000 ffa8 	bl	8008f58 <memcpy>
 8008008:	2201      	movs	r2, #1
 800800a:	4631      	mov	r1, r6
 800800c:	4658      	mov	r0, fp
 800800e:	f000 fc05 	bl	800881c <__lshift>
 8008012:	462f      	mov	r7, r5
 8008014:	4605      	mov	r5, r0
 8008016:	f10a 0301 	add.w	r3, sl, #1
 800801a:	9307      	str	r3, [sp, #28]
 800801c:	9b08      	ldr	r3, [sp, #32]
 800801e:	4453      	add	r3, sl
 8008020:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008022:	9b02      	ldr	r3, [sp, #8]
 8008024:	f003 0301 	and.w	r3, r3, #1
 8008028:	930a      	str	r3, [sp, #40]	@ 0x28
 800802a:	9b07      	ldr	r3, [sp, #28]
 800802c:	4621      	mov	r1, r4
 800802e:	3b01      	subs	r3, #1
 8008030:	4648      	mov	r0, r9
 8008032:	9302      	str	r3, [sp, #8]
 8008034:	f7ff fa97 	bl	8007566 <quorem>
 8008038:	4639      	mov	r1, r7
 800803a:	9008      	str	r0, [sp, #32]
 800803c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008040:	4648      	mov	r0, r9
 8008042:	f000 fc57 	bl	80088f4 <__mcmp>
 8008046:	462a      	mov	r2, r5
 8008048:	9009      	str	r0, [sp, #36]	@ 0x24
 800804a:	4621      	mov	r1, r4
 800804c:	4658      	mov	r0, fp
 800804e:	f000 fc6d 	bl	800892c <__mdiff>
 8008052:	68c2      	ldr	r2, [r0, #12]
 8008054:	4606      	mov	r6, r0
 8008056:	bb02      	cbnz	r2, 800809a <_dtoa_r+0xa22>
 8008058:	4601      	mov	r1, r0
 800805a:	4648      	mov	r0, r9
 800805c:	f000 fc4a 	bl	80088f4 <__mcmp>
 8008060:	4602      	mov	r2, r0
 8008062:	4631      	mov	r1, r6
 8008064:	4658      	mov	r0, fp
 8008066:	920c      	str	r2, [sp, #48]	@ 0x30
 8008068:	f000 fa0c 	bl	8008484 <_Bfree>
 800806c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800806e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008070:	9e07      	ldr	r6, [sp, #28]
 8008072:	ea43 0102 	orr.w	r1, r3, r2
 8008076:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008078:	4319      	orrs	r1, r3
 800807a:	d110      	bne.n	800809e <_dtoa_r+0xa26>
 800807c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008080:	d029      	beq.n	80080d6 <_dtoa_r+0xa5e>
 8008082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008084:	2b00      	cmp	r3, #0
 8008086:	dd02      	ble.n	800808e <_dtoa_r+0xa16>
 8008088:	9b08      	ldr	r3, [sp, #32]
 800808a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800808e:	9b02      	ldr	r3, [sp, #8]
 8008090:	f883 8000 	strb.w	r8, [r3]
 8008094:	e63b      	b.n	8007d0e <_dtoa_r+0x696>
 8008096:	4628      	mov	r0, r5
 8008098:	e7bb      	b.n	8008012 <_dtoa_r+0x99a>
 800809a:	2201      	movs	r2, #1
 800809c:	e7e1      	b.n	8008062 <_dtoa_r+0x9ea>
 800809e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	db04      	blt.n	80080ae <_dtoa_r+0xa36>
 80080a4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80080a6:	430b      	orrs	r3, r1
 80080a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80080aa:	430b      	orrs	r3, r1
 80080ac:	d120      	bne.n	80080f0 <_dtoa_r+0xa78>
 80080ae:	2a00      	cmp	r2, #0
 80080b0:	dded      	ble.n	800808e <_dtoa_r+0xa16>
 80080b2:	4649      	mov	r1, r9
 80080b4:	2201      	movs	r2, #1
 80080b6:	4658      	mov	r0, fp
 80080b8:	f000 fbb0 	bl	800881c <__lshift>
 80080bc:	4621      	mov	r1, r4
 80080be:	4681      	mov	r9, r0
 80080c0:	f000 fc18 	bl	80088f4 <__mcmp>
 80080c4:	2800      	cmp	r0, #0
 80080c6:	dc03      	bgt.n	80080d0 <_dtoa_r+0xa58>
 80080c8:	d1e1      	bne.n	800808e <_dtoa_r+0xa16>
 80080ca:	f018 0f01 	tst.w	r8, #1
 80080ce:	d0de      	beq.n	800808e <_dtoa_r+0xa16>
 80080d0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80080d4:	d1d8      	bne.n	8008088 <_dtoa_r+0xa10>
 80080d6:	2339      	movs	r3, #57	@ 0x39
 80080d8:	9a02      	ldr	r2, [sp, #8]
 80080da:	7013      	strb	r3, [r2, #0]
 80080dc:	4633      	mov	r3, r6
 80080de:	461e      	mov	r6, r3
 80080e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80080e4:	3b01      	subs	r3, #1
 80080e6:	2a39      	cmp	r2, #57	@ 0x39
 80080e8:	d052      	beq.n	8008190 <_dtoa_r+0xb18>
 80080ea:	3201      	adds	r2, #1
 80080ec:	701a      	strb	r2, [r3, #0]
 80080ee:	e60e      	b.n	8007d0e <_dtoa_r+0x696>
 80080f0:	2a00      	cmp	r2, #0
 80080f2:	dd07      	ble.n	8008104 <_dtoa_r+0xa8c>
 80080f4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80080f8:	d0ed      	beq.n	80080d6 <_dtoa_r+0xa5e>
 80080fa:	9a02      	ldr	r2, [sp, #8]
 80080fc:	f108 0301 	add.w	r3, r8, #1
 8008100:	7013      	strb	r3, [r2, #0]
 8008102:	e604      	b.n	8007d0e <_dtoa_r+0x696>
 8008104:	9b07      	ldr	r3, [sp, #28]
 8008106:	9a07      	ldr	r2, [sp, #28]
 8008108:	f803 8c01 	strb.w	r8, [r3, #-1]
 800810c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800810e:	4293      	cmp	r3, r2
 8008110:	d028      	beq.n	8008164 <_dtoa_r+0xaec>
 8008112:	4649      	mov	r1, r9
 8008114:	2300      	movs	r3, #0
 8008116:	220a      	movs	r2, #10
 8008118:	4658      	mov	r0, fp
 800811a:	f000 f9d5 	bl	80084c8 <__multadd>
 800811e:	42af      	cmp	r7, r5
 8008120:	4681      	mov	r9, r0
 8008122:	f04f 0300 	mov.w	r3, #0
 8008126:	f04f 020a 	mov.w	r2, #10
 800812a:	4639      	mov	r1, r7
 800812c:	4658      	mov	r0, fp
 800812e:	d107      	bne.n	8008140 <_dtoa_r+0xac8>
 8008130:	f000 f9ca 	bl	80084c8 <__multadd>
 8008134:	4607      	mov	r7, r0
 8008136:	4605      	mov	r5, r0
 8008138:	9b07      	ldr	r3, [sp, #28]
 800813a:	3301      	adds	r3, #1
 800813c:	9307      	str	r3, [sp, #28]
 800813e:	e774      	b.n	800802a <_dtoa_r+0x9b2>
 8008140:	f000 f9c2 	bl	80084c8 <__multadd>
 8008144:	4629      	mov	r1, r5
 8008146:	4607      	mov	r7, r0
 8008148:	2300      	movs	r3, #0
 800814a:	220a      	movs	r2, #10
 800814c:	4658      	mov	r0, fp
 800814e:	f000 f9bb 	bl	80084c8 <__multadd>
 8008152:	4605      	mov	r5, r0
 8008154:	e7f0      	b.n	8008138 <_dtoa_r+0xac0>
 8008156:	9b08      	ldr	r3, [sp, #32]
 8008158:	2700      	movs	r7, #0
 800815a:	2b00      	cmp	r3, #0
 800815c:	bfcc      	ite	gt
 800815e:	461e      	movgt	r6, r3
 8008160:	2601      	movle	r6, #1
 8008162:	4456      	add	r6, sl
 8008164:	4649      	mov	r1, r9
 8008166:	2201      	movs	r2, #1
 8008168:	4658      	mov	r0, fp
 800816a:	f000 fb57 	bl	800881c <__lshift>
 800816e:	4621      	mov	r1, r4
 8008170:	4681      	mov	r9, r0
 8008172:	f000 fbbf 	bl	80088f4 <__mcmp>
 8008176:	2800      	cmp	r0, #0
 8008178:	dcb0      	bgt.n	80080dc <_dtoa_r+0xa64>
 800817a:	d102      	bne.n	8008182 <_dtoa_r+0xb0a>
 800817c:	f018 0f01 	tst.w	r8, #1
 8008180:	d1ac      	bne.n	80080dc <_dtoa_r+0xa64>
 8008182:	4633      	mov	r3, r6
 8008184:	461e      	mov	r6, r3
 8008186:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800818a:	2a30      	cmp	r2, #48	@ 0x30
 800818c:	d0fa      	beq.n	8008184 <_dtoa_r+0xb0c>
 800818e:	e5be      	b.n	8007d0e <_dtoa_r+0x696>
 8008190:	459a      	cmp	sl, r3
 8008192:	d1a4      	bne.n	80080de <_dtoa_r+0xa66>
 8008194:	9b04      	ldr	r3, [sp, #16]
 8008196:	3301      	adds	r3, #1
 8008198:	9304      	str	r3, [sp, #16]
 800819a:	2331      	movs	r3, #49	@ 0x31
 800819c:	f88a 3000 	strb.w	r3, [sl]
 80081a0:	e5b5      	b.n	8007d0e <_dtoa_r+0x696>
 80081a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80081a4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008204 <_dtoa_r+0xb8c>
 80081a8:	b11b      	cbz	r3, 80081b2 <_dtoa_r+0xb3a>
 80081aa:	f10a 0308 	add.w	r3, sl, #8
 80081ae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80081b0:	6013      	str	r3, [r2, #0]
 80081b2:	4650      	mov	r0, sl
 80081b4:	b017      	add	sp, #92	@ 0x5c
 80081b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80081bc:	2b01      	cmp	r3, #1
 80081be:	f77f ae3d 	ble.w	8007e3c <_dtoa_r+0x7c4>
 80081c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80081c6:	2001      	movs	r0, #1
 80081c8:	e65b      	b.n	8007e82 <_dtoa_r+0x80a>
 80081ca:	9b08      	ldr	r3, [sp, #32]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f77f aed6 	ble.w	8007f7e <_dtoa_r+0x906>
 80081d2:	4656      	mov	r6, sl
 80081d4:	4621      	mov	r1, r4
 80081d6:	4648      	mov	r0, r9
 80081d8:	f7ff f9c5 	bl	8007566 <quorem>
 80081dc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80081e0:	9b08      	ldr	r3, [sp, #32]
 80081e2:	f806 8b01 	strb.w	r8, [r6], #1
 80081e6:	eba6 020a 	sub.w	r2, r6, sl
 80081ea:	4293      	cmp	r3, r2
 80081ec:	ddb3      	ble.n	8008156 <_dtoa_r+0xade>
 80081ee:	4649      	mov	r1, r9
 80081f0:	2300      	movs	r3, #0
 80081f2:	220a      	movs	r2, #10
 80081f4:	4658      	mov	r0, fp
 80081f6:	f000 f967 	bl	80084c8 <__multadd>
 80081fa:	4681      	mov	r9, r0
 80081fc:	e7ea      	b.n	80081d4 <_dtoa_r+0xb5c>
 80081fe:	bf00      	nop
 8008200:	08009724 	.word	0x08009724
 8008204:	080096a8 	.word	0x080096a8

08008208 <_free_r>:
 8008208:	b538      	push	{r3, r4, r5, lr}
 800820a:	4605      	mov	r5, r0
 800820c:	2900      	cmp	r1, #0
 800820e:	d040      	beq.n	8008292 <_free_r+0x8a>
 8008210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008214:	1f0c      	subs	r4, r1, #4
 8008216:	2b00      	cmp	r3, #0
 8008218:	bfb8      	it	lt
 800821a:	18e4      	addlt	r4, r4, r3
 800821c:	f000 f8e6 	bl	80083ec <__malloc_lock>
 8008220:	4a1c      	ldr	r2, [pc, #112]	@ (8008294 <_free_r+0x8c>)
 8008222:	6813      	ldr	r3, [r2, #0]
 8008224:	b933      	cbnz	r3, 8008234 <_free_r+0x2c>
 8008226:	6063      	str	r3, [r4, #4]
 8008228:	6014      	str	r4, [r2, #0]
 800822a:	4628      	mov	r0, r5
 800822c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008230:	f000 b8e2 	b.w	80083f8 <__malloc_unlock>
 8008234:	42a3      	cmp	r3, r4
 8008236:	d908      	bls.n	800824a <_free_r+0x42>
 8008238:	6820      	ldr	r0, [r4, #0]
 800823a:	1821      	adds	r1, r4, r0
 800823c:	428b      	cmp	r3, r1
 800823e:	bf01      	itttt	eq
 8008240:	6819      	ldreq	r1, [r3, #0]
 8008242:	685b      	ldreq	r3, [r3, #4]
 8008244:	1809      	addeq	r1, r1, r0
 8008246:	6021      	streq	r1, [r4, #0]
 8008248:	e7ed      	b.n	8008226 <_free_r+0x1e>
 800824a:	461a      	mov	r2, r3
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	b10b      	cbz	r3, 8008254 <_free_r+0x4c>
 8008250:	42a3      	cmp	r3, r4
 8008252:	d9fa      	bls.n	800824a <_free_r+0x42>
 8008254:	6811      	ldr	r1, [r2, #0]
 8008256:	1850      	adds	r0, r2, r1
 8008258:	42a0      	cmp	r0, r4
 800825a:	d10b      	bne.n	8008274 <_free_r+0x6c>
 800825c:	6820      	ldr	r0, [r4, #0]
 800825e:	4401      	add	r1, r0
 8008260:	1850      	adds	r0, r2, r1
 8008262:	4283      	cmp	r3, r0
 8008264:	6011      	str	r1, [r2, #0]
 8008266:	d1e0      	bne.n	800822a <_free_r+0x22>
 8008268:	6818      	ldr	r0, [r3, #0]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	4408      	add	r0, r1
 800826e:	6010      	str	r0, [r2, #0]
 8008270:	6053      	str	r3, [r2, #4]
 8008272:	e7da      	b.n	800822a <_free_r+0x22>
 8008274:	d902      	bls.n	800827c <_free_r+0x74>
 8008276:	230c      	movs	r3, #12
 8008278:	602b      	str	r3, [r5, #0]
 800827a:	e7d6      	b.n	800822a <_free_r+0x22>
 800827c:	6820      	ldr	r0, [r4, #0]
 800827e:	1821      	adds	r1, r4, r0
 8008280:	428b      	cmp	r3, r1
 8008282:	bf01      	itttt	eq
 8008284:	6819      	ldreq	r1, [r3, #0]
 8008286:	685b      	ldreq	r3, [r3, #4]
 8008288:	1809      	addeq	r1, r1, r0
 800828a:	6021      	streq	r1, [r4, #0]
 800828c:	6063      	str	r3, [r4, #4]
 800828e:	6054      	str	r4, [r2, #4]
 8008290:	e7cb      	b.n	800822a <_free_r+0x22>
 8008292:	bd38      	pop	{r3, r4, r5, pc}
 8008294:	20000664 	.word	0x20000664

08008298 <malloc>:
 8008298:	4b02      	ldr	r3, [pc, #8]	@ (80082a4 <malloc+0xc>)
 800829a:	4601      	mov	r1, r0
 800829c:	6818      	ldr	r0, [r3, #0]
 800829e:	f000 b825 	b.w	80082ec <_malloc_r>
 80082a2:	bf00      	nop
 80082a4:	2000001c 	.word	0x2000001c

080082a8 <sbrk_aligned>:
 80082a8:	b570      	push	{r4, r5, r6, lr}
 80082aa:	4e0f      	ldr	r6, [pc, #60]	@ (80082e8 <sbrk_aligned+0x40>)
 80082ac:	460c      	mov	r4, r1
 80082ae:	6831      	ldr	r1, [r6, #0]
 80082b0:	4605      	mov	r5, r0
 80082b2:	b911      	cbnz	r1, 80082ba <sbrk_aligned+0x12>
 80082b4:	f000 fe40 	bl	8008f38 <_sbrk_r>
 80082b8:	6030      	str	r0, [r6, #0]
 80082ba:	4621      	mov	r1, r4
 80082bc:	4628      	mov	r0, r5
 80082be:	f000 fe3b 	bl	8008f38 <_sbrk_r>
 80082c2:	1c43      	adds	r3, r0, #1
 80082c4:	d103      	bne.n	80082ce <sbrk_aligned+0x26>
 80082c6:	f04f 34ff 	mov.w	r4, #4294967295
 80082ca:	4620      	mov	r0, r4
 80082cc:	bd70      	pop	{r4, r5, r6, pc}
 80082ce:	1cc4      	adds	r4, r0, #3
 80082d0:	f024 0403 	bic.w	r4, r4, #3
 80082d4:	42a0      	cmp	r0, r4
 80082d6:	d0f8      	beq.n	80082ca <sbrk_aligned+0x22>
 80082d8:	1a21      	subs	r1, r4, r0
 80082da:	4628      	mov	r0, r5
 80082dc:	f000 fe2c 	bl	8008f38 <_sbrk_r>
 80082e0:	3001      	adds	r0, #1
 80082e2:	d1f2      	bne.n	80082ca <sbrk_aligned+0x22>
 80082e4:	e7ef      	b.n	80082c6 <sbrk_aligned+0x1e>
 80082e6:	bf00      	nop
 80082e8:	20000660 	.word	0x20000660

080082ec <_malloc_r>:
 80082ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082f0:	1ccd      	adds	r5, r1, #3
 80082f2:	f025 0503 	bic.w	r5, r5, #3
 80082f6:	3508      	adds	r5, #8
 80082f8:	2d0c      	cmp	r5, #12
 80082fa:	bf38      	it	cc
 80082fc:	250c      	movcc	r5, #12
 80082fe:	2d00      	cmp	r5, #0
 8008300:	4606      	mov	r6, r0
 8008302:	db01      	blt.n	8008308 <_malloc_r+0x1c>
 8008304:	42a9      	cmp	r1, r5
 8008306:	d904      	bls.n	8008312 <_malloc_r+0x26>
 8008308:	230c      	movs	r3, #12
 800830a:	6033      	str	r3, [r6, #0]
 800830c:	2000      	movs	r0, #0
 800830e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008312:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80083e8 <_malloc_r+0xfc>
 8008316:	f000 f869 	bl	80083ec <__malloc_lock>
 800831a:	f8d8 3000 	ldr.w	r3, [r8]
 800831e:	461c      	mov	r4, r3
 8008320:	bb44      	cbnz	r4, 8008374 <_malloc_r+0x88>
 8008322:	4629      	mov	r1, r5
 8008324:	4630      	mov	r0, r6
 8008326:	f7ff ffbf 	bl	80082a8 <sbrk_aligned>
 800832a:	1c43      	adds	r3, r0, #1
 800832c:	4604      	mov	r4, r0
 800832e:	d158      	bne.n	80083e2 <_malloc_r+0xf6>
 8008330:	f8d8 4000 	ldr.w	r4, [r8]
 8008334:	4627      	mov	r7, r4
 8008336:	2f00      	cmp	r7, #0
 8008338:	d143      	bne.n	80083c2 <_malloc_r+0xd6>
 800833a:	2c00      	cmp	r4, #0
 800833c:	d04b      	beq.n	80083d6 <_malloc_r+0xea>
 800833e:	6823      	ldr	r3, [r4, #0]
 8008340:	4639      	mov	r1, r7
 8008342:	4630      	mov	r0, r6
 8008344:	eb04 0903 	add.w	r9, r4, r3
 8008348:	f000 fdf6 	bl	8008f38 <_sbrk_r>
 800834c:	4581      	cmp	r9, r0
 800834e:	d142      	bne.n	80083d6 <_malloc_r+0xea>
 8008350:	6821      	ldr	r1, [r4, #0]
 8008352:	4630      	mov	r0, r6
 8008354:	1a6d      	subs	r5, r5, r1
 8008356:	4629      	mov	r1, r5
 8008358:	f7ff ffa6 	bl	80082a8 <sbrk_aligned>
 800835c:	3001      	adds	r0, #1
 800835e:	d03a      	beq.n	80083d6 <_malloc_r+0xea>
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	442b      	add	r3, r5
 8008364:	6023      	str	r3, [r4, #0]
 8008366:	f8d8 3000 	ldr.w	r3, [r8]
 800836a:	685a      	ldr	r2, [r3, #4]
 800836c:	bb62      	cbnz	r2, 80083c8 <_malloc_r+0xdc>
 800836e:	f8c8 7000 	str.w	r7, [r8]
 8008372:	e00f      	b.n	8008394 <_malloc_r+0xa8>
 8008374:	6822      	ldr	r2, [r4, #0]
 8008376:	1b52      	subs	r2, r2, r5
 8008378:	d420      	bmi.n	80083bc <_malloc_r+0xd0>
 800837a:	2a0b      	cmp	r2, #11
 800837c:	d917      	bls.n	80083ae <_malloc_r+0xc2>
 800837e:	1961      	adds	r1, r4, r5
 8008380:	42a3      	cmp	r3, r4
 8008382:	6025      	str	r5, [r4, #0]
 8008384:	bf18      	it	ne
 8008386:	6059      	strne	r1, [r3, #4]
 8008388:	6863      	ldr	r3, [r4, #4]
 800838a:	bf08      	it	eq
 800838c:	f8c8 1000 	streq.w	r1, [r8]
 8008390:	5162      	str	r2, [r4, r5]
 8008392:	604b      	str	r3, [r1, #4]
 8008394:	4630      	mov	r0, r6
 8008396:	f000 f82f 	bl	80083f8 <__malloc_unlock>
 800839a:	f104 000b 	add.w	r0, r4, #11
 800839e:	1d23      	adds	r3, r4, #4
 80083a0:	f020 0007 	bic.w	r0, r0, #7
 80083a4:	1ac2      	subs	r2, r0, r3
 80083a6:	bf1c      	itt	ne
 80083a8:	1a1b      	subne	r3, r3, r0
 80083aa:	50a3      	strne	r3, [r4, r2]
 80083ac:	e7af      	b.n	800830e <_malloc_r+0x22>
 80083ae:	6862      	ldr	r2, [r4, #4]
 80083b0:	42a3      	cmp	r3, r4
 80083b2:	bf0c      	ite	eq
 80083b4:	f8c8 2000 	streq.w	r2, [r8]
 80083b8:	605a      	strne	r2, [r3, #4]
 80083ba:	e7eb      	b.n	8008394 <_malloc_r+0xa8>
 80083bc:	4623      	mov	r3, r4
 80083be:	6864      	ldr	r4, [r4, #4]
 80083c0:	e7ae      	b.n	8008320 <_malloc_r+0x34>
 80083c2:	463c      	mov	r4, r7
 80083c4:	687f      	ldr	r7, [r7, #4]
 80083c6:	e7b6      	b.n	8008336 <_malloc_r+0x4a>
 80083c8:	461a      	mov	r2, r3
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	42a3      	cmp	r3, r4
 80083ce:	d1fb      	bne.n	80083c8 <_malloc_r+0xdc>
 80083d0:	2300      	movs	r3, #0
 80083d2:	6053      	str	r3, [r2, #4]
 80083d4:	e7de      	b.n	8008394 <_malloc_r+0xa8>
 80083d6:	230c      	movs	r3, #12
 80083d8:	4630      	mov	r0, r6
 80083da:	6033      	str	r3, [r6, #0]
 80083dc:	f000 f80c 	bl	80083f8 <__malloc_unlock>
 80083e0:	e794      	b.n	800830c <_malloc_r+0x20>
 80083e2:	6005      	str	r5, [r0, #0]
 80083e4:	e7d6      	b.n	8008394 <_malloc_r+0xa8>
 80083e6:	bf00      	nop
 80083e8:	20000664 	.word	0x20000664

080083ec <__malloc_lock>:
 80083ec:	4801      	ldr	r0, [pc, #4]	@ (80083f4 <__malloc_lock+0x8>)
 80083ee:	f7ff b8aa 	b.w	8007546 <__retarget_lock_acquire_recursive>
 80083f2:	bf00      	nop
 80083f4:	2000065c 	.word	0x2000065c

080083f8 <__malloc_unlock>:
 80083f8:	4801      	ldr	r0, [pc, #4]	@ (8008400 <__malloc_unlock+0x8>)
 80083fa:	f7ff b8a5 	b.w	8007548 <__retarget_lock_release_recursive>
 80083fe:	bf00      	nop
 8008400:	2000065c 	.word	0x2000065c

08008404 <_Balloc>:
 8008404:	b570      	push	{r4, r5, r6, lr}
 8008406:	69c6      	ldr	r6, [r0, #28]
 8008408:	4604      	mov	r4, r0
 800840a:	460d      	mov	r5, r1
 800840c:	b976      	cbnz	r6, 800842c <_Balloc+0x28>
 800840e:	2010      	movs	r0, #16
 8008410:	f7ff ff42 	bl	8008298 <malloc>
 8008414:	4602      	mov	r2, r0
 8008416:	61e0      	str	r0, [r4, #28]
 8008418:	b920      	cbnz	r0, 8008424 <_Balloc+0x20>
 800841a:	216b      	movs	r1, #107	@ 0x6b
 800841c:	4b17      	ldr	r3, [pc, #92]	@ (800847c <_Balloc+0x78>)
 800841e:	4818      	ldr	r0, [pc, #96]	@ (8008480 <_Balloc+0x7c>)
 8008420:	f000 fda8 	bl	8008f74 <__assert_func>
 8008424:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008428:	6006      	str	r6, [r0, #0]
 800842a:	60c6      	str	r6, [r0, #12]
 800842c:	69e6      	ldr	r6, [r4, #28]
 800842e:	68f3      	ldr	r3, [r6, #12]
 8008430:	b183      	cbz	r3, 8008454 <_Balloc+0x50>
 8008432:	69e3      	ldr	r3, [r4, #28]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800843a:	b9b8      	cbnz	r0, 800846c <_Balloc+0x68>
 800843c:	2101      	movs	r1, #1
 800843e:	fa01 f605 	lsl.w	r6, r1, r5
 8008442:	1d72      	adds	r2, r6, #5
 8008444:	4620      	mov	r0, r4
 8008446:	0092      	lsls	r2, r2, #2
 8008448:	f000 fdb2 	bl	8008fb0 <_calloc_r>
 800844c:	b160      	cbz	r0, 8008468 <_Balloc+0x64>
 800844e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008452:	e00e      	b.n	8008472 <_Balloc+0x6e>
 8008454:	2221      	movs	r2, #33	@ 0x21
 8008456:	2104      	movs	r1, #4
 8008458:	4620      	mov	r0, r4
 800845a:	f000 fda9 	bl	8008fb0 <_calloc_r>
 800845e:	69e3      	ldr	r3, [r4, #28]
 8008460:	60f0      	str	r0, [r6, #12]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1e4      	bne.n	8008432 <_Balloc+0x2e>
 8008468:	2000      	movs	r0, #0
 800846a:	bd70      	pop	{r4, r5, r6, pc}
 800846c:	6802      	ldr	r2, [r0, #0]
 800846e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008472:	2300      	movs	r3, #0
 8008474:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008478:	e7f7      	b.n	800846a <_Balloc+0x66>
 800847a:	bf00      	nop
 800847c:	080096b5 	.word	0x080096b5
 8008480:	08009735 	.word	0x08009735

08008484 <_Bfree>:
 8008484:	b570      	push	{r4, r5, r6, lr}
 8008486:	69c6      	ldr	r6, [r0, #28]
 8008488:	4605      	mov	r5, r0
 800848a:	460c      	mov	r4, r1
 800848c:	b976      	cbnz	r6, 80084ac <_Bfree+0x28>
 800848e:	2010      	movs	r0, #16
 8008490:	f7ff ff02 	bl	8008298 <malloc>
 8008494:	4602      	mov	r2, r0
 8008496:	61e8      	str	r0, [r5, #28]
 8008498:	b920      	cbnz	r0, 80084a4 <_Bfree+0x20>
 800849a:	218f      	movs	r1, #143	@ 0x8f
 800849c:	4b08      	ldr	r3, [pc, #32]	@ (80084c0 <_Bfree+0x3c>)
 800849e:	4809      	ldr	r0, [pc, #36]	@ (80084c4 <_Bfree+0x40>)
 80084a0:	f000 fd68 	bl	8008f74 <__assert_func>
 80084a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084a8:	6006      	str	r6, [r0, #0]
 80084aa:	60c6      	str	r6, [r0, #12]
 80084ac:	b13c      	cbz	r4, 80084be <_Bfree+0x3a>
 80084ae:	69eb      	ldr	r3, [r5, #28]
 80084b0:	6862      	ldr	r2, [r4, #4]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084b8:	6021      	str	r1, [r4, #0]
 80084ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80084be:	bd70      	pop	{r4, r5, r6, pc}
 80084c0:	080096b5 	.word	0x080096b5
 80084c4:	08009735 	.word	0x08009735

080084c8 <__multadd>:
 80084c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084cc:	4607      	mov	r7, r0
 80084ce:	460c      	mov	r4, r1
 80084d0:	461e      	mov	r6, r3
 80084d2:	2000      	movs	r0, #0
 80084d4:	690d      	ldr	r5, [r1, #16]
 80084d6:	f101 0c14 	add.w	ip, r1, #20
 80084da:	f8dc 3000 	ldr.w	r3, [ip]
 80084de:	3001      	adds	r0, #1
 80084e0:	b299      	uxth	r1, r3
 80084e2:	fb02 6101 	mla	r1, r2, r1, r6
 80084e6:	0c1e      	lsrs	r6, r3, #16
 80084e8:	0c0b      	lsrs	r3, r1, #16
 80084ea:	fb02 3306 	mla	r3, r2, r6, r3
 80084ee:	b289      	uxth	r1, r1
 80084f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80084f4:	4285      	cmp	r5, r0
 80084f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80084fa:	f84c 1b04 	str.w	r1, [ip], #4
 80084fe:	dcec      	bgt.n	80084da <__multadd+0x12>
 8008500:	b30e      	cbz	r6, 8008546 <__multadd+0x7e>
 8008502:	68a3      	ldr	r3, [r4, #8]
 8008504:	42ab      	cmp	r3, r5
 8008506:	dc19      	bgt.n	800853c <__multadd+0x74>
 8008508:	6861      	ldr	r1, [r4, #4]
 800850a:	4638      	mov	r0, r7
 800850c:	3101      	adds	r1, #1
 800850e:	f7ff ff79 	bl	8008404 <_Balloc>
 8008512:	4680      	mov	r8, r0
 8008514:	b928      	cbnz	r0, 8008522 <__multadd+0x5a>
 8008516:	4602      	mov	r2, r0
 8008518:	21ba      	movs	r1, #186	@ 0xba
 800851a:	4b0c      	ldr	r3, [pc, #48]	@ (800854c <__multadd+0x84>)
 800851c:	480c      	ldr	r0, [pc, #48]	@ (8008550 <__multadd+0x88>)
 800851e:	f000 fd29 	bl	8008f74 <__assert_func>
 8008522:	6922      	ldr	r2, [r4, #16]
 8008524:	f104 010c 	add.w	r1, r4, #12
 8008528:	3202      	adds	r2, #2
 800852a:	0092      	lsls	r2, r2, #2
 800852c:	300c      	adds	r0, #12
 800852e:	f000 fd13 	bl	8008f58 <memcpy>
 8008532:	4621      	mov	r1, r4
 8008534:	4638      	mov	r0, r7
 8008536:	f7ff ffa5 	bl	8008484 <_Bfree>
 800853a:	4644      	mov	r4, r8
 800853c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008540:	3501      	adds	r5, #1
 8008542:	615e      	str	r6, [r3, #20]
 8008544:	6125      	str	r5, [r4, #16]
 8008546:	4620      	mov	r0, r4
 8008548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800854c:	08009724 	.word	0x08009724
 8008550:	08009735 	.word	0x08009735

08008554 <__hi0bits>:
 8008554:	4603      	mov	r3, r0
 8008556:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800855a:	bf3a      	itte	cc
 800855c:	0403      	lslcc	r3, r0, #16
 800855e:	2010      	movcc	r0, #16
 8008560:	2000      	movcs	r0, #0
 8008562:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008566:	bf3c      	itt	cc
 8008568:	021b      	lslcc	r3, r3, #8
 800856a:	3008      	addcc	r0, #8
 800856c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008570:	bf3c      	itt	cc
 8008572:	011b      	lslcc	r3, r3, #4
 8008574:	3004      	addcc	r0, #4
 8008576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800857a:	bf3c      	itt	cc
 800857c:	009b      	lslcc	r3, r3, #2
 800857e:	3002      	addcc	r0, #2
 8008580:	2b00      	cmp	r3, #0
 8008582:	db05      	blt.n	8008590 <__hi0bits+0x3c>
 8008584:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008588:	f100 0001 	add.w	r0, r0, #1
 800858c:	bf08      	it	eq
 800858e:	2020      	moveq	r0, #32
 8008590:	4770      	bx	lr

08008592 <__lo0bits>:
 8008592:	6803      	ldr	r3, [r0, #0]
 8008594:	4602      	mov	r2, r0
 8008596:	f013 0007 	ands.w	r0, r3, #7
 800859a:	d00b      	beq.n	80085b4 <__lo0bits+0x22>
 800859c:	07d9      	lsls	r1, r3, #31
 800859e:	d421      	bmi.n	80085e4 <__lo0bits+0x52>
 80085a0:	0798      	lsls	r0, r3, #30
 80085a2:	bf49      	itett	mi
 80085a4:	085b      	lsrmi	r3, r3, #1
 80085a6:	089b      	lsrpl	r3, r3, #2
 80085a8:	2001      	movmi	r0, #1
 80085aa:	6013      	strmi	r3, [r2, #0]
 80085ac:	bf5c      	itt	pl
 80085ae:	2002      	movpl	r0, #2
 80085b0:	6013      	strpl	r3, [r2, #0]
 80085b2:	4770      	bx	lr
 80085b4:	b299      	uxth	r1, r3
 80085b6:	b909      	cbnz	r1, 80085bc <__lo0bits+0x2a>
 80085b8:	2010      	movs	r0, #16
 80085ba:	0c1b      	lsrs	r3, r3, #16
 80085bc:	b2d9      	uxtb	r1, r3
 80085be:	b909      	cbnz	r1, 80085c4 <__lo0bits+0x32>
 80085c0:	3008      	adds	r0, #8
 80085c2:	0a1b      	lsrs	r3, r3, #8
 80085c4:	0719      	lsls	r1, r3, #28
 80085c6:	bf04      	itt	eq
 80085c8:	091b      	lsreq	r3, r3, #4
 80085ca:	3004      	addeq	r0, #4
 80085cc:	0799      	lsls	r1, r3, #30
 80085ce:	bf04      	itt	eq
 80085d0:	089b      	lsreq	r3, r3, #2
 80085d2:	3002      	addeq	r0, #2
 80085d4:	07d9      	lsls	r1, r3, #31
 80085d6:	d403      	bmi.n	80085e0 <__lo0bits+0x4e>
 80085d8:	085b      	lsrs	r3, r3, #1
 80085da:	f100 0001 	add.w	r0, r0, #1
 80085de:	d003      	beq.n	80085e8 <__lo0bits+0x56>
 80085e0:	6013      	str	r3, [r2, #0]
 80085e2:	4770      	bx	lr
 80085e4:	2000      	movs	r0, #0
 80085e6:	4770      	bx	lr
 80085e8:	2020      	movs	r0, #32
 80085ea:	4770      	bx	lr

080085ec <__i2b>:
 80085ec:	b510      	push	{r4, lr}
 80085ee:	460c      	mov	r4, r1
 80085f0:	2101      	movs	r1, #1
 80085f2:	f7ff ff07 	bl	8008404 <_Balloc>
 80085f6:	4602      	mov	r2, r0
 80085f8:	b928      	cbnz	r0, 8008606 <__i2b+0x1a>
 80085fa:	f240 1145 	movw	r1, #325	@ 0x145
 80085fe:	4b04      	ldr	r3, [pc, #16]	@ (8008610 <__i2b+0x24>)
 8008600:	4804      	ldr	r0, [pc, #16]	@ (8008614 <__i2b+0x28>)
 8008602:	f000 fcb7 	bl	8008f74 <__assert_func>
 8008606:	2301      	movs	r3, #1
 8008608:	6144      	str	r4, [r0, #20]
 800860a:	6103      	str	r3, [r0, #16]
 800860c:	bd10      	pop	{r4, pc}
 800860e:	bf00      	nop
 8008610:	08009724 	.word	0x08009724
 8008614:	08009735 	.word	0x08009735

08008618 <__multiply>:
 8008618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800861c:	4614      	mov	r4, r2
 800861e:	690a      	ldr	r2, [r1, #16]
 8008620:	6923      	ldr	r3, [r4, #16]
 8008622:	460f      	mov	r7, r1
 8008624:	429a      	cmp	r2, r3
 8008626:	bfa2      	ittt	ge
 8008628:	4623      	movge	r3, r4
 800862a:	460c      	movge	r4, r1
 800862c:	461f      	movge	r7, r3
 800862e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008632:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008636:	68a3      	ldr	r3, [r4, #8]
 8008638:	6861      	ldr	r1, [r4, #4]
 800863a:	eb0a 0609 	add.w	r6, sl, r9
 800863e:	42b3      	cmp	r3, r6
 8008640:	b085      	sub	sp, #20
 8008642:	bfb8      	it	lt
 8008644:	3101      	addlt	r1, #1
 8008646:	f7ff fedd 	bl	8008404 <_Balloc>
 800864a:	b930      	cbnz	r0, 800865a <__multiply+0x42>
 800864c:	4602      	mov	r2, r0
 800864e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008652:	4b43      	ldr	r3, [pc, #268]	@ (8008760 <__multiply+0x148>)
 8008654:	4843      	ldr	r0, [pc, #268]	@ (8008764 <__multiply+0x14c>)
 8008656:	f000 fc8d 	bl	8008f74 <__assert_func>
 800865a:	f100 0514 	add.w	r5, r0, #20
 800865e:	462b      	mov	r3, r5
 8008660:	2200      	movs	r2, #0
 8008662:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008666:	4543      	cmp	r3, r8
 8008668:	d321      	bcc.n	80086ae <__multiply+0x96>
 800866a:	f107 0114 	add.w	r1, r7, #20
 800866e:	f104 0214 	add.w	r2, r4, #20
 8008672:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008676:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800867a:	9302      	str	r3, [sp, #8]
 800867c:	1b13      	subs	r3, r2, r4
 800867e:	3b15      	subs	r3, #21
 8008680:	f023 0303 	bic.w	r3, r3, #3
 8008684:	3304      	adds	r3, #4
 8008686:	f104 0715 	add.w	r7, r4, #21
 800868a:	42ba      	cmp	r2, r7
 800868c:	bf38      	it	cc
 800868e:	2304      	movcc	r3, #4
 8008690:	9301      	str	r3, [sp, #4]
 8008692:	9b02      	ldr	r3, [sp, #8]
 8008694:	9103      	str	r1, [sp, #12]
 8008696:	428b      	cmp	r3, r1
 8008698:	d80c      	bhi.n	80086b4 <__multiply+0x9c>
 800869a:	2e00      	cmp	r6, #0
 800869c:	dd03      	ble.n	80086a6 <__multiply+0x8e>
 800869e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d05a      	beq.n	800875c <__multiply+0x144>
 80086a6:	6106      	str	r6, [r0, #16]
 80086a8:	b005      	add	sp, #20
 80086aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ae:	f843 2b04 	str.w	r2, [r3], #4
 80086b2:	e7d8      	b.n	8008666 <__multiply+0x4e>
 80086b4:	f8b1 a000 	ldrh.w	sl, [r1]
 80086b8:	f1ba 0f00 	cmp.w	sl, #0
 80086bc:	d023      	beq.n	8008706 <__multiply+0xee>
 80086be:	46a9      	mov	r9, r5
 80086c0:	f04f 0c00 	mov.w	ip, #0
 80086c4:	f104 0e14 	add.w	lr, r4, #20
 80086c8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80086cc:	f8d9 3000 	ldr.w	r3, [r9]
 80086d0:	fa1f fb87 	uxth.w	fp, r7
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	fb0a 330b 	mla	r3, sl, fp, r3
 80086da:	4463      	add	r3, ip
 80086dc:	f8d9 c000 	ldr.w	ip, [r9]
 80086e0:	0c3f      	lsrs	r7, r7, #16
 80086e2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80086e6:	fb0a c707 	mla	r7, sl, r7, ip
 80086ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80086f4:	4572      	cmp	r2, lr
 80086f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80086fa:	f849 3b04 	str.w	r3, [r9], #4
 80086fe:	d8e3      	bhi.n	80086c8 <__multiply+0xb0>
 8008700:	9b01      	ldr	r3, [sp, #4]
 8008702:	f845 c003 	str.w	ip, [r5, r3]
 8008706:	9b03      	ldr	r3, [sp, #12]
 8008708:	3104      	adds	r1, #4
 800870a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800870e:	f1b9 0f00 	cmp.w	r9, #0
 8008712:	d021      	beq.n	8008758 <__multiply+0x140>
 8008714:	46ae      	mov	lr, r5
 8008716:	f04f 0a00 	mov.w	sl, #0
 800871a:	682b      	ldr	r3, [r5, #0]
 800871c:	f104 0c14 	add.w	ip, r4, #20
 8008720:	f8bc b000 	ldrh.w	fp, [ip]
 8008724:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008728:	b29b      	uxth	r3, r3
 800872a:	fb09 770b 	mla	r7, r9, fp, r7
 800872e:	4457      	add	r7, sl
 8008730:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008734:	f84e 3b04 	str.w	r3, [lr], #4
 8008738:	f85c 3b04 	ldr.w	r3, [ip], #4
 800873c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008740:	f8be 3000 	ldrh.w	r3, [lr]
 8008744:	4562      	cmp	r2, ip
 8008746:	fb09 330a 	mla	r3, r9, sl, r3
 800874a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800874e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008752:	d8e5      	bhi.n	8008720 <__multiply+0x108>
 8008754:	9f01      	ldr	r7, [sp, #4]
 8008756:	51eb      	str	r3, [r5, r7]
 8008758:	3504      	adds	r5, #4
 800875a:	e79a      	b.n	8008692 <__multiply+0x7a>
 800875c:	3e01      	subs	r6, #1
 800875e:	e79c      	b.n	800869a <__multiply+0x82>
 8008760:	08009724 	.word	0x08009724
 8008764:	08009735 	.word	0x08009735

08008768 <__pow5mult>:
 8008768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800876c:	4615      	mov	r5, r2
 800876e:	f012 0203 	ands.w	r2, r2, #3
 8008772:	4607      	mov	r7, r0
 8008774:	460e      	mov	r6, r1
 8008776:	d007      	beq.n	8008788 <__pow5mult+0x20>
 8008778:	4c25      	ldr	r4, [pc, #148]	@ (8008810 <__pow5mult+0xa8>)
 800877a:	3a01      	subs	r2, #1
 800877c:	2300      	movs	r3, #0
 800877e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008782:	f7ff fea1 	bl	80084c8 <__multadd>
 8008786:	4606      	mov	r6, r0
 8008788:	10ad      	asrs	r5, r5, #2
 800878a:	d03d      	beq.n	8008808 <__pow5mult+0xa0>
 800878c:	69fc      	ldr	r4, [r7, #28]
 800878e:	b97c      	cbnz	r4, 80087b0 <__pow5mult+0x48>
 8008790:	2010      	movs	r0, #16
 8008792:	f7ff fd81 	bl	8008298 <malloc>
 8008796:	4602      	mov	r2, r0
 8008798:	61f8      	str	r0, [r7, #28]
 800879a:	b928      	cbnz	r0, 80087a8 <__pow5mult+0x40>
 800879c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80087a0:	4b1c      	ldr	r3, [pc, #112]	@ (8008814 <__pow5mult+0xac>)
 80087a2:	481d      	ldr	r0, [pc, #116]	@ (8008818 <__pow5mult+0xb0>)
 80087a4:	f000 fbe6 	bl	8008f74 <__assert_func>
 80087a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087ac:	6004      	str	r4, [r0, #0]
 80087ae:	60c4      	str	r4, [r0, #12]
 80087b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80087b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80087b8:	b94c      	cbnz	r4, 80087ce <__pow5mult+0x66>
 80087ba:	f240 2171 	movw	r1, #625	@ 0x271
 80087be:	4638      	mov	r0, r7
 80087c0:	f7ff ff14 	bl	80085ec <__i2b>
 80087c4:	2300      	movs	r3, #0
 80087c6:	4604      	mov	r4, r0
 80087c8:	f8c8 0008 	str.w	r0, [r8, #8]
 80087cc:	6003      	str	r3, [r0, #0]
 80087ce:	f04f 0900 	mov.w	r9, #0
 80087d2:	07eb      	lsls	r3, r5, #31
 80087d4:	d50a      	bpl.n	80087ec <__pow5mult+0x84>
 80087d6:	4631      	mov	r1, r6
 80087d8:	4622      	mov	r2, r4
 80087da:	4638      	mov	r0, r7
 80087dc:	f7ff ff1c 	bl	8008618 <__multiply>
 80087e0:	4680      	mov	r8, r0
 80087e2:	4631      	mov	r1, r6
 80087e4:	4638      	mov	r0, r7
 80087e6:	f7ff fe4d 	bl	8008484 <_Bfree>
 80087ea:	4646      	mov	r6, r8
 80087ec:	106d      	asrs	r5, r5, #1
 80087ee:	d00b      	beq.n	8008808 <__pow5mult+0xa0>
 80087f0:	6820      	ldr	r0, [r4, #0]
 80087f2:	b938      	cbnz	r0, 8008804 <__pow5mult+0x9c>
 80087f4:	4622      	mov	r2, r4
 80087f6:	4621      	mov	r1, r4
 80087f8:	4638      	mov	r0, r7
 80087fa:	f7ff ff0d 	bl	8008618 <__multiply>
 80087fe:	6020      	str	r0, [r4, #0]
 8008800:	f8c0 9000 	str.w	r9, [r0]
 8008804:	4604      	mov	r4, r0
 8008806:	e7e4      	b.n	80087d2 <__pow5mult+0x6a>
 8008808:	4630      	mov	r0, r6
 800880a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800880e:	bf00      	nop
 8008810:	08009790 	.word	0x08009790
 8008814:	080096b5 	.word	0x080096b5
 8008818:	08009735 	.word	0x08009735

0800881c <__lshift>:
 800881c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008820:	460c      	mov	r4, r1
 8008822:	4607      	mov	r7, r0
 8008824:	4691      	mov	r9, r2
 8008826:	6923      	ldr	r3, [r4, #16]
 8008828:	6849      	ldr	r1, [r1, #4]
 800882a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800882e:	68a3      	ldr	r3, [r4, #8]
 8008830:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008834:	f108 0601 	add.w	r6, r8, #1
 8008838:	42b3      	cmp	r3, r6
 800883a:	db0b      	blt.n	8008854 <__lshift+0x38>
 800883c:	4638      	mov	r0, r7
 800883e:	f7ff fde1 	bl	8008404 <_Balloc>
 8008842:	4605      	mov	r5, r0
 8008844:	b948      	cbnz	r0, 800885a <__lshift+0x3e>
 8008846:	4602      	mov	r2, r0
 8008848:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800884c:	4b27      	ldr	r3, [pc, #156]	@ (80088ec <__lshift+0xd0>)
 800884e:	4828      	ldr	r0, [pc, #160]	@ (80088f0 <__lshift+0xd4>)
 8008850:	f000 fb90 	bl	8008f74 <__assert_func>
 8008854:	3101      	adds	r1, #1
 8008856:	005b      	lsls	r3, r3, #1
 8008858:	e7ee      	b.n	8008838 <__lshift+0x1c>
 800885a:	2300      	movs	r3, #0
 800885c:	f100 0114 	add.w	r1, r0, #20
 8008860:	f100 0210 	add.w	r2, r0, #16
 8008864:	4618      	mov	r0, r3
 8008866:	4553      	cmp	r3, sl
 8008868:	db33      	blt.n	80088d2 <__lshift+0xb6>
 800886a:	6920      	ldr	r0, [r4, #16]
 800886c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008870:	f104 0314 	add.w	r3, r4, #20
 8008874:	f019 091f 	ands.w	r9, r9, #31
 8008878:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800887c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008880:	d02b      	beq.n	80088da <__lshift+0xbe>
 8008882:	468a      	mov	sl, r1
 8008884:	2200      	movs	r2, #0
 8008886:	f1c9 0e20 	rsb	lr, r9, #32
 800888a:	6818      	ldr	r0, [r3, #0]
 800888c:	fa00 f009 	lsl.w	r0, r0, r9
 8008890:	4310      	orrs	r0, r2
 8008892:	f84a 0b04 	str.w	r0, [sl], #4
 8008896:	f853 2b04 	ldr.w	r2, [r3], #4
 800889a:	459c      	cmp	ip, r3
 800889c:	fa22 f20e 	lsr.w	r2, r2, lr
 80088a0:	d8f3      	bhi.n	800888a <__lshift+0x6e>
 80088a2:	ebac 0304 	sub.w	r3, ip, r4
 80088a6:	3b15      	subs	r3, #21
 80088a8:	f023 0303 	bic.w	r3, r3, #3
 80088ac:	3304      	adds	r3, #4
 80088ae:	f104 0015 	add.w	r0, r4, #21
 80088b2:	4584      	cmp	ip, r0
 80088b4:	bf38      	it	cc
 80088b6:	2304      	movcc	r3, #4
 80088b8:	50ca      	str	r2, [r1, r3]
 80088ba:	b10a      	cbz	r2, 80088c0 <__lshift+0xa4>
 80088bc:	f108 0602 	add.w	r6, r8, #2
 80088c0:	3e01      	subs	r6, #1
 80088c2:	4638      	mov	r0, r7
 80088c4:	4621      	mov	r1, r4
 80088c6:	612e      	str	r6, [r5, #16]
 80088c8:	f7ff fddc 	bl	8008484 <_Bfree>
 80088cc:	4628      	mov	r0, r5
 80088ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80088d6:	3301      	adds	r3, #1
 80088d8:	e7c5      	b.n	8008866 <__lshift+0x4a>
 80088da:	3904      	subs	r1, #4
 80088dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80088e0:	459c      	cmp	ip, r3
 80088e2:	f841 2f04 	str.w	r2, [r1, #4]!
 80088e6:	d8f9      	bhi.n	80088dc <__lshift+0xc0>
 80088e8:	e7ea      	b.n	80088c0 <__lshift+0xa4>
 80088ea:	bf00      	nop
 80088ec:	08009724 	.word	0x08009724
 80088f0:	08009735 	.word	0x08009735

080088f4 <__mcmp>:
 80088f4:	4603      	mov	r3, r0
 80088f6:	690a      	ldr	r2, [r1, #16]
 80088f8:	6900      	ldr	r0, [r0, #16]
 80088fa:	b530      	push	{r4, r5, lr}
 80088fc:	1a80      	subs	r0, r0, r2
 80088fe:	d10e      	bne.n	800891e <__mcmp+0x2a>
 8008900:	3314      	adds	r3, #20
 8008902:	3114      	adds	r1, #20
 8008904:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008908:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800890c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008910:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008914:	4295      	cmp	r5, r2
 8008916:	d003      	beq.n	8008920 <__mcmp+0x2c>
 8008918:	d205      	bcs.n	8008926 <__mcmp+0x32>
 800891a:	f04f 30ff 	mov.w	r0, #4294967295
 800891e:	bd30      	pop	{r4, r5, pc}
 8008920:	42a3      	cmp	r3, r4
 8008922:	d3f3      	bcc.n	800890c <__mcmp+0x18>
 8008924:	e7fb      	b.n	800891e <__mcmp+0x2a>
 8008926:	2001      	movs	r0, #1
 8008928:	e7f9      	b.n	800891e <__mcmp+0x2a>
	...

0800892c <__mdiff>:
 800892c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008930:	4689      	mov	r9, r1
 8008932:	4606      	mov	r6, r0
 8008934:	4611      	mov	r1, r2
 8008936:	4648      	mov	r0, r9
 8008938:	4614      	mov	r4, r2
 800893a:	f7ff ffdb 	bl	80088f4 <__mcmp>
 800893e:	1e05      	subs	r5, r0, #0
 8008940:	d112      	bne.n	8008968 <__mdiff+0x3c>
 8008942:	4629      	mov	r1, r5
 8008944:	4630      	mov	r0, r6
 8008946:	f7ff fd5d 	bl	8008404 <_Balloc>
 800894a:	4602      	mov	r2, r0
 800894c:	b928      	cbnz	r0, 800895a <__mdiff+0x2e>
 800894e:	f240 2137 	movw	r1, #567	@ 0x237
 8008952:	4b3e      	ldr	r3, [pc, #248]	@ (8008a4c <__mdiff+0x120>)
 8008954:	483e      	ldr	r0, [pc, #248]	@ (8008a50 <__mdiff+0x124>)
 8008956:	f000 fb0d 	bl	8008f74 <__assert_func>
 800895a:	2301      	movs	r3, #1
 800895c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008960:	4610      	mov	r0, r2
 8008962:	b003      	add	sp, #12
 8008964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008968:	bfbc      	itt	lt
 800896a:	464b      	movlt	r3, r9
 800896c:	46a1      	movlt	r9, r4
 800896e:	4630      	mov	r0, r6
 8008970:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008974:	bfba      	itte	lt
 8008976:	461c      	movlt	r4, r3
 8008978:	2501      	movlt	r5, #1
 800897a:	2500      	movge	r5, #0
 800897c:	f7ff fd42 	bl	8008404 <_Balloc>
 8008980:	4602      	mov	r2, r0
 8008982:	b918      	cbnz	r0, 800898c <__mdiff+0x60>
 8008984:	f240 2145 	movw	r1, #581	@ 0x245
 8008988:	4b30      	ldr	r3, [pc, #192]	@ (8008a4c <__mdiff+0x120>)
 800898a:	e7e3      	b.n	8008954 <__mdiff+0x28>
 800898c:	f100 0b14 	add.w	fp, r0, #20
 8008990:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008994:	f109 0310 	add.w	r3, r9, #16
 8008998:	60c5      	str	r5, [r0, #12]
 800899a:	f04f 0c00 	mov.w	ip, #0
 800899e:	f109 0514 	add.w	r5, r9, #20
 80089a2:	46d9      	mov	r9, fp
 80089a4:	6926      	ldr	r6, [r4, #16]
 80089a6:	f104 0e14 	add.w	lr, r4, #20
 80089aa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80089ae:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80089b2:	9301      	str	r3, [sp, #4]
 80089b4:	9b01      	ldr	r3, [sp, #4]
 80089b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80089ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 80089be:	b281      	uxth	r1, r0
 80089c0:	9301      	str	r3, [sp, #4]
 80089c2:	fa1f f38a 	uxth.w	r3, sl
 80089c6:	1a5b      	subs	r3, r3, r1
 80089c8:	0c00      	lsrs	r0, r0, #16
 80089ca:	4463      	add	r3, ip
 80089cc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80089d0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80089da:	4576      	cmp	r6, lr
 80089dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80089e0:	f849 3b04 	str.w	r3, [r9], #4
 80089e4:	d8e6      	bhi.n	80089b4 <__mdiff+0x88>
 80089e6:	1b33      	subs	r3, r6, r4
 80089e8:	3b15      	subs	r3, #21
 80089ea:	f023 0303 	bic.w	r3, r3, #3
 80089ee:	3415      	adds	r4, #21
 80089f0:	3304      	adds	r3, #4
 80089f2:	42a6      	cmp	r6, r4
 80089f4:	bf38      	it	cc
 80089f6:	2304      	movcc	r3, #4
 80089f8:	441d      	add	r5, r3
 80089fa:	445b      	add	r3, fp
 80089fc:	461e      	mov	r6, r3
 80089fe:	462c      	mov	r4, r5
 8008a00:	4544      	cmp	r4, r8
 8008a02:	d30e      	bcc.n	8008a22 <__mdiff+0xf6>
 8008a04:	f108 0103 	add.w	r1, r8, #3
 8008a08:	1b49      	subs	r1, r1, r5
 8008a0a:	f021 0103 	bic.w	r1, r1, #3
 8008a0e:	3d03      	subs	r5, #3
 8008a10:	45a8      	cmp	r8, r5
 8008a12:	bf38      	it	cc
 8008a14:	2100      	movcc	r1, #0
 8008a16:	440b      	add	r3, r1
 8008a18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a1c:	b199      	cbz	r1, 8008a46 <__mdiff+0x11a>
 8008a1e:	6117      	str	r7, [r2, #16]
 8008a20:	e79e      	b.n	8008960 <__mdiff+0x34>
 8008a22:	46e6      	mov	lr, ip
 8008a24:	f854 1b04 	ldr.w	r1, [r4], #4
 8008a28:	fa1f fc81 	uxth.w	ip, r1
 8008a2c:	44f4      	add	ip, lr
 8008a2e:	0c08      	lsrs	r0, r1, #16
 8008a30:	4471      	add	r1, lr
 8008a32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008a36:	b289      	uxth	r1, r1
 8008a38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008a3c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a40:	f846 1b04 	str.w	r1, [r6], #4
 8008a44:	e7dc      	b.n	8008a00 <__mdiff+0xd4>
 8008a46:	3f01      	subs	r7, #1
 8008a48:	e7e6      	b.n	8008a18 <__mdiff+0xec>
 8008a4a:	bf00      	nop
 8008a4c:	08009724 	.word	0x08009724
 8008a50:	08009735 	.word	0x08009735

08008a54 <__d2b>:
 8008a54:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008a58:	2101      	movs	r1, #1
 8008a5a:	4690      	mov	r8, r2
 8008a5c:	4699      	mov	r9, r3
 8008a5e:	9e08      	ldr	r6, [sp, #32]
 8008a60:	f7ff fcd0 	bl	8008404 <_Balloc>
 8008a64:	4604      	mov	r4, r0
 8008a66:	b930      	cbnz	r0, 8008a76 <__d2b+0x22>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	f240 310f 	movw	r1, #783	@ 0x30f
 8008a6e:	4b23      	ldr	r3, [pc, #140]	@ (8008afc <__d2b+0xa8>)
 8008a70:	4823      	ldr	r0, [pc, #140]	@ (8008b00 <__d2b+0xac>)
 8008a72:	f000 fa7f 	bl	8008f74 <__assert_func>
 8008a76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008a7a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a7e:	b10d      	cbz	r5, 8008a84 <__d2b+0x30>
 8008a80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a84:	9301      	str	r3, [sp, #4]
 8008a86:	f1b8 0300 	subs.w	r3, r8, #0
 8008a8a:	d024      	beq.n	8008ad6 <__d2b+0x82>
 8008a8c:	4668      	mov	r0, sp
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	f7ff fd7f 	bl	8008592 <__lo0bits>
 8008a94:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008a98:	b1d8      	cbz	r0, 8008ad2 <__d2b+0x7e>
 8008a9a:	f1c0 0320 	rsb	r3, r0, #32
 8008a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa2:	430b      	orrs	r3, r1
 8008aa4:	40c2      	lsrs	r2, r0
 8008aa6:	6163      	str	r3, [r4, #20]
 8008aa8:	9201      	str	r2, [sp, #4]
 8008aaa:	9b01      	ldr	r3, [sp, #4]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	bf0c      	ite	eq
 8008ab0:	2201      	moveq	r2, #1
 8008ab2:	2202      	movne	r2, #2
 8008ab4:	61a3      	str	r3, [r4, #24]
 8008ab6:	6122      	str	r2, [r4, #16]
 8008ab8:	b1ad      	cbz	r5, 8008ae6 <__d2b+0x92>
 8008aba:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008abe:	4405      	add	r5, r0
 8008ac0:	6035      	str	r5, [r6, #0]
 8008ac2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ac8:	6018      	str	r0, [r3, #0]
 8008aca:	4620      	mov	r0, r4
 8008acc:	b002      	add	sp, #8
 8008ace:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008ad2:	6161      	str	r1, [r4, #20]
 8008ad4:	e7e9      	b.n	8008aaa <__d2b+0x56>
 8008ad6:	a801      	add	r0, sp, #4
 8008ad8:	f7ff fd5b 	bl	8008592 <__lo0bits>
 8008adc:	9b01      	ldr	r3, [sp, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	6163      	str	r3, [r4, #20]
 8008ae2:	3020      	adds	r0, #32
 8008ae4:	e7e7      	b.n	8008ab6 <__d2b+0x62>
 8008ae6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008aea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008aee:	6030      	str	r0, [r6, #0]
 8008af0:	6918      	ldr	r0, [r3, #16]
 8008af2:	f7ff fd2f 	bl	8008554 <__hi0bits>
 8008af6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008afa:	e7e4      	b.n	8008ac6 <__d2b+0x72>
 8008afc:	08009724 	.word	0x08009724
 8008b00:	08009735 	.word	0x08009735

08008b04 <__ssputs_r>:
 8008b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b08:	461f      	mov	r7, r3
 8008b0a:	688e      	ldr	r6, [r1, #8]
 8008b0c:	4682      	mov	sl, r0
 8008b0e:	42be      	cmp	r6, r7
 8008b10:	460c      	mov	r4, r1
 8008b12:	4690      	mov	r8, r2
 8008b14:	680b      	ldr	r3, [r1, #0]
 8008b16:	d82d      	bhi.n	8008b74 <__ssputs_r+0x70>
 8008b18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008b20:	d026      	beq.n	8008b70 <__ssputs_r+0x6c>
 8008b22:	6965      	ldr	r5, [r4, #20]
 8008b24:	6909      	ldr	r1, [r1, #16]
 8008b26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b2a:	eba3 0901 	sub.w	r9, r3, r1
 8008b2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b32:	1c7b      	adds	r3, r7, #1
 8008b34:	444b      	add	r3, r9
 8008b36:	106d      	asrs	r5, r5, #1
 8008b38:	429d      	cmp	r5, r3
 8008b3a:	bf38      	it	cc
 8008b3c:	461d      	movcc	r5, r3
 8008b3e:	0553      	lsls	r3, r2, #21
 8008b40:	d527      	bpl.n	8008b92 <__ssputs_r+0x8e>
 8008b42:	4629      	mov	r1, r5
 8008b44:	f7ff fbd2 	bl	80082ec <_malloc_r>
 8008b48:	4606      	mov	r6, r0
 8008b4a:	b360      	cbz	r0, 8008ba6 <__ssputs_r+0xa2>
 8008b4c:	464a      	mov	r2, r9
 8008b4e:	6921      	ldr	r1, [r4, #16]
 8008b50:	f000 fa02 	bl	8008f58 <memcpy>
 8008b54:	89a3      	ldrh	r3, [r4, #12]
 8008b56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008b5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b5e:	81a3      	strh	r3, [r4, #12]
 8008b60:	6126      	str	r6, [r4, #16]
 8008b62:	444e      	add	r6, r9
 8008b64:	6026      	str	r6, [r4, #0]
 8008b66:	463e      	mov	r6, r7
 8008b68:	6165      	str	r5, [r4, #20]
 8008b6a:	eba5 0509 	sub.w	r5, r5, r9
 8008b6e:	60a5      	str	r5, [r4, #8]
 8008b70:	42be      	cmp	r6, r7
 8008b72:	d900      	bls.n	8008b76 <__ssputs_r+0x72>
 8008b74:	463e      	mov	r6, r7
 8008b76:	4632      	mov	r2, r6
 8008b78:	4641      	mov	r1, r8
 8008b7a:	6820      	ldr	r0, [r4, #0]
 8008b7c:	f000 f9c2 	bl	8008f04 <memmove>
 8008b80:	2000      	movs	r0, #0
 8008b82:	68a3      	ldr	r3, [r4, #8]
 8008b84:	1b9b      	subs	r3, r3, r6
 8008b86:	60a3      	str	r3, [r4, #8]
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	4433      	add	r3, r6
 8008b8c:	6023      	str	r3, [r4, #0]
 8008b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b92:	462a      	mov	r2, r5
 8008b94:	f000 fa32 	bl	8008ffc <_realloc_r>
 8008b98:	4606      	mov	r6, r0
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	d1e0      	bne.n	8008b60 <__ssputs_r+0x5c>
 8008b9e:	4650      	mov	r0, sl
 8008ba0:	6921      	ldr	r1, [r4, #16]
 8008ba2:	f7ff fb31 	bl	8008208 <_free_r>
 8008ba6:	230c      	movs	r3, #12
 8008ba8:	f8ca 3000 	str.w	r3, [sl]
 8008bac:	89a3      	ldrh	r3, [r4, #12]
 8008bae:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bb6:	81a3      	strh	r3, [r4, #12]
 8008bb8:	e7e9      	b.n	8008b8e <__ssputs_r+0x8a>
	...

08008bbc <_svfiprintf_r>:
 8008bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc0:	4698      	mov	r8, r3
 8008bc2:	898b      	ldrh	r3, [r1, #12]
 8008bc4:	4607      	mov	r7, r0
 8008bc6:	061b      	lsls	r3, r3, #24
 8008bc8:	460d      	mov	r5, r1
 8008bca:	4614      	mov	r4, r2
 8008bcc:	b09d      	sub	sp, #116	@ 0x74
 8008bce:	d510      	bpl.n	8008bf2 <_svfiprintf_r+0x36>
 8008bd0:	690b      	ldr	r3, [r1, #16]
 8008bd2:	b973      	cbnz	r3, 8008bf2 <_svfiprintf_r+0x36>
 8008bd4:	2140      	movs	r1, #64	@ 0x40
 8008bd6:	f7ff fb89 	bl	80082ec <_malloc_r>
 8008bda:	6028      	str	r0, [r5, #0]
 8008bdc:	6128      	str	r0, [r5, #16]
 8008bde:	b930      	cbnz	r0, 8008bee <_svfiprintf_r+0x32>
 8008be0:	230c      	movs	r3, #12
 8008be2:	603b      	str	r3, [r7, #0]
 8008be4:	f04f 30ff 	mov.w	r0, #4294967295
 8008be8:	b01d      	add	sp, #116	@ 0x74
 8008bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bee:	2340      	movs	r3, #64	@ 0x40
 8008bf0:	616b      	str	r3, [r5, #20]
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bf6:	2320      	movs	r3, #32
 8008bf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008bfc:	2330      	movs	r3, #48	@ 0x30
 8008bfe:	f04f 0901 	mov.w	r9, #1
 8008c02:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c06:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008da0 <_svfiprintf_r+0x1e4>
 8008c0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c0e:	4623      	mov	r3, r4
 8008c10:	469a      	mov	sl, r3
 8008c12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c16:	b10a      	cbz	r2, 8008c1c <_svfiprintf_r+0x60>
 8008c18:	2a25      	cmp	r2, #37	@ 0x25
 8008c1a:	d1f9      	bne.n	8008c10 <_svfiprintf_r+0x54>
 8008c1c:	ebba 0b04 	subs.w	fp, sl, r4
 8008c20:	d00b      	beq.n	8008c3a <_svfiprintf_r+0x7e>
 8008c22:	465b      	mov	r3, fp
 8008c24:	4622      	mov	r2, r4
 8008c26:	4629      	mov	r1, r5
 8008c28:	4638      	mov	r0, r7
 8008c2a:	f7ff ff6b 	bl	8008b04 <__ssputs_r>
 8008c2e:	3001      	adds	r0, #1
 8008c30:	f000 80a7 	beq.w	8008d82 <_svfiprintf_r+0x1c6>
 8008c34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c36:	445a      	add	r2, fp
 8008c38:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c3a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f000 809f 	beq.w	8008d82 <_svfiprintf_r+0x1c6>
 8008c44:	2300      	movs	r3, #0
 8008c46:	f04f 32ff 	mov.w	r2, #4294967295
 8008c4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c4e:	f10a 0a01 	add.w	sl, sl, #1
 8008c52:	9304      	str	r3, [sp, #16]
 8008c54:	9307      	str	r3, [sp, #28]
 8008c56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c5c:	4654      	mov	r4, sl
 8008c5e:	2205      	movs	r2, #5
 8008c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c64:	484e      	ldr	r0, [pc, #312]	@ (8008da0 <_svfiprintf_r+0x1e4>)
 8008c66:	f7fe fc70 	bl	800754a <memchr>
 8008c6a:	9a04      	ldr	r2, [sp, #16]
 8008c6c:	b9d8      	cbnz	r0, 8008ca6 <_svfiprintf_r+0xea>
 8008c6e:	06d0      	lsls	r0, r2, #27
 8008c70:	bf44      	itt	mi
 8008c72:	2320      	movmi	r3, #32
 8008c74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c78:	0711      	lsls	r1, r2, #28
 8008c7a:	bf44      	itt	mi
 8008c7c:	232b      	movmi	r3, #43	@ 0x2b
 8008c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c82:	f89a 3000 	ldrb.w	r3, [sl]
 8008c86:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c88:	d015      	beq.n	8008cb6 <_svfiprintf_r+0xfa>
 8008c8a:	4654      	mov	r4, sl
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	f04f 0c0a 	mov.w	ip, #10
 8008c92:	9a07      	ldr	r2, [sp, #28]
 8008c94:	4621      	mov	r1, r4
 8008c96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c9a:	3b30      	subs	r3, #48	@ 0x30
 8008c9c:	2b09      	cmp	r3, #9
 8008c9e:	d94b      	bls.n	8008d38 <_svfiprintf_r+0x17c>
 8008ca0:	b1b0      	cbz	r0, 8008cd0 <_svfiprintf_r+0x114>
 8008ca2:	9207      	str	r2, [sp, #28]
 8008ca4:	e014      	b.n	8008cd0 <_svfiprintf_r+0x114>
 8008ca6:	eba0 0308 	sub.w	r3, r0, r8
 8008caa:	fa09 f303 	lsl.w	r3, r9, r3
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	46a2      	mov	sl, r4
 8008cb2:	9304      	str	r3, [sp, #16]
 8008cb4:	e7d2      	b.n	8008c5c <_svfiprintf_r+0xa0>
 8008cb6:	9b03      	ldr	r3, [sp, #12]
 8008cb8:	1d19      	adds	r1, r3, #4
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	9103      	str	r1, [sp, #12]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	bfbb      	ittet	lt
 8008cc2:	425b      	neglt	r3, r3
 8008cc4:	f042 0202 	orrlt.w	r2, r2, #2
 8008cc8:	9307      	strge	r3, [sp, #28]
 8008cca:	9307      	strlt	r3, [sp, #28]
 8008ccc:	bfb8      	it	lt
 8008cce:	9204      	strlt	r2, [sp, #16]
 8008cd0:	7823      	ldrb	r3, [r4, #0]
 8008cd2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008cd4:	d10a      	bne.n	8008cec <_svfiprintf_r+0x130>
 8008cd6:	7863      	ldrb	r3, [r4, #1]
 8008cd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cda:	d132      	bne.n	8008d42 <_svfiprintf_r+0x186>
 8008cdc:	9b03      	ldr	r3, [sp, #12]
 8008cde:	3402      	adds	r4, #2
 8008ce0:	1d1a      	adds	r2, r3, #4
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	9203      	str	r2, [sp, #12]
 8008ce6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008cea:	9305      	str	r3, [sp, #20]
 8008cec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008da4 <_svfiprintf_r+0x1e8>
 8008cf0:	2203      	movs	r2, #3
 8008cf2:	4650      	mov	r0, sl
 8008cf4:	7821      	ldrb	r1, [r4, #0]
 8008cf6:	f7fe fc28 	bl	800754a <memchr>
 8008cfa:	b138      	cbz	r0, 8008d0c <_svfiprintf_r+0x150>
 8008cfc:	2240      	movs	r2, #64	@ 0x40
 8008cfe:	9b04      	ldr	r3, [sp, #16]
 8008d00:	eba0 000a 	sub.w	r0, r0, sl
 8008d04:	4082      	lsls	r2, r0
 8008d06:	4313      	orrs	r3, r2
 8008d08:	3401      	adds	r4, #1
 8008d0a:	9304      	str	r3, [sp, #16]
 8008d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d10:	2206      	movs	r2, #6
 8008d12:	4825      	ldr	r0, [pc, #148]	@ (8008da8 <_svfiprintf_r+0x1ec>)
 8008d14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d18:	f7fe fc17 	bl	800754a <memchr>
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	d036      	beq.n	8008d8e <_svfiprintf_r+0x1d2>
 8008d20:	4b22      	ldr	r3, [pc, #136]	@ (8008dac <_svfiprintf_r+0x1f0>)
 8008d22:	bb1b      	cbnz	r3, 8008d6c <_svfiprintf_r+0x1b0>
 8008d24:	9b03      	ldr	r3, [sp, #12]
 8008d26:	3307      	adds	r3, #7
 8008d28:	f023 0307 	bic.w	r3, r3, #7
 8008d2c:	3308      	adds	r3, #8
 8008d2e:	9303      	str	r3, [sp, #12]
 8008d30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d32:	4433      	add	r3, r6
 8008d34:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d36:	e76a      	b.n	8008c0e <_svfiprintf_r+0x52>
 8008d38:	460c      	mov	r4, r1
 8008d3a:	2001      	movs	r0, #1
 8008d3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d40:	e7a8      	b.n	8008c94 <_svfiprintf_r+0xd8>
 8008d42:	2300      	movs	r3, #0
 8008d44:	f04f 0c0a 	mov.w	ip, #10
 8008d48:	4619      	mov	r1, r3
 8008d4a:	3401      	adds	r4, #1
 8008d4c:	9305      	str	r3, [sp, #20]
 8008d4e:	4620      	mov	r0, r4
 8008d50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d54:	3a30      	subs	r2, #48	@ 0x30
 8008d56:	2a09      	cmp	r2, #9
 8008d58:	d903      	bls.n	8008d62 <_svfiprintf_r+0x1a6>
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d0c6      	beq.n	8008cec <_svfiprintf_r+0x130>
 8008d5e:	9105      	str	r1, [sp, #20]
 8008d60:	e7c4      	b.n	8008cec <_svfiprintf_r+0x130>
 8008d62:	4604      	mov	r4, r0
 8008d64:	2301      	movs	r3, #1
 8008d66:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d6a:	e7f0      	b.n	8008d4e <_svfiprintf_r+0x192>
 8008d6c:	ab03      	add	r3, sp, #12
 8008d6e:	9300      	str	r3, [sp, #0]
 8008d70:	462a      	mov	r2, r5
 8008d72:	4638      	mov	r0, r7
 8008d74:	4b0e      	ldr	r3, [pc, #56]	@ (8008db0 <_svfiprintf_r+0x1f4>)
 8008d76:	a904      	add	r1, sp, #16
 8008d78:	f7fd fe84 	bl	8006a84 <_printf_float>
 8008d7c:	1c42      	adds	r2, r0, #1
 8008d7e:	4606      	mov	r6, r0
 8008d80:	d1d6      	bne.n	8008d30 <_svfiprintf_r+0x174>
 8008d82:	89ab      	ldrh	r3, [r5, #12]
 8008d84:	065b      	lsls	r3, r3, #25
 8008d86:	f53f af2d 	bmi.w	8008be4 <_svfiprintf_r+0x28>
 8008d8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d8c:	e72c      	b.n	8008be8 <_svfiprintf_r+0x2c>
 8008d8e:	ab03      	add	r3, sp, #12
 8008d90:	9300      	str	r3, [sp, #0]
 8008d92:	462a      	mov	r2, r5
 8008d94:	4638      	mov	r0, r7
 8008d96:	4b06      	ldr	r3, [pc, #24]	@ (8008db0 <_svfiprintf_r+0x1f4>)
 8008d98:	a904      	add	r1, sp, #16
 8008d9a:	f7fe f911 	bl	8006fc0 <_printf_i>
 8008d9e:	e7ed      	b.n	8008d7c <_svfiprintf_r+0x1c0>
 8008da0:	08009890 	.word	0x08009890
 8008da4:	08009896 	.word	0x08009896
 8008da8:	0800989a 	.word	0x0800989a
 8008dac:	08006a85 	.word	0x08006a85
 8008db0:	08008b05 	.word	0x08008b05

08008db4 <__sflush_r>:
 8008db4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dba:	0716      	lsls	r6, r2, #28
 8008dbc:	4605      	mov	r5, r0
 8008dbe:	460c      	mov	r4, r1
 8008dc0:	d454      	bmi.n	8008e6c <__sflush_r+0xb8>
 8008dc2:	684b      	ldr	r3, [r1, #4]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	dc02      	bgt.n	8008dce <__sflush_r+0x1a>
 8008dc8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	dd48      	ble.n	8008e60 <__sflush_r+0xac>
 8008dce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008dd0:	2e00      	cmp	r6, #0
 8008dd2:	d045      	beq.n	8008e60 <__sflush_r+0xac>
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008dda:	682f      	ldr	r7, [r5, #0]
 8008ddc:	6a21      	ldr	r1, [r4, #32]
 8008dde:	602b      	str	r3, [r5, #0]
 8008de0:	d030      	beq.n	8008e44 <__sflush_r+0x90>
 8008de2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008de4:	89a3      	ldrh	r3, [r4, #12]
 8008de6:	0759      	lsls	r1, r3, #29
 8008de8:	d505      	bpl.n	8008df6 <__sflush_r+0x42>
 8008dea:	6863      	ldr	r3, [r4, #4]
 8008dec:	1ad2      	subs	r2, r2, r3
 8008dee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008df0:	b10b      	cbz	r3, 8008df6 <__sflush_r+0x42>
 8008df2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008df4:	1ad2      	subs	r2, r2, r3
 8008df6:	2300      	movs	r3, #0
 8008df8:	4628      	mov	r0, r5
 8008dfa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008dfc:	6a21      	ldr	r1, [r4, #32]
 8008dfe:	47b0      	blx	r6
 8008e00:	1c43      	adds	r3, r0, #1
 8008e02:	89a3      	ldrh	r3, [r4, #12]
 8008e04:	d106      	bne.n	8008e14 <__sflush_r+0x60>
 8008e06:	6829      	ldr	r1, [r5, #0]
 8008e08:	291d      	cmp	r1, #29
 8008e0a:	d82b      	bhi.n	8008e64 <__sflush_r+0xb0>
 8008e0c:	4a28      	ldr	r2, [pc, #160]	@ (8008eb0 <__sflush_r+0xfc>)
 8008e0e:	410a      	asrs	r2, r1
 8008e10:	07d6      	lsls	r6, r2, #31
 8008e12:	d427      	bmi.n	8008e64 <__sflush_r+0xb0>
 8008e14:	2200      	movs	r2, #0
 8008e16:	6062      	str	r2, [r4, #4]
 8008e18:	6922      	ldr	r2, [r4, #16]
 8008e1a:	04d9      	lsls	r1, r3, #19
 8008e1c:	6022      	str	r2, [r4, #0]
 8008e1e:	d504      	bpl.n	8008e2a <__sflush_r+0x76>
 8008e20:	1c42      	adds	r2, r0, #1
 8008e22:	d101      	bne.n	8008e28 <__sflush_r+0x74>
 8008e24:	682b      	ldr	r3, [r5, #0]
 8008e26:	b903      	cbnz	r3, 8008e2a <__sflush_r+0x76>
 8008e28:	6560      	str	r0, [r4, #84]	@ 0x54
 8008e2a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e2c:	602f      	str	r7, [r5, #0]
 8008e2e:	b1b9      	cbz	r1, 8008e60 <__sflush_r+0xac>
 8008e30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e34:	4299      	cmp	r1, r3
 8008e36:	d002      	beq.n	8008e3e <__sflush_r+0x8a>
 8008e38:	4628      	mov	r0, r5
 8008e3a:	f7ff f9e5 	bl	8008208 <_free_r>
 8008e3e:	2300      	movs	r3, #0
 8008e40:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e42:	e00d      	b.n	8008e60 <__sflush_r+0xac>
 8008e44:	2301      	movs	r3, #1
 8008e46:	4628      	mov	r0, r5
 8008e48:	47b0      	blx	r6
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	1c50      	adds	r0, r2, #1
 8008e4e:	d1c9      	bne.n	8008de4 <__sflush_r+0x30>
 8008e50:	682b      	ldr	r3, [r5, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d0c6      	beq.n	8008de4 <__sflush_r+0x30>
 8008e56:	2b1d      	cmp	r3, #29
 8008e58:	d001      	beq.n	8008e5e <__sflush_r+0xaa>
 8008e5a:	2b16      	cmp	r3, #22
 8008e5c:	d11d      	bne.n	8008e9a <__sflush_r+0xe6>
 8008e5e:	602f      	str	r7, [r5, #0]
 8008e60:	2000      	movs	r0, #0
 8008e62:	e021      	b.n	8008ea8 <__sflush_r+0xf4>
 8008e64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e68:	b21b      	sxth	r3, r3
 8008e6a:	e01a      	b.n	8008ea2 <__sflush_r+0xee>
 8008e6c:	690f      	ldr	r7, [r1, #16]
 8008e6e:	2f00      	cmp	r7, #0
 8008e70:	d0f6      	beq.n	8008e60 <__sflush_r+0xac>
 8008e72:	0793      	lsls	r3, r2, #30
 8008e74:	bf18      	it	ne
 8008e76:	2300      	movne	r3, #0
 8008e78:	680e      	ldr	r6, [r1, #0]
 8008e7a:	bf08      	it	eq
 8008e7c:	694b      	ldreq	r3, [r1, #20]
 8008e7e:	1bf6      	subs	r6, r6, r7
 8008e80:	600f      	str	r7, [r1, #0]
 8008e82:	608b      	str	r3, [r1, #8]
 8008e84:	2e00      	cmp	r6, #0
 8008e86:	ddeb      	ble.n	8008e60 <__sflush_r+0xac>
 8008e88:	4633      	mov	r3, r6
 8008e8a:	463a      	mov	r2, r7
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	6a21      	ldr	r1, [r4, #32]
 8008e90:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008e94:	47e0      	blx	ip
 8008e96:	2800      	cmp	r0, #0
 8008e98:	dc07      	bgt.n	8008eaa <__sflush_r+0xf6>
 8008e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea6:	81a3      	strh	r3, [r4, #12]
 8008ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eaa:	4407      	add	r7, r0
 8008eac:	1a36      	subs	r6, r6, r0
 8008eae:	e7e9      	b.n	8008e84 <__sflush_r+0xd0>
 8008eb0:	dfbffffe 	.word	0xdfbffffe

08008eb4 <_fflush_r>:
 8008eb4:	b538      	push	{r3, r4, r5, lr}
 8008eb6:	690b      	ldr	r3, [r1, #16]
 8008eb8:	4605      	mov	r5, r0
 8008eba:	460c      	mov	r4, r1
 8008ebc:	b913      	cbnz	r3, 8008ec4 <_fflush_r+0x10>
 8008ebe:	2500      	movs	r5, #0
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	bd38      	pop	{r3, r4, r5, pc}
 8008ec4:	b118      	cbz	r0, 8008ece <_fflush_r+0x1a>
 8008ec6:	6a03      	ldr	r3, [r0, #32]
 8008ec8:	b90b      	cbnz	r3, 8008ece <_fflush_r+0x1a>
 8008eca:	f7fe fa25 	bl	8007318 <__sinit>
 8008ece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d0f3      	beq.n	8008ebe <_fflush_r+0xa>
 8008ed6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ed8:	07d0      	lsls	r0, r2, #31
 8008eda:	d404      	bmi.n	8008ee6 <_fflush_r+0x32>
 8008edc:	0599      	lsls	r1, r3, #22
 8008ede:	d402      	bmi.n	8008ee6 <_fflush_r+0x32>
 8008ee0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ee2:	f7fe fb30 	bl	8007546 <__retarget_lock_acquire_recursive>
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	4621      	mov	r1, r4
 8008eea:	f7ff ff63 	bl	8008db4 <__sflush_r>
 8008eee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ef0:	4605      	mov	r5, r0
 8008ef2:	07da      	lsls	r2, r3, #31
 8008ef4:	d4e4      	bmi.n	8008ec0 <_fflush_r+0xc>
 8008ef6:	89a3      	ldrh	r3, [r4, #12]
 8008ef8:	059b      	lsls	r3, r3, #22
 8008efa:	d4e1      	bmi.n	8008ec0 <_fflush_r+0xc>
 8008efc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008efe:	f7fe fb23 	bl	8007548 <__retarget_lock_release_recursive>
 8008f02:	e7dd      	b.n	8008ec0 <_fflush_r+0xc>

08008f04 <memmove>:
 8008f04:	4288      	cmp	r0, r1
 8008f06:	b510      	push	{r4, lr}
 8008f08:	eb01 0402 	add.w	r4, r1, r2
 8008f0c:	d902      	bls.n	8008f14 <memmove+0x10>
 8008f0e:	4284      	cmp	r4, r0
 8008f10:	4623      	mov	r3, r4
 8008f12:	d807      	bhi.n	8008f24 <memmove+0x20>
 8008f14:	1e43      	subs	r3, r0, #1
 8008f16:	42a1      	cmp	r1, r4
 8008f18:	d008      	beq.n	8008f2c <memmove+0x28>
 8008f1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f22:	e7f8      	b.n	8008f16 <memmove+0x12>
 8008f24:	4601      	mov	r1, r0
 8008f26:	4402      	add	r2, r0
 8008f28:	428a      	cmp	r2, r1
 8008f2a:	d100      	bne.n	8008f2e <memmove+0x2a>
 8008f2c:	bd10      	pop	{r4, pc}
 8008f2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f36:	e7f7      	b.n	8008f28 <memmove+0x24>

08008f38 <_sbrk_r>:
 8008f38:	b538      	push	{r3, r4, r5, lr}
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	4d05      	ldr	r5, [pc, #20]	@ (8008f54 <_sbrk_r+0x1c>)
 8008f3e:	4604      	mov	r4, r0
 8008f40:	4608      	mov	r0, r1
 8008f42:	602b      	str	r3, [r5, #0]
 8008f44:	f7f9 fe12 	bl	8002b6c <_sbrk>
 8008f48:	1c43      	adds	r3, r0, #1
 8008f4a:	d102      	bne.n	8008f52 <_sbrk_r+0x1a>
 8008f4c:	682b      	ldr	r3, [r5, #0]
 8008f4e:	b103      	cbz	r3, 8008f52 <_sbrk_r+0x1a>
 8008f50:	6023      	str	r3, [r4, #0]
 8008f52:	bd38      	pop	{r3, r4, r5, pc}
 8008f54:	20000658 	.word	0x20000658

08008f58 <memcpy>:
 8008f58:	440a      	add	r2, r1
 8008f5a:	4291      	cmp	r1, r2
 8008f5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f60:	d100      	bne.n	8008f64 <memcpy+0xc>
 8008f62:	4770      	bx	lr
 8008f64:	b510      	push	{r4, lr}
 8008f66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f6a:	4291      	cmp	r1, r2
 8008f6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f70:	d1f9      	bne.n	8008f66 <memcpy+0xe>
 8008f72:	bd10      	pop	{r4, pc}

08008f74 <__assert_func>:
 8008f74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f76:	4614      	mov	r4, r2
 8008f78:	461a      	mov	r2, r3
 8008f7a:	4b09      	ldr	r3, [pc, #36]	@ (8008fa0 <__assert_func+0x2c>)
 8008f7c:	4605      	mov	r5, r0
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68d8      	ldr	r0, [r3, #12]
 8008f82:	b954      	cbnz	r4, 8008f9a <__assert_func+0x26>
 8008f84:	4b07      	ldr	r3, [pc, #28]	@ (8008fa4 <__assert_func+0x30>)
 8008f86:	461c      	mov	r4, r3
 8008f88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f8c:	9100      	str	r1, [sp, #0]
 8008f8e:	462b      	mov	r3, r5
 8008f90:	4905      	ldr	r1, [pc, #20]	@ (8008fa8 <__assert_func+0x34>)
 8008f92:	f000 f86f 	bl	8009074 <fiprintf>
 8008f96:	f000 f87f 	bl	8009098 <abort>
 8008f9a:	4b04      	ldr	r3, [pc, #16]	@ (8008fac <__assert_func+0x38>)
 8008f9c:	e7f4      	b.n	8008f88 <__assert_func+0x14>
 8008f9e:	bf00      	nop
 8008fa0:	2000001c 	.word	0x2000001c
 8008fa4:	080098e6 	.word	0x080098e6
 8008fa8:	080098b8 	.word	0x080098b8
 8008fac:	080098ab 	.word	0x080098ab

08008fb0 <_calloc_r>:
 8008fb0:	b570      	push	{r4, r5, r6, lr}
 8008fb2:	fba1 5402 	umull	r5, r4, r1, r2
 8008fb6:	b93c      	cbnz	r4, 8008fc8 <_calloc_r+0x18>
 8008fb8:	4629      	mov	r1, r5
 8008fba:	f7ff f997 	bl	80082ec <_malloc_r>
 8008fbe:	4606      	mov	r6, r0
 8008fc0:	b928      	cbnz	r0, 8008fce <_calloc_r+0x1e>
 8008fc2:	2600      	movs	r6, #0
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	bd70      	pop	{r4, r5, r6, pc}
 8008fc8:	220c      	movs	r2, #12
 8008fca:	6002      	str	r2, [r0, #0]
 8008fcc:	e7f9      	b.n	8008fc2 <_calloc_r+0x12>
 8008fce:	462a      	mov	r2, r5
 8008fd0:	4621      	mov	r1, r4
 8008fd2:	f7fe fa3a 	bl	800744a <memset>
 8008fd6:	e7f5      	b.n	8008fc4 <_calloc_r+0x14>

08008fd8 <__ascii_mbtowc>:
 8008fd8:	b082      	sub	sp, #8
 8008fda:	b901      	cbnz	r1, 8008fde <__ascii_mbtowc+0x6>
 8008fdc:	a901      	add	r1, sp, #4
 8008fde:	b142      	cbz	r2, 8008ff2 <__ascii_mbtowc+0x1a>
 8008fe0:	b14b      	cbz	r3, 8008ff6 <__ascii_mbtowc+0x1e>
 8008fe2:	7813      	ldrb	r3, [r2, #0]
 8008fe4:	600b      	str	r3, [r1, #0]
 8008fe6:	7812      	ldrb	r2, [r2, #0]
 8008fe8:	1e10      	subs	r0, r2, #0
 8008fea:	bf18      	it	ne
 8008fec:	2001      	movne	r0, #1
 8008fee:	b002      	add	sp, #8
 8008ff0:	4770      	bx	lr
 8008ff2:	4610      	mov	r0, r2
 8008ff4:	e7fb      	b.n	8008fee <__ascii_mbtowc+0x16>
 8008ff6:	f06f 0001 	mvn.w	r0, #1
 8008ffa:	e7f8      	b.n	8008fee <__ascii_mbtowc+0x16>

08008ffc <_realloc_r>:
 8008ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009000:	4680      	mov	r8, r0
 8009002:	4615      	mov	r5, r2
 8009004:	460c      	mov	r4, r1
 8009006:	b921      	cbnz	r1, 8009012 <_realloc_r+0x16>
 8009008:	4611      	mov	r1, r2
 800900a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800900e:	f7ff b96d 	b.w	80082ec <_malloc_r>
 8009012:	b92a      	cbnz	r2, 8009020 <_realloc_r+0x24>
 8009014:	f7ff f8f8 	bl	8008208 <_free_r>
 8009018:	2400      	movs	r4, #0
 800901a:	4620      	mov	r0, r4
 800901c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009020:	f000 f841 	bl	80090a6 <_malloc_usable_size_r>
 8009024:	4285      	cmp	r5, r0
 8009026:	4606      	mov	r6, r0
 8009028:	d802      	bhi.n	8009030 <_realloc_r+0x34>
 800902a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800902e:	d8f4      	bhi.n	800901a <_realloc_r+0x1e>
 8009030:	4629      	mov	r1, r5
 8009032:	4640      	mov	r0, r8
 8009034:	f7ff f95a 	bl	80082ec <_malloc_r>
 8009038:	4607      	mov	r7, r0
 800903a:	2800      	cmp	r0, #0
 800903c:	d0ec      	beq.n	8009018 <_realloc_r+0x1c>
 800903e:	42b5      	cmp	r5, r6
 8009040:	462a      	mov	r2, r5
 8009042:	4621      	mov	r1, r4
 8009044:	bf28      	it	cs
 8009046:	4632      	movcs	r2, r6
 8009048:	f7ff ff86 	bl	8008f58 <memcpy>
 800904c:	4621      	mov	r1, r4
 800904e:	4640      	mov	r0, r8
 8009050:	f7ff f8da 	bl	8008208 <_free_r>
 8009054:	463c      	mov	r4, r7
 8009056:	e7e0      	b.n	800901a <_realloc_r+0x1e>

08009058 <__ascii_wctomb>:
 8009058:	4603      	mov	r3, r0
 800905a:	4608      	mov	r0, r1
 800905c:	b141      	cbz	r1, 8009070 <__ascii_wctomb+0x18>
 800905e:	2aff      	cmp	r2, #255	@ 0xff
 8009060:	d904      	bls.n	800906c <__ascii_wctomb+0x14>
 8009062:	228a      	movs	r2, #138	@ 0x8a
 8009064:	f04f 30ff 	mov.w	r0, #4294967295
 8009068:	601a      	str	r2, [r3, #0]
 800906a:	4770      	bx	lr
 800906c:	2001      	movs	r0, #1
 800906e:	700a      	strb	r2, [r1, #0]
 8009070:	4770      	bx	lr
	...

08009074 <fiprintf>:
 8009074:	b40e      	push	{r1, r2, r3}
 8009076:	b503      	push	{r0, r1, lr}
 8009078:	4601      	mov	r1, r0
 800907a:	ab03      	add	r3, sp, #12
 800907c:	4805      	ldr	r0, [pc, #20]	@ (8009094 <fiprintf+0x20>)
 800907e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009082:	6800      	ldr	r0, [r0, #0]
 8009084:	9301      	str	r3, [sp, #4]
 8009086:	f000 f83d 	bl	8009104 <_vfiprintf_r>
 800908a:	b002      	add	sp, #8
 800908c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009090:	b003      	add	sp, #12
 8009092:	4770      	bx	lr
 8009094:	2000001c 	.word	0x2000001c

08009098 <abort>:
 8009098:	2006      	movs	r0, #6
 800909a:	b508      	push	{r3, lr}
 800909c:	f000 fa06 	bl	80094ac <raise>
 80090a0:	2001      	movs	r0, #1
 80090a2:	f7f9 fcee 	bl	8002a82 <_exit>

080090a6 <_malloc_usable_size_r>:
 80090a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090aa:	1f18      	subs	r0, r3, #4
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	bfbc      	itt	lt
 80090b0:	580b      	ldrlt	r3, [r1, r0]
 80090b2:	18c0      	addlt	r0, r0, r3
 80090b4:	4770      	bx	lr

080090b6 <__sfputc_r>:
 80090b6:	6893      	ldr	r3, [r2, #8]
 80090b8:	b410      	push	{r4}
 80090ba:	3b01      	subs	r3, #1
 80090bc:	2b00      	cmp	r3, #0
 80090be:	6093      	str	r3, [r2, #8]
 80090c0:	da07      	bge.n	80090d2 <__sfputc_r+0x1c>
 80090c2:	6994      	ldr	r4, [r2, #24]
 80090c4:	42a3      	cmp	r3, r4
 80090c6:	db01      	blt.n	80090cc <__sfputc_r+0x16>
 80090c8:	290a      	cmp	r1, #10
 80090ca:	d102      	bne.n	80090d2 <__sfputc_r+0x1c>
 80090cc:	bc10      	pop	{r4}
 80090ce:	f000 b931 	b.w	8009334 <__swbuf_r>
 80090d2:	6813      	ldr	r3, [r2, #0]
 80090d4:	1c58      	adds	r0, r3, #1
 80090d6:	6010      	str	r0, [r2, #0]
 80090d8:	7019      	strb	r1, [r3, #0]
 80090da:	4608      	mov	r0, r1
 80090dc:	bc10      	pop	{r4}
 80090de:	4770      	bx	lr

080090e0 <__sfputs_r>:
 80090e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e2:	4606      	mov	r6, r0
 80090e4:	460f      	mov	r7, r1
 80090e6:	4614      	mov	r4, r2
 80090e8:	18d5      	adds	r5, r2, r3
 80090ea:	42ac      	cmp	r4, r5
 80090ec:	d101      	bne.n	80090f2 <__sfputs_r+0x12>
 80090ee:	2000      	movs	r0, #0
 80090f0:	e007      	b.n	8009102 <__sfputs_r+0x22>
 80090f2:	463a      	mov	r2, r7
 80090f4:	4630      	mov	r0, r6
 80090f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090fa:	f7ff ffdc 	bl	80090b6 <__sfputc_r>
 80090fe:	1c43      	adds	r3, r0, #1
 8009100:	d1f3      	bne.n	80090ea <__sfputs_r+0xa>
 8009102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009104 <_vfiprintf_r>:
 8009104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009108:	460d      	mov	r5, r1
 800910a:	4614      	mov	r4, r2
 800910c:	4698      	mov	r8, r3
 800910e:	4606      	mov	r6, r0
 8009110:	b09d      	sub	sp, #116	@ 0x74
 8009112:	b118      	cbz	r0, 800911c <_vfiprintf_r+0x18>
 8009114:	6a03      	ldr	r3, [r0, #32]
 8009116:	b90b      	cbnz	r3, 800911c <_vfiprintf_r+0x18>
 8009118:	f7fe f8fe 	bl	8007318 <__sinit>
 800911c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800911e:	07d9      	lsls	r1, r3, #31
 8009120:	d405      	bmi.n	800912e <_vfiprintf_r+0x2a>
 8009122:	89ab      	ldrh	r3, [r5, #12]
 8009124:	059a      	lsls	r2, r3, #22
 8009126:	d402      	bmi.n	800912e <_vfiprintf_r+0x2a>
 8009128:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800912a:	f7fe fa0c 	bl	8007546 <__retarget_lock_acquire_recursive>
 800912e:	89ab      	ldrh	r3, [r5, #12]
 8009130:	071b      	lsls	r3, r3, #28
 8009132:	d501      	bpl.n	8009138 <_vfiprintf_r+0x34>
 8009134:	692b      	ldr	r3, [r5, #16]
 8009136:	b99b      	cbnz	r3, 8009160 <_vfiprintf_r+0x5c>
 8009138:	4629      	mov	r1, r5
 800913a:	4630      	mov	r0, r6
 800913c:	f000 f938 	bl	80093b0 <__swsetup_r>
 8009140:	b170      	cbz	r0, 8009160 <_vfiprintf_r+0x5c>
 8009142:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009144:	07dc      	lsls	r4, r3, #31
 8009146:	d504      	bpl.n	8009152 <_vfiprintf_r+0x4e>
 8009148:	f04f 30ff 	mov.w	r0, #4294967295
 800914c:	b01d      	add	sp, #116	@ 0x74
 800914e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009152:	89ab      	ldrh	r3, [r5, #12]
 8009154:	0598      	lsls	r0, r3, #22
 8009156:	d4f7      	bmi.n	8009148 <_vfiprintf_r+0x44>
 8009158:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800915a:	f7fe f9f5 	bl	8007548 <__retarget_lock_release_recursive>
 800915e:	e7f3      	b.n	8009148 <_vfiprintf_r+0x44>
 8009160:	2300      	movs	r3, #0
 8009162:	9309      	str	r3, [sp, #36]	@ 0x24
 8009164:	2320      	movs	r3, #32
 8009166:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800916a:	2330      	movs	r3, #48	@ 0x30
 800916c:	f04f 0901 	mov.w	r9, #1
 8009170:	f8cd 800c 	str.w	r8, [sp, #12]
 8009174:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009320 <_vfiprintf_r+0x21c>
 8009178:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800917c:	4623      	mov	r3, r4
 800917e:	469a      	mov	sl, r3
 8009180:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009184:	b10a      	cbz	r2, 800918a <_vfiprintf_r+0x86>
 8009186:	2a25      	cmp	r2, #37	@ 0x25
 8009188:	d1f9      	bne.n	800917e <_vfiprintf_r+0x7a>
 800918a:	ebba 0b04 	subs.w	fp, sl, r4
 800918e:	d00b      	beq.n	80091a8 <_vfiprintf_r+0xa4>
 8009190:	465b      	mov	r3, fp
 8009192:	4622      	mov	r2, r4
 8009194:	4629      	mov	r1, r5
 8009196:	4630      	mov	r0, r6
 8009198:	f7ff ffa2 	bl	80090e0 <__sfputs_r>
 800919c:	3001      	adds	r0, #1
 800919e:	f000 80a7 	beq.w	80092f0 <_vfiprintf_r+0x1ec>
 80091a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091a4:	445a      	add	r2, fp
 80091a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80091a8:	f89a 3000 	ldrb.w	r3, [sl]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f000 809f 	beq.w	80092f0 <_vfiprintf_r+0x1ec>
 80091b2:	2300      	movs	r3, #0
 80091b4:	f04f 32ff 	mov.w	r2, #4294967295
 80091b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091bc:	f10a 0a01 	add.w	sl, sl, #1
 80091c0:	9304      	str	r3, [sp, #16]
 80091c2:	9307      	str	r3, [sp, #28]
 80091c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80091ca:	4654      	mov	r4, sl
 80091cc:	2205      	movs	r2, #5
 80091ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091d2:	4853      	ldr	r0, [pc, #332]	@ (8009320 <_vfiprintf_r+0x21c>)
 80091d4:	f7fe f9b9 	bl	800754a <memchr>
 80091d8:	9a04      	ldr	r2, [sp, #16]
 80091da:	b9d8      	cbnz	r0, 8009214 <_vfiprintf_r+0x110>
 80091dc:	06d1      	lsls	r1, r2, #27
 80091de:	bf44      	itt	mi
 80091e0:	2320      	movmi	r3, #32
 80091e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091e6:	0713      	lsls	r3, r2, #28
 80091e8:	bf44      	itt	mi
 80091ea:	232b      	movmi	r3, #43	@ 0x2b
 80091ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091f0:	f89a 3000 	ldrb.w	r3, [sl]
 80091f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80091f6:	d015      	beq.n	8009224 <_vfiprintf_r+0x120>
 80091f8:	4654      	mov	r4, sl
 80091fa:	2000      	movs	r0, #0
 80091fc:	f04f 0c0a 	mov.w	ip, #10
 8009200:	9a07      	ldr	r2, [sp, #28]
 8009202:	4621      	mov	r1, r4
 8009204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009208:	3b30      	subs	r3, #48	@ 0x30
 800920a:	2b09      	cmp	r3, #9
 800920c:	d94b      	bls.n	80092a6 <_vfiprintf_r+0x1a2>
 800920e:	b1b0      	cbz	r0, 800923e <_vfiprintf_r+0x13a>
 8009210:	9207      	str	r2, [sp, #28]
 8009212:	e014      	b.n	800923e <_vfiprintf_r+0x13a>
 8009214:	eba0 0308 	sub.w	r3, r0, r8
 8009218:	fa09 f303 	lsl.w	r3, r9, r3
 800921c:	4313      	orrs	r3, r2
 800921e:	46a2      	mov	sl, r4
 8009220:	9304      	str	r3, [sp, #16]
 8009222:	e7d2      	b.n	80091ca <_vfiprintf_r+0xc6>
 8009224:	9b03      	ldr	r3, [sp, #12]
 8009226:	1d19      	adds	r1, r3, #4
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	9103      	str	r1, [sp, #12]
 800922c:	2b00      	cmp	r3, #0
 800922e:	bfbb      	ittet	lt
 8009230:	425b      	neglt	r3, r3
 8009232:	f042 0202 	orrlt.w	r2, r2, #2
 8009236:	9307      	strge	r3, [sp, #28]
 8009238:	9307      	strlt	r3, [sp, #28]
 800923a:	bfb8      	it	lt
 800923c:	9204      	strlt	r2, [sp, #16]
 800923e:	7823      	ldrb	r3, [r4, #0]
 8009240:	2b2e      	cmp	r3, #46	@ 0x2e
 8009242:	d10a      	bne.n	800925a <_vfiprintf_r+0x156>
 8009244:	7863      	ldrb	r3, [r4, #1]
 8009246:	2b2a      	cmp	r3, #42	@ 0x2a
 8009248:	d132      	bne.n	80092b0 <_vfiprintf_r+0x1ac>
 800924a:	9b03      	ldr	r3, [sp, #12]
 800924c:	3402      	adds	r4, #2
 800924e:	1d1a      	adds	r2, r3, #4
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	9203      	str	r2, [sp, #12]
 8009254:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009258:	9305      	str	r3, [sp, #20]
 800925a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009324 <_vfiprintf_r+0x220>
 800925e:	2203      	movs	r2, #3
 8009260:	4650      	mov	r0, sl
 8009262:	7821      	ldrb	r1, [r4, #0]
 8009264:	f7fe f971 	bl	800754a <memchr>
 8009268:	b138      	cbz	r0, 800927a <_vfiprintf_r+0x176>
 800926a:	2240      	movs	r2, #64	@ 0x40
 800926c:	9b04      	ldr	r3, [sp, #16]
 800926e:	eba0 000a 	sub.w	r0, r0, sl
 8009272:	4082      	lsls	r2, r0
 8009274:	4313      	orrs	r3, r2
 8009276:	3401      	adds	r4, #1
 8009278:	9304      	str	r3, [sp, #16]
 800927a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800927e:	2206      	movs	r2, #6
 8009280:	4829      	ldr	r0, [pc, #164]	@ (8009328 <_vfiprintf_r+0x224>)
 8009282:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009286:	f7fe f960 	bl	800754a <memchr>
 800928a:	2800      	cmp	r0, #0
 800928c:	d03f      	beq.n	800930e <_vfiprintf_r+0x20a>
 800928e:	4b27      	ldr	r3, [pc, #156]	@ (800932c <_vfiprintf_r+0x228>)
 8009290:	bb1b      	cbnz	r3, 80092da <_vfiprintf_r+0x1d6>
 8009292:	9b03      	ldr	r3, [sp, #12]
 8009294:	3307      	adds	r3, #7
 8009296:	f023 0307 	bic.w	r3, r3, #7
 800929a:	3308      	adds	r3, #8
 800929c:	9303      	str	r3, [sp, #12]
 800929e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092a0:	443b      	add	r3, r7
 80092a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80092a4:	e76a      	b.n	800917c <_vfiprintf_r+0x78>
 80092a6:	460c      	mov	r4, r1
 80092a8:	2001      	movs	r0, #1
 80092aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80092ae:	e7a8      	b.n	8009202 <_vfiprintf_r+0xfe>
 80092b0:	2300      	movs	r3, #0
 80092b2:	f04f 0c0a 	mov.w	ip, #10
 80092b6:	4619      	mov	r1, r3
 80092b8:	3401      	adds	r4, #1
 80092ba:	9305      	str	r3, [sp, #20]
 80092bc:	4620      	mov	r0, r4
 80092be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092c2:	3a30      	subs	r2, #48	@ 0x30
 80092c4:	2a09      	cmp	r2, #9
 80092c6:	d903      	bls.n	80092d0 <_vfiprintf_r+0x1cc>
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d0c6      	beq.n	800925a <_vfiprintf_r+0x156>
 80092cc:	9105      	str	r1, [sp, #20]
 80092ce:	e7c4      	b.n	800925a <_vfiprintf_r+0x156>
 80092d0:	4604      	mov	r4, r0
 80092d2:	2301      	movs	r3, #1
 80092d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80092d8:	e7f0      	b.n	80092bc <_vfiprintf_r+0x1b8>
 80092da:	ab03      	add	r3, sp, #12
 80092dc:	9300      	str	r3, [sp, #0]
 80092de:	462a      	mov	r2, r5
 80092e0:	4630      	mov	r0, r6
 80092e2:	4b13      	ldr	r3, [pc, #76]	@ (8009330 <_vfiprintf_r+0x22c>)
 80092e4:	a904      	add	r1, sp, #16
 80092e6:	f7fd fbcd 	bl	8006a84 <_printf_float>
 80092ea:	4607      	mov	r7, r0
 80092ec:	1c78      	adds	r0, r7, #1
 80092ee:	d1d6      	bne.n	800929e <_vfiprintf_r+0x19a>
 80092f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092f2:	07d9      	lsls	r1, r3, #31
 80092f4:	d405      	bmi.n	8009302 <_vfiprintf_r+0x1fe>
 80092f6:	89ab      	ldrh	r3, [r5, #12]
 80092f8:	059a      	lsls	r2, r3, #22
 80092fa:	d402      	bmi.n	8009302 <_vfiprintf_r+0x1fe>
 80092fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092fe:	f7fe f923 	bl	8007548 <__retarget_lock_release_recursive>
 8009302:	89ab      	ldrh	r3, [r5, #12]
 8009304:	065b      	lsls	r3, r3, #25
 8009306:	f53f af1f 	bmi.w	8009148 <_vfiprintf_r+0x44>
 800930a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800930c:	e71e      	b.n	800914c <_vfiprintf_r+0x48>
 800930e:	ab03      	add	r3, sp, #12
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	462a      	mov	r2, r5
 8009314:	4630      	mov	r0, r6
 8009316:	4b06      	ldr	r3, [pc, #24]	@ (8009330 <_vfiprintf_r+0x22c>)
 8009318:	a904      	add	r1, sp, #16
 800931a:	f7fd fe51 	bl	8006fc0 <_printf_i>
 800931e:	e7e4      	b.n	80092ea <_vfiprintf_r+0x1e6>
 8009320:	08009890 	.word	0x08009890
 8009324:	08009896 	.word	0x08009896
 8009328:	0800989a 	.word	0x0800989a
 800932c:	08006a85 	.word	0x08006a85
 8009330:	080090e1 	.word	0x080090e1

08009334 <__swbuf_r>:
 8009334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009336:	460e      	mov	r6, r1
 8009338:	4614      	mov	r4, r2
 800933a:	4605      	mov	r5, r0
 800933c:	b118      	cbz	r0, 8009346 <__swbuf_r+0x12>
 800933e:	6a03      	ldr	r3, [r0, #32]
 8009340:	b90b      	cbnz	r3, 8009346 <__swbuf_r+0x12>
 8009342:	f7fd ffe9 	bl	8007318 <__sinit>
 8009346:	69a3      	ldr	r3, [r4, #24]
 8009348:	60a3      	str	r3, [r4, #8]
 800934a:	89a3      	ldrh	r3, [r4, #12]
 800934c:	071a      	lsls	r2, r3, #28
 800934e:	d501      	bpl.n	8009354 <__swbuf_r+0x20>
 8009350:	6923      	ldr	r3, [r4, #16]
 8009352:	b943      	cbnz	r3, 8009366 <__swbuf_r+0x32>
 8009354:	4621      	mov	r1, r4
 8009356:	4628      	mov	r0, r5
 8009358:	f000 f82a 	bl	80093b0 <__swsetup_r>
 800935c:	b118      	cbz	r0, 8009366 <__swbuf_r+0x32>
 800935e:	f04f 37ff 	mov.w	r7, #4294967295
 8009362:	4638      	mov	r0, r7
 8009364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009366:	6823      	ldr	r3, [r4, #0]
 8009368:	6922      	ldr	r2, [r4, #16]
 800936a:	b2f6      	uxtb	r6, r6
 800936c:	1a98      	subs	r0, r3, r2
 800936e:	6963      	ldr	r3, [r4, #20]
 8009370:	4637      	mov	r7, r6
 8009372:	4283      	cmp	r3, r0
 8009374:	dc05      	bgt.n	8009382 <__swbuf_r+0x4e>
 8009376:	4621      	mov	r1, r4
 8009378:	4628      	mov	r0, r5
 800937a:	f7ff fd9b 	bl	8008eb4 <_fflush_r>
 800937e:	2800      	cmp	r0, #0
 8009380:	d1ed      	bne.n	800935e <__swbuf_r+0x2a>
 8009382:	68a3      	ldr	r3, [r4, #8]
 8009384:	3b01      	subs	r3, #1
 8009386:	60a3      	str	r3, [r4, #8]
 8009388:	6823      	ldr	r3, [r4, #0]
 800938a:	1c5a      	adds	r2, r3, #1
 800938c:	6022      	str	r2, [r4, #0]
 800938e:	701e      	strb	r6, [r3, #0]
 8009390:	6962      	ldr	r2, [r4, #20]
 8009392:	1c43      	adds	r3, r0, #1
 8009394:	429a      	cmp	r2, r3
 8009396:	d004      	beq.n	80093a2 <__swbuf_r+0x6e>
 8009398:	89a3      	ldrh	r3, [r4, #12]
 800939a:	07db      	lsls	r3, r3, #31
 800939c:	d5e1      	bpl.n	8009362 <__swbuf_r+0x2e>
 800939e:	2e0a      	cmp	r6, #10
 80093a0:	d1df      	bne.n	8009362 <__swbuf_r+0x2e>
 80093a2:	4621      	mov	r1, r4
 80093a4:	4628      	mov	r0, r5
 80093a6:	f7ff fd85 	bl	8008eb4 <_fflush_r>
 80093aa:	2800      	cmp	r0, #0
 80093ac:	d0d9      	beq.n	8009362 <__swbuf_r+0x2e>
 80093ae:	e7d6      	b.n	800935e <__swbuf_r+0x2a>

080093b0 <__swsetup_r>:
 80093b0:	b538      	push	{r3, r4, r5, lr}
 80093b2:	4b29      	ldr	r3, [pc, #164]	@ (8009458 <__swsetup_r+0xa8>)
 80093b4:	4605      	mov	r5, r0
 80093b6:	6818      	ldr	r0, [r3, #0]
 80093b8:	460c      	mov	r4, r1
 80093ba:	b118      	cbz	r0, 80093c4 <__swsetup_r+0x14>
 80093bc:	6a03      	ldr	r3, [r0, #32]
 80093be:	b90b      	cbnz	r3, 80093c4 <__swsetup_r+0x14>
 80093c0:	f7fd ffaa 	bl	8007318 <__sinit>
 80093c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093c8:	0719      	lsls	r1, r3, #28
 80093ca:	d422      	bmi.n	8009412 <__swsetup_r+0x62>
 80093cc:	06da      	lsls	r2, r3, #27
 80093ce:	d407      	bmi.n	80093e0 <__swsetup_r+0x30>
 80093d0:	2209      	movs	r2, #9
 80093d2:	602a      	str	r2, [r5, #0]
 80093d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093d8:	f04f 30ff 	mov.w	r0, #4294967295
 80093dc:	81a3      	strh	r3, [r4, #12]
 80093de:	e033      	b.n	8009448 <__swsetup_r+0x98>
 80093e0:	0758      	lsls	r0, r3, #29
 80093e2:	d512      	bpl.n	800940a <__swsetup_r+0x5a>
 80093e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093e6:	b141      	cbz	r1, 80093fa <__swsetup_r+0x4a>
 80093e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093ec:	4299      	cmp	r1, r3
 80093ee:	d002      	beq.n	80093f6 <__swsetup_r+0x46>
 80093f0:	4628      	mov	r0, r5
 80093f2:	f7fe ff09 	bl	8008208 <_free_r>
 80093f6:	2300      	movs	r3, #0
 80093f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80093fa:	89a3      	ldrh	r3, [r4, #12]
 80093fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009400:	81a3      	strh	r3, [r4, #12]
 8009402:	2300      	movs	r3, #0
 8009404:	6063      	str	r3, [r4, #4]
 8009406:	6923      	ldr	r3, [r4, #16]
 8009408:	6023      	str	r3, [r4, #0]
 800940a:	89a3      	ldrh	r3, [r4, #12]
 800940c:	f043 0308 	orr.w	r3, r3, #8
 8009410:	81a3      	strh	r3, [r4, #12]
 8009412:	6923      	ldr	r3, [r4, #16]
 8009414:	b94b      	cbnz	r3, 800942a <__swsetup_r+0x7a>
 8009416:	89a3      	ldrh	r3, [r4, #12]
 8009418:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800941c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009420:	d003      	beq.n	800942a <__swsetup_r+0x7a>
 8009422:	4621      	mov	r1, r4
 8009424:	4628      	mov	r0, r5
 8009426:	f000 f882 	bl	800952e <__smakebuf_r>
 800942a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800942e:	f013 0201 	ands.w	r2, r3, #1
 8009432:	d00a      	beq.n	800944a <__swsetup_r+0x9a>
 8009434:	2200      	movs	r2, #0
 8009436:	60a2      	str	r2, [r4, #8]
 8009438:	6962      	ldr	r2, [r4, #20]
 800943a:	4252      	negs	r2, r2
 800943c:	61a2      	str	r2, [r4, #24]
 800943e:	6922      	ldr	r2, [r4, #16]
 8009440:	b942      	cbnz	r2, 8009454 <__swsetup_r+0xa4>
 8009442:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009446:	d1c5      	bne.n	80093d4 <__swsetup_r+0x24>
 8009448:	bd38      	pop	{r3, r4, r5, pc}
 800944a:	0799      	lsls	r1, r3, #30
 800944c:	bf58      	it	pl
 800944e:	6962      	ldrpl	r2, [r4, #20]
 8009450:	60a2      	str	r2, [r4, #8]
 8009452:	e7f4      	b.n	800943e <__swsetup_r+0x8e>
 8009454:	2000      	movs	r0, #0
 8009456:	e7f7      	b.n	8009448 <__swsetup_r+0x98>
 8009458:	2000001c 	.word	0x2000001c

0800945c <_raise_r>:
 800945c:	291f      	cmp	r1, #31
 800945e:	b538      	push	{r3, r4, r5, lr}
 8009460:	4605      	mov	r5, r0
 8009462:	460c      	mov	r4, r1
 8009464:	d904      	bls.n	8009470 <_raise_r+0x14>
 8009466:	2316      	movs	r3, #22
 8009468:	6003      	str	r3, [r0, #0]
 800946a:	f04f 30ff 	mov.w	r0, #4294967295
 800946e:	bd38      	pop	{r3, r4, r5, pc}
 8009470:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009472:	b112      	cbz	r2, 800947a <_raise_r+0x1e>
 8009474:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009478:	b94b      	cbnz	r3, 800948e <_raise_r+0x32>
 800947a:	4628      	mov	r0, r5
 800947c:	f000 f830 	bl	80094e0 <_getpid_r>
 8009480:	4622      	mov	r2, r4
 8009482:	4601      	mov	r1, r0
 8009484:	4628      	mov	r0, r5
 8009486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800948a:	f000 b817 	b.w	80094bc <_kill_r>
 800948e:	2b01      	cmp	r3, #1
 8009490:	d00a      	beq.n	80094a8 <_raise_r+0x4c>
 8009492:	1c59      	adds	r1, r3, #1
 8009494:	d103      	bne.n	800949e <_raise_r+0x42>
 8009496:	2316      	movs	r3, #22
 8009498:	6003      	str	r3, [r0, #0]
 800949a:	2001      	movs	r0, #1
 800949c:	e7e7      	b.n	800946e <_raise_r+0x12>
 800949e:	2100      	movs	r1, #0
 80094a0:	4620      	mov	r0, r4
 80094a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80094a6:	4798      	blx	r3
 80094a8:	2000      	movs	r0, #0
 80094aa:	e7e0      	b.n	800946e <_raise_r+0x12>

080094ac <raise>:
 80094ac:	4b02      	ldr	r3, [pc, #8]	@ (80094b8 <raise+0xc>)
 80094ae:	4601      	mov	r1, r0
 80094b0:	6818      	ldr	r0, [r3, #0]
 80094b2:	f7ff bfd3 	b.w	800945c <_raise_r>
 80094b6:	bf00      	nop
 80094b8:	2000001c 	.word	0x2000001c

080094bc <_kill_r>:
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	2300      	movs	r3, #0
 80094c0:	4d06      	ldr	r5, [pc, #24]	@ (80094dc <_kill_r+0x20>)
 80094c2:	4604      	mov	r4, r0
 80094c4:	4608      	mov	r0, r1
 80094c6:	4611      	mov	r1, r2
 80094c8:	602b      	str	r3, [r5, #0]
 80094ca:	f7f9 faca 	bl	8002a62 <_kill>
 80094ce:	1c43      	adds	r3, r0, #1
 80094d0:	d102      	bne.n	80094d8 <_kill_r+0x1c>
 80094d2:	682b      	ldr	r3, [r5, #0]
 80094d4:	b103      	cbz	r3, 80094d8 <_kill_r+0x1c>
 80094d6:	6023      	str	r3, [r4, #0]
 80094d8:	bd38      	pop	{r3, r4, r5, pc}
 80094da:	bf00      	nop
 80094dc:	20000658 	.word	0x20000658

080094e0 <_getpid_r>:
 80094e0:	f7f9 bab8 	b.w	8002a54 <_getpid>

080094e4 <__swhatbuf_r>:
 80094e4:	b570      	push	{r4, r5, r6, lr}
 80094e6:	460c      	mov	r4, r1
 80094e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ec:	4615      	mov	r5, r2
 80094ee:	2900      	cmp	r1, #0
 80094f0:	461e      	mov	r6, r3
 80094f2:	b096      	sub	sp, #88	@ 0x58
 80094f4:	da0c      	bge.n	8009510 <__swhatbuf_r+0x2c>
 80094f6:	89a3      	ldrh	r3, [r4, #12]
 80094f8:	2100      	movs	r1, #0
 80094fa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80094fe:	bf14      	ite	ne
 8009500:	2340      	movne	r3, #64	@ 0x40
 8009502:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009506:	2000      	movs	r0, #0
 8009508:	6031      	str	r1, [r6, #0]
 800950a:	602b      	str	r3, [r5, #0]
 800950c:	b016      	add	sp, #88	@ 0x58
 800950e:	bd70      	pop	{r4, r5, r6, pc}
 8009510:	466a      	mov	r2, sp
 8009512:	f000 f849 	bl	80095a8 <_fstat_r>
 8009516:	2800      	cmp	r0, #0
 8009518:	dbed      	blt.n	80094f6 <__swhatbuf_r+0x12>
 800951a:	9901      	ldr	r1, [sp, #4]
 800951c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009520:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009524:	4259      	negs	r1, r3
 8009526:	4159      	adcs	r1, r3
 8009528:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800952c:	e7eb      	b.n	8009506 <__swhatbuf_r+0x22>

0800952e <__smakebuf_r>:
 800952e:	898b      	ldrh	r3, [r1, #12]
 8009530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009532:	079d      	lsls	r5, r3, #30
 8009534:	4606      	mov	r6, r0
 8009536:	460c      	mov	r4, r1
 8009538:	d507      	bpl.n	800954a <__smakebuf_r+0x1c>
 800953a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800953e:	6023      	str	r3, [r4, #0]
 8009540:	6123      	str	r3, [r4, #16]
 8009542:	2301      	movs	r3, #1
 8009544:	6163      	str	r3, [r4, #20]
 8009546:	b003      	add	sp, #12
 8009548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800954a:	466a      	mov	r2, sp
 800954c:	ab01      	add	r3, sp, #4
 800954e:	f7ff ffc9 	bl	80094e4 <__swhatbuf_r>
 8009552:	9f00      	ldr	r7, [sp, #0]
 8009554:	4605      	mov	r5, r0
 8009556:	4639      	mov	r1, r7
 8009558:	4630      	mov	r0, r6
 800955a:	f7fe fec7 	bl	80082ec <_malloc_r>
 800955e:	b948      	cbnz	r0, 8009574 <__smakebuf_r+0x46>
 8009560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009564:	059a      	lsls	r2, r3, #22
 8009566:	d4ee      	bmi.n	8009546 <__smakebuf_r+0x18>
 8009568:	f023 0303 	bic.w	r3, r3, #3
 800956c:	f043 0302 	orr.w	r3, r3, #2
 8009570:	81a3      	strh	r3, [r4, #12]
 8009572:	e7e2      	b.n	800953a <__smakebuf_r+0xc>
 8009574:	89a3      	ldrh	r3, [r4, #12]
 8009576:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800957a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800957e:	81a3      	strh	r3, [r4, #12]
 8009580:	9b01      	ldr	r3, [sp, #4]
 8009582:	6020      	str	r0, [r4, #0]
 8009584:	b15b      	cbz	r3, 800959e <__smakebuf_r+0x70>
 8009586:	4630      	mov	r0, r6
 8009588:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800958c:	f000 f81e 	bl	80095cc <_isatty_r>
 8009590:	b128      	cbz	r0, 800959e <__smakebuf_r+0x70>
 8009592:	89a3      	ldrh	r3, [r4, #12]
 8009594:	f023 0303 	bic.w	r3, r3, #3
 8009598:	f043 0301 	orr.w	r3, r3, #1
 800959c:	81a3      	strh	r3, [r4, #12]
 800959e:	89a3      	ldrh	r3, [r4, #12]
 80095a0:	431d      	orrs	r5, r3
 80095a2:	81a5      	strh	r5, [r4, #12]
 80095a4:	e7cf      	b.n	8009546 <__smakebuf_r+0x18>
	...

080095a8 <_fstat_r>:
 80095a8:	b538      	push	{r3, r4, r5, lr}
 80095aa:	2300      	movs	r3, #0
 80095ac:	4d06      	ldr	r5, [pc, #24]	@ (80095c8 <_fstat_r+0x20>)
 80095ae:	4604      	mov	r4, r0
 80095b0:	4608      	mov	r0, r1
 80095b2:	4611      	mov	r1, r2
 80095b4:	602b      	str	r3, [r5, #0]
 80095b6:	f7f9 fab3 	bl	8002b20 <_fstat>
 80095ba:	1c43      	adds	r3, r0, #1
 80095bc:	d102      	bne.n	80095c4 <_fstat_r+0x1c>
 80095be:	682b      	ldr	r3, [r5, #0]
 80095c0:	b103      	cbz	r3, 80095c4 <_fstat_r+0x1c>
 80095c2:	6023      	str	r3, [r4, #0]
 80095c4:	bd38      	pop	{r3, r4, r5, pc}
 80095c6:	bf00      	nop
 80095c8:	20000658 	.word	0x20000658

080095cc <_isatty_r>:
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	2300      	movs	r3, #0
 80095d0:	4d05      	ldr	r5, [pc, #20]	@ (80095e8 <_isatty_r+0x1c>)
 80095d2:	4604      	mov	r4, r0
 80095d4:	4608      	mov	r0, r1
 80095d6:	602b      	str	r3, [r5, #0]
 80095d8:	f7f9 fab1 	bl	8002b3e <_isatty>
 80095dc:	1c43      	adds	r3, r0, #1
 80095de:	d102      	bne.n	80095e6 <_isatty_r+0x1a>
 80095e0:	682b      	ldr	r3, [r5, #0]
 80095e2:	b103      	cbz	r3, 80095e6 <_isatty_r+0x1a>
 80095e4:	6023      	str	r3, [r4, #0]
 80095e6:	bd38      	pop	{r3, r4, r5, pc}
 80095e8:	20000658 	.word	0x20000658

080095ec <_init>:
 80095ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ee:	bf00      	nop
 80095f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095f2:	bc08      	pop	{r3}
 80095f4:	469e      	mov	lr, r3
 80095f6:	4770      	bx	lr

080095f8 <_fini>:
 80095f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fa:	bf00      	nop
 80095fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095fe:	bc08      	pop	{r3}
 8009600:	469e      	mov	lr, r3
 8009602:	4770      	bx	lr
